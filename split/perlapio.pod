

=head1 NAME


0


=head1 SYNOPSIS


    #define PERLIO_NOT_STDIO 0    /* For co-existence with stdio only */
    #include <perlio. h>           /* Usually via #include <perl. h> */
    PerlIO *PerlIO_stdin(void);
    PerlIO *PerlIO_stdout(void);
    PerlIO *PerlIO_stderr(void);
    PerlIO *PerlIO_open(const char *path, const char *mode);
    PerlIO *PerlIO_fdopen(int fd, const char *mode);
    PerlIO *PerlIO_reopen(const char *path, const char *mode, PerlIO *old);  /* deprecated */
    int     PerlIO_close(PerlIO *f);
    int     PerlIO_stdoutf(const char *fmt,. . . )
    int     PerlIO_puts(PerlIO *f, const char *string);
    int     PerlIO_putc(PerlIO *f, int ch);
    int     PerlIO_write(PerlIO *f, const void *buf, size_t numbytes);
    int     PerlIO_printf(PerlIO *f, const char *fmt,. . . );
    int     PerlIO_vprintf(PerlIO *f, const char *fmt, va_list args);
    int     PerlIO_flush(PerlIO *f);
    int     PerlIO_eof(PerlIO *f);
    int     PerlIO_error(PerlIO *f);
    void    PerlIO_clearerr(PerlIO *f);
    int     PerlIO_getc(PerlIO *d);
    int     PerlIO_ungetc(PerlIO *f, int ch);
    int     PerlIO_read(PerlIO *f, void *buf, size_t numbytes);
    int     PerlIO_fileno(PerlIO *f);
    void    PerlIO_setlinebuf(PerlIO *f);
    Off_t   PerlIO_tell(PerlIO *f);
    int     PerlIO_seek(PerlIO *f, Off_t offset, int whence);
    void    PerlIO_rewind(PerlIO *f);
    int     PerlIO_getpos(PerlIO *f, SV *save);        /* prototype changed */
    int     PerlIO_setpos(PerlIO *f, SV *saved);       /* prototype changed */
    int     PerlIO_fast_gets(PerlIO *f);
    int     PerlIO_has_cntptr(PerlIO *f);
    int     PerlIO_get_cnt(PerlIO *f);
    char   *PerlIO_get_ptr(PerlIO *f);
    void    PerlIO_set_ptrcnt(PerlIO *f, char *ptr, int count);
    int     PerlIO_canset_cnt(PerlIO *f);              /* deprecated */
    void    PerlIO_set_cnt(PerlIO *f, int count);      /* deprecated */
    int     PerlIO_has_base(PerlIO *f);
    char   *PerlIO_get_base(PerlIO *f);
    int     PerlIO_get_bufsiz(PerlIO *f);
    PerlIO *PerlIO_importFILE(FILE *stdio, const char *mode);
    FILE   *PerlIO_exportFILE(PerlIO *f, int flags);
    FILE   *PerlIO_findFILE(PerlIO *f);
    void    PerlIO_releaseFILE(PerlIO *f, FILE *stdio);
    int     PerlIO_apply_layers(PerlIO *f, const char *mode, const char *layers);
    int     PerlIO_binmode(PerlIO *f, int ptype, int imode, const char *layers);
    void    PerlIO_debug(const char *fmt,. . . )
=head1 DESCRIPTION


0


0


0


0


0


0


=over 4


=item 1. USE_STDIO


0


0


0


=item 2. USE_SFIO


0


0


0


0


=item 3. USE_PERLIO


0


0


0


0


0


0


0


0


=back


0


0


=item B<PerlIO_stdin()>, B<PerlIO_stdout()>, B<PerlIO_stderr()>


0


0


=item B<PerlIO_open(path, mode)>, B<PerlIO_fdopen(fd, mode)>


0


0


=item B<PerlIO_reopen(path, mode, f)>


0


0


0


0


=item B<PerlIO_printf(f, fmt,. . . )>, B<PerlIO_vprintf(f, fmt, a)>


0


=item B<PerlIO_stdoutf(fmt,. . . )>


0


=item B<PerlIO_read(f, buf, count)>, B<PerlIO_write(f, buf, count)>


0


0


0


=item B<PerlIO_close(f)>


0


=item B<PerlIO_puts(f, s)>, B<PerlIO_putc(f, c)>


0


=item B<PerlIO_ungetc(f, c)>


0


0


0


0


0


0


0


=item B<PerlIO_getc(f)>


0


0


=item B<PerlIO_eof(f)>


0


0


0


0


=item B<PerlIO_error(f)>


0


0


=item B<PerlIO_fileno(f)>


0


0


=item B<PerlIO_clearerr(f)>


0


0


=item B<PerlIO_flush(f)>


0


0


0


0


0


=item B<PerlIO_seek(f, offset, whence)>


0


0


0


=item B<PerlIO_tell(f)>


0


0


0


0


=item B<PerlIO_getpos(f, p)>, B<PerlIO_setpos(f, p)>


0


0


0


0


0


=item B<PerlIO_rewind(f)>


0


0


    PerlIO_seek(f, (Off_t)0L, SEEK_SET);
    PerlIO_clearerr(f);
=item B<PerlIO_tmpfile()>


0


0


0


0


0


=item B<PerlIO_setlinebuf(f)>


0


0


0


0


0


=head2 Co-existence with stdio


0


0


0


   #define PERLIO_NOT_STDIO 0
0


0


0


0


0


=item B<PerlIO_importFILE(f, mode)>


0


0


0


0


0


0


0


=item B<PerlIO_exportFILE(f, mode)>


0


0


0


0


0


0


=item B<PerlIO_releaseFILE(p, f)>


0


0


0


=item B<PerlIO_findFILE(f)>


0


0


0


=head2 "Fast gets" Functions


0


0


0


0


=item B<PerlIO_fast_gets(f)>


0


0


  PerlIO_fast_gets(f) = PerlIO_has_cntptr(f) && \
                        PerlIO_canset_cnt(f) && \
                        `Can set pointer into buffer'
=item B<PerlIO_has_cntptr(f)>


0


0


=item B<PerlIO_get_cnt(f)>


0


0


=item B<PerlIO_get_ptr(f)>


0


0


=item B<PerlIO_set_ptrcnt(f, p, c)>


0


0


0


=item B<PerlIO_canset_cnt(f)>


0


=item B<PerlIO_set_cnt(f, c)>


0


0


0


0


0


0


0


=item B<PerlIO_has_base(f)>


0


0


=item B<PerlIO_get_base(f)>


0


0


=item B<PerlIO_get_bufsiz(f)>


0


0


=head2 Other Functions


=item PerlIO_apply_layers(f, mode, layers)


0


0


0


0


0


=item PerlIO_binmode(f, ptype, imode, layers)


0


=over 8


=item 'E<lt>' read


=item 'E<gt>' write


=item '+' read/write


0


0


0


0


0


    PerlIO_binmode(f, ptype, O_BINARY, NULL); and
    PerlIO_binmode(f, ptype, O_TEXT, ":crlf");
0


0


0


0


=item PerlIO_debug(fmt,. . . )


0


0


0


0


  Bourne shells (sh, ksh, bash, zsh, ash,. . . ):
   PERLIO_DEBUG=/dev/tty. /perl somescript some args
  Csh/Tcsh:
   setenv PERLIO_DEBUG /dev/tty . /perl somescript some args
  If you have the "env" utility:
   env PERLIO_DEBUG=/dev/tty. /perl somescript some args
  Win32:
   set PERLIO_DEBUG=CON
   perl somescript some args
0
