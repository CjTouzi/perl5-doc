B<!> => 񘚀
B<"GNU General Public License, version 1"> => 񧠳
B<"The Artistic License"> => 񗕣
B<#26 Vol. 10 Issue 4> => 񡔐
B<&> => 񱜵
B<-%c> => 񡁂
B<--> => 񶥡
B<--help> => 񶥤
B<--section> => 񲢖
B<-0400> => 񙤅
B<-0777> => 񙎕
B<-0> => 񶥆
B<-0I<NNN>> => 񠐃
B<-0NNN> => 񙤄
B<-> => 񶤑
B<-A> => 򀌅
B<-B> => 񗕐
B<-C [I<number/list>] > => 񷄶
B<-C [I<number/list>]> => 񷅁
B<-C> => 򀌆
B<-CioD> => 񥆆
B<-D14> => 񶠐
B<-D> => 򀅦
B<-DDEBUGGING> => 񷂔
B<-DL> => 񘘕
B<-Dr> => 񶠈
B<-Dtls> => 񶠑
B<-Duse64bitint> => 񙦆
B<-Dx> => 񶠇
B<-E> => 񶠧
B<-F> => 񶡉
B<-I> => 򀈙
B<-L> => 񡊓
B<-M-Devel::foo=bar> => 񙍐
B<-M-Devel::foo> => 񙍇
B<-M> => 򀌄
B<-MDevel::foo=bar> => 񙍂
B<-MFoo=number> => 񶤵
B<-MI<FormatterClassName>> => 񡍃
B<-MO=...> => 򀅘
B<-Mmodule=foo,bar> => 񶤰
B<-S> => 񷀰
B<-T> => 򀌈
B<-TU> => 򀌐
B<-U> => 񶦇
B<-Uuseperlio> => 񙦑
B<-V:> => 񶦖
B<-V> => 򀉐
B<-W> => 񷀈
B<-Wwrite-strings> => 񙥵
B<-X> => 񷀓
B<-[CDIMUdmtwW]> => 񷀶
B<-[CDIMUdmtw]> => 񠜅
B<-[mM]> => 񶤐
B<-a -b -c> => 񧜄
B<-a> => 򀆆
B<-abc> => 񧜅
B<-c> => 򀅗
B<-cw> => 񶙔
B<-d:> => 񶞇
B<-d:DProf> => 񶞓
B<-d:foo=bar> => 񙍁
B<-d:foo> => 񙍀
B<-d> => 񷂄
B<-dI<destination_file>> => 񡍁
B<-dt:> => 񶞑
B<-dt> => 񶞄
B<-e> => 񸡒
B<-exec> => 񶥄
B<-f> => 򀌵
B<-g> => 񶠗
B<-h> => 񶡖
B<-hv> => 񶙑
B<-i> => 򀔧
B<-l> => 񶢕
B<-m> => 񶤳
B<-mmodule=foo,bar> => 񶤧
B<-mysw> => 񶜒
B<-n> => 񶥕
B<-o> => 񡉦
B<-oI<formatname>> => 񡍂
B<-odq> => 񣌸
B<-oi> => 񣌵
B<-p> => 񶥔
B<-pna> => 񶙠
B<-q> => 񡉖
B<-r> => 񡌉
B<-re LIST OF PATTERNS> => 񨜩
B<-s> => 񶥙
B<-sTtuUWX> => 񶙐
B<-t> => 򀌉
B<-tree> => 񙘒
B<-u> => 񶦃
B<-v> => 񷊆
B<-w> => 򀚉
B<-wI<formatteroption:value>> => 񡍄
B<-x> => 񷀥
B<-xyz=abc> => 񶥣
B<-xyz> => 񶥢
B<.> => 񩢗
B<10> => 񳈗
B<11> => 񘜂
B<12> => 񘜃
B<13> => 񘙩
B<1> => 񡐖
B<2> => 񘚈
B<3> => 񘚐
B<4> => 񘚕
B<4DOS> => 񶜢
B<5> => 񘚖
B<6> => 񘚗
B<7> => 񙂅
B<8> => 񙁆
B<9> => 񘜀
B<< $foo->bar(); >> => 񲖗
B<<< example: C<< $a E<lt>=E<gt> $b >> => 񲘃
B<ASCII: American Standard Code for Information Infiltration> => 񡔇
B<Argument "the string" isn't numeric in negation (-) at ...> => 񰡗
B<BUILD> => 񰎒
B<Be aware> => 񤘴
B<Bidirectional Character Types> => 񹄖
B<Binary strings> => 񹞉
B<Blocks> => 񹄱
B<But> => 򁖓
B<C<\p{ASCII}>> => 񹑅
B<C<\p{All}>> => 񹑂
B<C<\p{Alnum}>> => 񹑃
B<C<\p{Any}>> => 񹑄
B<C<\p{Assigned}>> => 񹑆
B<C<\p{Blank}>> => 񹑇
B<C<\p{Decomposition_Type: Non_Canonical}>> => 񹑈
B<C<\p{Graph}>> => 񹑉
B<C<\p{HorizSpace}>> => 񹑐
B<C<\p{In=*}>> => 񹑑
B<C<\p{PerlSpace}>> => 񹑒
B<C<\p{PerlWord}>> => 񹑔
B<C<\p{Posix...}>> => 񹑕
B<C<\p{Present_In: *}>> => 񹑖
B<C<\p{Print}>> => 񹑗
B<C<\p{SpacePerl}>> => 񹑘
B<C<\p{VertSpace}>> => 񹑙
B<C<\p{Word}>> => 񹑠
B<C<\p{XPosix...}>> => 񹑡
B<C<rand()> is not cryptographically secure.  You should not rely on it in security-sensitive situations.> => 񦔹
B<CDRA: IBM - Character Data Representation Architecture -  Reference and Registry> => 񡔉
B<CMD.EXE> => 񶜣
B<Can't find string terminator "END" anywhere before EOF...> => 񱐷
B<Case-mapping functions> => 񰁀
B<Case-mapping interpolation> => 񰀇
B<Codes, Ciphers, and Other Cryptic and Clandestine Communication> => 񡔑
B<Comparison operators> => 񰀁
B<Configure> => 񷊘
B<D> => 񡈹
B<DECOMPRESS> => 񰎐
B<DESTROY> => 򁐅
B<DWIM> => 񷜶
B<Decoding> => 񹞗
B<Decryption Filters> => 񣎇
B<Definitions for locales that you use must be installed> => 񩡄
B<Do What I Mean> => 񷜵
B<Do not disclose the hash seed> => 񷄐
B<Don't> => 񳑴
B<EVMSERR> => 򀙲
B<Encoding> => 񹞑
B<ExtUtils::Embed> => 񡙦
B<Format declarations> => 񩢀
B<Gallic Wars> => 񡒈
B<General_Category> => 񹄆
B<H> => 񘙷
B<IBM - EBCDIC and the P-bit; The biggest Computer Goof Ever> => 񡔓
B<INSTALL> => 񰎓
B<ISO 3166> => 񩤂
B<ISO 639> => 񩤃
B<ISO 8859> => 񩤅
B<If you're on MVS> => 񰑄
B<If you're on OS/2,> => 񰐴
B<If you're on VMS,> => 񰐵
B<If you're on a Unix or Unix-like system,> => 񰐀
B<If you're on the DJGPP port of DOS,> => 񰐱
B<If you're running ActivePerl (Win95/98/2K/NT/XP, Linux, Solaris)> => 񰐅
B<If you're using a Macintosh with "Classic" MacOS and MacPerl,> => 񰐉
B<LATIN SMALL LETTER SHARP S> => 񵘃
B<LENGTH> => 񴕉
B<LOCALE PROBLEMS> => 񠤱
B<M> => 񘙄
B<MacGzip> => 񰐔
B<Make Rule 1> => 񵍓
B<Make Rule 2> => 񵐈
B<Matching operator> => 񰀓
B<NOT TO USE> => 񢒈
B<NOT> => 񵑒
B<NOTE 1> => 񨢇
B<NOTE 2> => 񨢈
B<NOTE 3> => 񨢑
B<NOTE 4> => 񨢓
B<NOTE: this is not a substitute for -T.> => 񶥸
B<NOTE:> => 񷠷
B<NOTE> => 񹙱
B<NOTICE!> => 񵑑
B<Not> => 񲙠
B<Note that the hash seed is sensitive information> => 񷄈
B<Note:> => 򀒇
B<Note> => 񴄘
B<On many operating systems, yield() is a no-op.> => 񸆁
B<Or> => 񰐢
B<Other Properties> => 񹅓
B<Output formatting functions> => 񰀷
B<POSIX character class tests> => 񰁃
B<POSIX locale-dependent functions> => 񰁂
B<PageName|ModuleName|ProgramName> => 񡌂
B<Perl Threads Are Different.> => 񸂘
B<Perl has never guaranteed any ordering of the hash keys> => 񷈑
B<Perl must believe that the locale system is supported> => 񩡅
B<PerlBuilder> => 񘜗
B<PerlDevKit> => 񘜖
B<PerlIO_canset_cnt(f)> => 񗕆
B<PerlIO_clearerr(f)> => 񗔄
B<PerlIO_close(f)> => 񗒐
B<PerlIO_eof(f)> => 񗔁
B<PerlIO_error(f)> => 񗔂
B<PerlIO_exportFILE(f,mode)> => 񗔰
B<PerlIO_fast_gets(f)> => 񗔷
B<PerlIO_fdopen(fd,mode)> => 񗑲
B<PerlIO_fileno(f)> => 񗔃
B<PerlIO_findFILE(f)> => 񗔵
B<PerlIO_flush(f)> => 񗔅
B<PerlIO_get_base(f)> => 񗕑
B<PerlIO_get_bufsiz(f)> => 񗕓
B<PerlIO_get_cnt(f)> => 񗕀
B<PerlIO_get_ptr(f)> => 񗕁
B<PerlIO_getc(f)> => 񗒙
B<PerlIO_getpos(f,p)> => 񗔖
B<PerlIO_has_base(f)> => 񗕈
B<PerlIO_has_cntptr(f)> => 񗔹
B<PerlIO_importFILE(f,mode)> => 񗔥
B<PerlIO_open(path, mode)> => 񗑱
B<PerlIO_printf(f,fmt,...)> => 񗒀
B<PerlIO_putc(f,c)> => 񗒔
B<PerlIO_puts(f,s)> => 񗒓
B<PerlIO_read(f,buf,count)> => 񗒄
B<PerlIO_releaseFILE(p,f)> => 񗔴
B<PerlIO_reopen(path,mode,f)> => 񗑷
B<PerlIO_rewind(f)> => 񗔘
B<PerlIO_seek(f,offset,whence)> => 񗔈
B<PerlIO_set_cnt(f,c)> => 񗕇
B<PerlIO_set_ptrcnt(f,p,c)> => 񗕂
B<PerlIO_setlinebuf(f)> => 񗔢
B<PerlIO_setpos(f,p)> => 񗔗
B<PerlIO_stderr()> => 񗑦
B<PerlIO_stdin()> => 񗑤
B<PerlIO_stdout()> => 񗑥
B<PerlIO_stdoutf(fmt,...)> => 񗒂
B<PerlIO_tell(f)> => 񗔓
B<PerlIO_tmpfile()> => 񗔙
B<PerlIO_ungetc(f,c)> => 񗒕
B<PerlIO_vprintf(f,fmt,a)> => 񗒁
B<PerlIO_write(f,buf,count)> => 񗒅
B<Please note that the hash seed is sensitive information> => 񷄃
B<Pod blocks> => 񲘣
B<Pod formatter> => 񲘠
B<Pod paragraphs> => 񲘦
B<Pod parser> => 񲘙
B<Pod processor> => 񲘢
B<Pod translator> => 񲘡
B<REFERENCE> => 򁐧
B<RESTRICTION> => 񰘑
B<Regular expressions and case-modification functions> => 񩡸
B<S> => 񘙆
B<SPAWN> => 򁀖
B<ST(x)> => 򁅠
B<SUPER> => 񗠰
B<Scripts> => 񹄘
B<StuffIt Expander> => 񰐓
B<Substitution operator> => 񰀥
B<T_PTROBJ> => 򁐃
B<T_PTRREF> => 򁐄
B<Text strings> => 񹞅
B<The POSIX date formatting function> => 񩢂
B<The Unicode Standard, Version 3.0> => 񡔈
B<The application must set its own locale> => 񩡓
B<The comparison operators> => 񩡢
B<The locale-determining environment variables (see L<"ENVIRONMENT">) must be correctly set up> => 񰅄
B<These are the only times when an explicit C<use utf8> is needed.> => 񹐹
B<This featured is deprecated and is scheduled to be removed in Perl 5.16.> => 񹈢
B<This is a CGI error, not a Perl error> => 񠦙
B<This is also untrue.> => 񹕢
B<This is untrue.> => 񹕖
B<Those that are targeted at a specific platform.> => 񰑒
B<Those that need to be compiled, where the target platform doesn't have compilers readily available.> => 񰑉
B<Those that should, but don't.> => 񰑈
B<Tie::Array> => 񸉐
B<U> => 񡉄
B<UNPACK> => 񰎑
B<UTF-8> => 񹞄
B<Unicode> => 񹞂
B<Use C from C?> => 񡔰
B<Use C from Perl?> => 񡔕
B<Use Perl from C?> => 񡔱
B<Use Perl from Perl?> => 񡔥
B<Use Rule 1> => 񵐥
B<Use Rule 2> => 񵎐
B<Use a Unix program from Perl?> => 񡔡
B<Use of "Is" Prefix> => 񹄤
B<V> => 񘙇
B<WARNING:> => 񴉘
B<WARNING> => 񷕑
B<Warning:> => 񙉱
B<Warning> => 񱥤
B<Whitespace> => 񲘗
B<X> => 񘙈
B<XSUB> => 򁄸
B<Your operating system must support the locale system> => 񩡃
B<[euro]> => 񲝑
B<^> => 񱜴
B<a reference to> => 񩤨
B<a2p> => 񸞄
B<a> => 񩑵
B<after> => 񷆑
B<all> => 񹎙
B<almost> => 񰑘
B<already> => 񸙤
B<alternation> => 񵚐
B<always> => 񲤓
B<anchor> => 񵙡
B<and> => 񹁒
B<anything> => 񨞑
B<are> => 񴄖
B<at least one> => 񩡑
B<awk> => 򀝤
B<b> => 񘜣
B<backreferences> => 񵜖
B<bash> => 񩤖
B<begincheck> => 񰌡
B<blank line> => 񲘓
B<blocks> => 񹄳
B<bold> => 񲍙
B<borrows syntax> => 񷜸
B<both> => 񹁑
B<but> => 񶝠
B<byte strings> => 񹞐
B<c> => 񘜦
B<call_*> => 񡕤
B<can> => 񡤸
B<cat> => 񷌙
B<category> => 񩢐
B<character class> => 񵙦
B<character strings> => 񹞆
B<chcp> => 񡒑
B<code point> => 񹞃
B<compile time> => 񳑢
B<copy> => 񨖅
B<cpan-mac> => 񰐐
B<csh> => 񸠉
B<d> => 񨒁
B<data paragraph> => 񲙇
B<ddd> => 񘜕
B<default locale> => 񩤇
B<default> => 򁍐
B<deprecated> => 񲤐
B<discouraged> => 񲤑
B<does not> => 񨤗
B<dprofpp> => 񙄢
B<dynamic> => 򀞉
B<dynamically> => 񨡣
B<emacs> => 񲕓
B<entire> => 񰒁
B<env> => 񶜂
B<escape sequences> => 񵙔
B<exactly> => 񩤡
B<example: C<$a E<lt>=E<gt> $b>> => 񲡲
B<except> => 񳤗
B<experimental> => 񲤉
B<failure> => 򀚙
B<filter_fetch_key> => 񘐱
B<filter_fetch_value> => 񘐲
B<filter_store_key> => 񘐩
B<filter_store_value> => 񘐰
B<find> => 񶥅
B<free-form> => 񷜳
B<global> => 񳉃
B<grep> => 񷌠
B<grouping> => 񵜁
B<gvim> => 񙄔
B<gzip> => 񱜓
B<h h> => 񘙥
B<h2ph> => 񤤗
B<h> => 񡈷
B<has> => 񩅄
B<i18n> => 񰄁
B<i> => 񘈓
B<iconv> => 񹤉
B<imode> => 񗕘
B<import> => 񠡠
B<initial> => 񰊙
B<installme> => 񰐡
B<int> => 񨞉
B<internal format> => 񹠀
B<internationalization> => 񩠴
B<is> => 񩀥
B<isn't going to help you> => 񡠵
B<its> => 񸕕
B<know> => 񹝂
B<ksh> => 򀝃
B<l10n> => 񰄂
B<l> => 񡉈
B<layers> => 񗕡
B<lazy> => 񷜷
B<less> => 񘡧
B<lex> => 񳤲
B<line> => 񲘑
B<locale> => 񩢑
B<localization> => 񩠶
B<long> => 񨞐
B<longest> => 񵠀
B<m> => 񘙅
B<make perl> => 񣄔
B<make> => 񣄕
B<man> => 񘤙
B<merely advisory> => 񤚁
B<metacharacters> => 񵙒
B<modifier> => 񵙱
B<more than one> => 񰉠
B<mostly> => 񰂅
B<much> => 񹐢
B<multipart/form-data> => 񣉷
B<must> => 񰂈
B<myprogram> => 񙀷
B<n> => 񘜥
B<need> => 񱥃
B<negated character class> => 񵚀
B<never> => 񷅙
B<new> => 򁎐
B<newline sequence> => 񲘒
B<next generation> => 񲊆
B<next> => 񘙕
B<no rule> => 񣕵
B<non-blank line> => 񲘔
B<not> => 򀠘
B<nroff> => 򀖘
B<numeric> => 񱜶
B<offset> => 񗔉
B<old> => 񴘀
B<only> => 񸠘
B<open> => 񥆅
B<optional> => 񷜴
B<ordinary paragraph> => 񲙀
B<outside> => 񷅗
B<p> => 񨑹
B<pairs> => 񠥱
B<perform> => 񩆉
B<perl -V:make> => 򁑢
B<perl -d scriptname> => 񘜠
B<perl> => 񶙉
B<perldoc> => 񡌷
B<piconv> => 񹤈
B<pod2fm> => 񲕡
B<pod2html> => 񲕘
B<pod2latex> => 񲕠
B<pod2man> => 񲤈
B<pod2text> => 񲕗
B<podchecker> => 񲕥
B<ptkdb> => 񘜔
B<ptype> => 񗕗
B<q> => 񡉗
B<quantifier> => 񵜤
B<r> => 񰡷
B<really> => 񲈂
B<recursion> => 񨍙
B<reference> => 񘙨
B<removed> => 񲤒
B<rep ps axu> => 񡠠
B<rsh> => 򀕵
B<s> => 񘜤
B<same task> => 񲈃
B<scripts> => 񹄲
B<sed -n> => 񶤹
B<sed> => 񸠄
B<sendmail> => 񳁠
B<sh> => 򀝂
B<single-step> => 񘚒
B<some_descriptive_name> => 񦘕
B<sort> => 񩤓
B<stash> => 񨀩
B<static> => 򀞇
B<statically> => 񨡢
B<stty> => 񣀃
B<subscripts> => 񵎑
B<suntar> => 񰐖
B<sure> => 񨑳
B<t> => 񶞗
B<tcsh> => 񩤙
B<threads> => 񨍠
B<top> => 񡠡
B<tr> => 񱐨
B<typemaps> => 򁅄
B<undefined> => 񷡀
B<undump> => 񶦆
B<untarzipme> => 񰐑
B<use strict> => 񘜘
B<use> => 񠡙
B<useful> => 񲆖
B<uses> => 񸕉
B<v> => 񘙐
B<verbatim paragraph> => 񲘱
B<very> => 񶡅
B<vi> => 񷊈
B<vim> => 񙄓
B<w> => 񩑳
B<want> => 񘅥
B<when> => 񰡄
B<whence> => 񗔐
B<will> => 񴂂
B<with the following exceptions> => 񷅓
B<without> => 񣑰
B<word anchor> => 񵚆
B<x> => 񘜢
B<xsubpp> => 򁕩
B<your> => 񸔰
B<yourname> => 񦘔
B<zsh> => 񩤗
B<|> => 񱜳
B<|h> => 񘙁
C<    > => 񘘈
C<   > => 񘖐
C< $) = "5 5" > => 򀂈
C< (?{$c = $c + 1;})> => 񶕸
C< (?{local $c = $c + 1;})> => 񶕷
C< chr(28) . "I<X>"> => 񱝠
C<!(...)> => 񷦀
C<!/REGEX/> => 񷥲
C<!17> => 񙁈
C<!=> => 񸠖
C<!> => 񷞉
C<!pattern> => 񘞃
C<!~> => 񶉱
C<""> => 򀕖
C<"#"> => 񷝰
C<"$!"> => 򀜅
C<"$+{I<name>}"> => 񴑱
C<"$1"> => 񳠶
C<"$AoA$b"> => 񡍓
C<"$ENV{HOME}/.perldbtty$$"> => 񙀱
C<"$break_condition\0$action"> => 񘔗
C<"$foo XXX '@arr'"> => 񱕡
C<"$foo"> => 񧈀
C<"$foo\Qbaz$bar"> => 񱔸
C<"$t X[$t] $t"> => 񥊔
C<"$x$x"> => 񶕑
C<"$x$y$y$x"> => 񶕒
C<"%o"> => 񦁠
C<"%vd"> => 򀌥
C<"(?"> => 񙈙
C<", stopped"> => 񤑁
C<"-S"> => 򀢒
C<"-e"> => 򀄠
C<"-foo"> => 񠒁
C<"-|"> => 񩙥
C<"."> => 񠉠
C<"./"> => 񱡤
C<"/i"> => 񳘦
C<"0 but true"> => 񦆓
C<"0".."9"> => 񥌱
C<"0"> => 񷄧
C<"0.99999999999999999999"> => 񰘐
C<"0644"> => 񤉅
C<"1"> => 񷄦
C<"1/16"> => 񘌀
C<"11" & "3"> => 񡤧
C<"12.34e-56"> => 񰘁
C<"1234"> => 񥐉
C<"12345678"> => 񥐐
C<"127.0.0.1"> => 񩚑
C<"20"> => 񶁄
C<"207.171.7.72"> => 񩚉
C<"3"> => 񡤡
C<"37"> => 񴞑
C<"4321"> => 񥐑
C<"8"> => 񴠀
C<"87654321"> => 񥐒
C<"9"> => 񳙃
C<";"> => 񙒅
C<"=begin :formatname" ... "=end :formatname"> => 񲐣
C<"=for :formatname"> => 񲐢
C<"> => 򀡢
C<"?"> => 񳦀
C<"A".."F"> => 񥌹
C<"A"> => 񥍩
C<"A-Z"> => 񥜈
C<"ADFS::HardDisk.$.File" ne 'ADFS::HardDisk.$.File'> => 񳈙
C<"Animal"> => 񗚈
C<"C"> => 񰂆
C<"C0"> => 񹘘
C<"CHECK"> => 񰌃
C<"CORE::builtin_name"> => 񷙳
C<"DEFAULT"> => 񩖇
C<"Died"> => 񤑉
C<"END"> => 񰊆
C<"Foo/Bar.pm"> => 񷚄
C<"Hello World"> => 񵢉
C<"IGNORE"> => 񩖘
C<"INIT"> => 񰌇
C<"Kilroy"> => 񦥘
C<"Mouse"> => 񗚉
C<"Mr. Ed"> => 񗝢
C<"Reversed += operator"> => 񩝠
C<"SEND"> => 񢤨
C<"STOP"> => 񢤩
C<"Scalar value @a[0] better written as $a[0]"> => 񩝅
C<"The third fish is a red one."> => 񢁔
C<"This is $owner's house"> => 񰅹
C<"This is ${owner}'s house"> => 񰆂
C<"U"> => 񠘆
C<"U0"> => 񹘗
C<"Use of uninitialized value"> => 񩝤
C<"Useless use of xxx in void context"> => 񩠇
C<"Warning: Something's wrong"> => 񦔕
C<"Z"> => 񥍱
C<"\0"> => 񱡥
C<"\000"> => 񥎂
C<"\001"> => 񴞙
C<"\012"> => 񱆖
C<"\0128"> => 񱅗
C<"\015"> => 񱆗
C<"\015\012"> => 񱆔
C<"\020\020" & "\101\101"> => 񡤴
C<"\0X\0\0YZ"> => 񥐹
C<"\1"> => 񳠡
C<"\128"> => 񱅓
C<"\B{"> => 񙒐
C<"\N{LATIN SMALL LIGATURE FF}" =~ /f+/i> => 񠅧
C<"\Q STRING \E"> => 񱕢
C<"\Q\\E"> => 񱕆
C<"\Q\t\E"> => 񱕘
C<"\\\$"> => 񱕨
C<"\\\\E"> => 񱕑
C<"\\\t"> => 񱕖
C<"\a"> => 񙆑
C<"\b"> => 񙒉
C<"\b{"> => 񙒆
C<"\c.letter."> => 񡑙
C<"\cM\cJ"> => 񱆕
C<"\c{"> => 񙒄
C<"\g1"> => 񴞉
C<"\n"> => 񶀆
C<"\n8"> => 񱅔
C<"\n\n"> => 򀕗
C<"\o"> => 񙉠
C<"\r"> => 񱆐
C<"\t"> => 񢀗
C<"\t...caught"> => 񦔑
C<"\t...propagated"> => 񤑄
C<"\x0D\x0A"> => 񴡰
C<"\x0b"> => 񴦉
C<"\x{178}"> => 񡒄
C<"\x{1}\x{14}\x{12c}\x{fa0}"> => 񘌳
C<"\x{7fffffff}"> => 񠉢
C<"^"> => 񳥹
C<"a".."f"> => 񥌸
C<"a"> => 񴍷
C<"ab"> => 񴍸
C<"abc  "> => 񶈲
C<"abc  def "> => 񶈳
C<"abc"> => 񴍶
C<"abc\n\n\n\ndef"> => 񢔴
C<"at foo line 123"> => 񤑂
C<"c"> => 񠘅
C<"d"> => 񳦂
C<"daytime"> => 񩚓
C<"foo"> => 񵐹
C<"foobar"> => 򀄒
C<"fred";> => 񘉧
C<"fred\n \nstuff\n\n"> => 񢔶
C<"fred\n\nstuff\n\n"> => 񢔷
C<"g"> => 񳠠
C<"hello"> => 񩄧
C<"housekeeper"> => 񵤘
C<"i"> => 񹉘
C<"isn't numeric"> => 񩝉
C<"like \"this\""> => 񢁲
C<"localhost"> => 񩚐
C<"main'foo"> => 񡠘
C<"main::foo"> => 񡠙
C<"matches null string many times in regex"> => 񴅦
C<"perl: "> => 򀄔
C<"perl: foobar (perl)"> => 򀄓
C<"pkg::fred"> => 񗡓
C<"puff"> => 񦙦
C<"rsh cat file |"> => 񥈦
C<"s"> => 񵄐
C<"span" .. "spat"> => 񱀩
C<"ss"> => 񵄒
C<"state"> => 񣝠
C<"surprise"> => 񤘡
C<"switch"> => 񤌰
C<"tcp"> => 񩜑
C<"that " . $foo> => 񡅢
C<"that $foo"> => 񡅡
C<"unphooey"> => 񷘨
C<"unsafe"> => 񩘵
C<"whoever"> => 񢁈
C<"whomever"> => 񢁉
C<"whomsoever"> => 񢁑
C<"whosoever"> => 񢁐
C<"www.perl.com"> => 񩚈
C<"x"> => 񥐵
C<"{"> => 񙒈
C<"|-"> => 񩙤
C<#!/usr/bin/perl> => 񶜧
C<#!> => 񳆉
C<#!perl> => 񡠹
C<#> => 򁎂
C<#[ \t]*> => 񴅱
C<#define PERL_NO_GET_CONTEXT> => 񨒒
C<#define warner Perl_warner_nocontext> => 񨒇
C<#define> => 򁕈
C<#ifdef> => 񸑄
C<#line> => 񠊕
C<$ @ * % &> => 񡎓
C<$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT> => 񳅂
C<$!=0;> => 񦄢
C<$!> => 򁄖
C<$!{ENOENT}> => 򀜓
C<$"> => 񱈉
C<$# is no longer supported> => 򀝕
C<$#+> => 򀑙
C<$#-> => 򀑘
C<$#> => 򀝔
C<$#ARGV> => 򀔔
C<$#array + 1> => 񩊕
C<$#array> => 򀝖
C<$#days> => 񘊒
C<$$> => 򀁡
C<$$aref[$i]> => 񡎗
C<$$aref[1]> => 񵐩
C<$$paren> => 񴙄
C<$$self> => 񗝡
C<$$x> => 񸤶
C<$%> => 񧝢
C<$&> => 򀑱
C<$'> => 򀑳
C<$(> => 򀂕
C<$(CCHOME)> => 񠀕
C<$)> => 򀂖
C<$* is no longer supported> => 򀝙
C<$*> => 򀝘
C<$+> => 񸤖
C<$+[0]> => 򀐡
C<$+[1]> => 򀐥
C<$+[2]> => 򀐧
C<$+[n]> => 񶄐
C<$+{NAME_PAT}> => 񴄵
C<$+{NAME}> => 񴄶
C<$+{foo}> => 򀐵
C<$,> => 񸝶
C<$-> => 񦔩
C<$-[0]> => 򀑡
C<$-[1]> => 򀑤
C<$-[2]> => 򀑦
C<$-[> => 򀑇
C<$-[n]> => 򀑖
C<$.> => 򀕣
C<$/ = ""> => 񤉗
C<$/ = undef> => 񤉘
C<$/> => 򀕩
C<$0> => 򀔗
C<$100> => 񘌖
C<$1> => 򀑵
C<$2> => 򀑷
C<$3> => 򀑹
C<$4> => 񶂙
C<$::> => 񸢗
C<$::a> => 񥤧
C<$::b> => 񥤨
C<$::sail> => 񰅶
C<$:> => 񸢖
C<$;> => 򀄰
C<$=> => 񣒔
C<$> => 򁈅
C<$? & 127> => 򀜧
C<$? & 128> => 򀜨
C<$?> => 򁄦
C<$@> => 򀝇
C<$A::B> => 񠜁
C<$ACCUMULATOR> => 񤜒
C<$AF_INET = 2> => 񩙹
C<$ARGV[0]> => 򀔕
C<$ARGV[1]> => 񧄓
C<$AUTOFLUSH> => 񧘉
C<$AUTOLOAD> => 񷜀
C<$AoA[$i]> => 񡐀
C<$AoA[2]> => 񰅔
C<$AoA[3][2]> => 񰅒
C<$Bin> => 񣉁
C<$CGI::CRLF> => 񣉘
C<$Config{'d_unlink_all_versions'}> => 򁀲
C<$Config{'osname'}> => 򀉈
C<$Config{archlib}/pod.idx> => 񡊑
C<$Config{archname}> => 񳄤
C<$Config{ccflags}> => 񠀅
C<$Config{d_link}> => 񸔆
C<$Config{d_lstat}> => 񳉤
C<$Config{d_setenv}> => 򁂄
C<$Config{gccversion}> => 񠀆
C<$Config{link}> => 񸔅
C<$Config{longlongsize}> => 񥎖
C<$Config{osname}> => 񳂕
C<$Config{privlib}> => 񹐔
C<$Config{sitelib}> => 񶡃
C<$Config{usesitecustomize}> => 񶡈
C<$Cosmos::Cosmos{stars}> => 񸙧
C<$Currency> => 񲝒
C<$DB::deep> => 񘔁
C<$DB::postponed{subname}> => 񘑹
C<$DB::signal> => 񠊓
C<$DB::single> => 񠊑
C<$DB::sub> => 񘒖
C<$DB::trace> => 񠊒
C<$DB_BTREE> => 񢉢
C<$DB_RECNO> => 񢔣
C<$DEBUG> => 񲌢
C<$Data::Dumper::Terse> => 񙙕
C<$ENV{$key} = $ENV{$key}> => 򁂓
C<$ENV{'PATH'}> => 񷆉
C<$ENV{'PERL_MBX_SIZE'} = 32767;> => 򀡲
C<$ENV{'System$Dir'} . 'Modules'> => 񳈧
C<$ENV{> => 򁁐
C<$ENV{BASH_ENV}> => 񠜡
C<$ENV{CDPATH}> => 񠜙
C<$ENV{DEFAULT}> => 򁂑
C<$ENV{ENV}> => 񠜠
C<$ENV{HOME}> => 񳁁
C<$ENV{IFS}> => 񠜘
C<$ENV{LOGDIR}> => 񧅶
C<$ENV{MACPERL}site_lib:> => 񰐧
C<$ENV{MACPERL}site_lib:Some:> => 񰐩
C<$ENV{PAGER}> => 񘤰
C<$ENV{PATH}> => 񷆈
C<$ENV{PERL5DB}> => 񘑡
C<$ENV{PERL5SHELL}> => 񷂉
C<$ENV{PERLDB_NOTTY}> => 񙀰
C<$ENV{PERLDB_OPTS}> => 񙀶
C<$ENV{PERL_DEBUG_MSTATS}> => 񘘠
C<$ENV{PERL_DL_NONLAZY}> => 񤖀
C<$ENV{PERL_UNICODE}> => 񹝉
C<$ENV{SHELL}> => 񘢅
C<$ENV{SYS$LOGIN}> => 񤈷
C<$ENV{TERM}> => 񳁀
C<$ENV{TZ}> => 񳁩
C<$ENV{USER}> => 񳁂
C<$ERRNO> => 񧜰
C<$EVAL_ERROR> => 񧁱
C<$EXIT> => 򀦕
C<$Ent::moot> => 񧒅
C<$FORCEX> => 򀦔
C<$FORMAT_FORMFEED> => 񣒙
C<$FORMAT_LINES_LEFT> => 񣒅
C<$FORMAT_LINES_PER_PAGE> => 񣒕
C<$FORMAT_NAME> => 񣒉
C<$FORMAT_PAGE_NUMBER> => 񣒓
C<$FORMAT_TOP_NAME> => 񣒑
C<$INNER::var> => 񰆇
C<$INPUT_LINE_NUMBER> => 񧉰
C<$INPUT_RECORD_SEPARATOR> => 񥘦
C<$ISA[0]> => 񗜣
C<$Is_Foo> => 񸐧
C<$LIST_SEPARATOR> => 񘍵
C<$MANPATH> => 񡜦
C<$MATCH> => 򀎃
C<$Module::VERSION> => 񦐒
C<$Module::errstr> => 񰑣
C<$NEGATIVE_INDICES> => 񸉗
C<$OSNAME> => 񢥱
C<$OS_ERROR> => 񧁀
C<$OUTER::INNER::var> => 񰆈
C<$OUTPUT_AUTOFLUSH> => 񣒗
C<$PERL_VERSION> => 񷊕
C<$PI> => 񰈹
C<$POSTMATCH> => 򀐈
C<$PREMATCH> => 򀀉
C<$Package::FOO> => 񰈴
C<$Package::Variable> => 񰅴
C<$REGERROR> => 񴈩
C<$REGMARK> => 񴈥
C<$SIGPRC> => 򀦓
C<$SIG{ALRM}> => 񩘡
C<$SIG{CHLD}> => 񩖕
C<$SIG{INT}> => 񙅉
C<$SIG{__DIE__}> => 򀚃
C<$SIG{__WARN__}> => 򀝉
C<$SIG{}> => 񰈁
C<$STR> => 񲈨
C<$SomePack::var> => 񥑲
C<$Some_Class::ClassData{CData1}> => 񸙔
C<$Storable::accept_future_minor> => 񙠗
C<$UTF8{Euro}> => 񲁙
C<$VERSION.> => 񠙉
C<$VERSION> => 򁔂
C<$VarNamesLikeThis> => 񷌁
C<$[> => 򀝦
C<$\ = $/> => 񶢔
C<$\> => 򀕨
C<$]> => 򀡁
C<$^> => 򀘖
C<$^A> => 򀖈
C<$^C = 1> => 򀅠
C<$^D = "st"> => 򀅥
C<$^D = 10> => 򀅤
C<$^E> => 򁄣
C<$^F> => 򀆁
C<$^H> => 򀈒
C<$^H{myint}> => 񳑨
C<$^H{regcomp}> => 񴘈
C<$^I> => 񢐁
C<$^L> => 񣒘
C<$^M> => 򀉀
C<$^N> => 񶖐
C<$^O ne 'VMS'> => 񳀷
C<$^O> => 򀡘
C<$^P> => 񠊔
C<$^R> => 񶖀
C<$^S> => 򀊕
C<$^T> => 򀀖
C<$^V> => 򀝰
C<$^W =0> => 񩝴
C<$^W> => 񹦐
C<$^X> => 򁍄
C<$^_> => 򀀀
C<$_ =~> => 񶌙
C<$_ E<lt> 10> => 񷥴
C<$_ ~~ $c> => 񷥶
C<$_ ~~ EXPR> => 񷥨
C<$_> => 򀔥
C<$_[0]> => 񷕔
C<$_[1]> => 񷍇
C<$`> => 򀑩
C<$a % $b> => 񰢓
C<$a += 2> => 񦜖
C<$a += 5> => 񸄶
C<$a // $b> => 񰦙
C<$a // /> => 񱊅
C<$a = $a + 2> => 񸆕
C<$a = $b + $c> => 񩆙
C<$a E<lt>=E<gt> $b> => 񲙸
C<$a++> => 񸄷
C<$a-E<gt>[3]> => 񡍩
C<$a///> => 񱊃
C<$a99a> => 񶂒
C<$a=10; $a.="6";> => 񩅙
C<$a> => 򀅇
C<$a[0][1] = 23> => 񵎓
C<$a[1]> => 񵎈
C<$a[1][2]> => 񵎕
C<$a[3]> => 񱈈
C<$a[5][5][5][5][5] = "quintet"> => 񦝔
C<$aref1> => 񵐳
C<$aref2> => 񵐲
C<$aref> => 񵐦
C<$aref[3]> => 񵍷
C<$arr> => 񱘙
C<$arr[$time]> => 񠤓
C<$arr[time]> => 񠤒
C<$array[$x]> => 񵊒
C<$array[0+$ref]> => 񡅔
C<$array[1]> => 񢅀
C<$arrayref[0]> => 񵊅
C<$b = "6XXXX"; $c = 2.3;> => 񨠵
C<$b+$c> => 񩅲
C<$b> => 򀅈
C<$bar> => 񰈩
C<$berbuf> => 񲁤
C<$bitmask> => 񤈈
C<$body> => 񹠃
C<$buf> => 񲀄
C<$c> => 񸅗
C<$cc> => 񸒙
C<$city> => 񵐖
C<$class> => 񗝥
C<$cnt> => 񴁒
C<$comment> => 򀦆
C<$count-1> => 񥌕
C<$count> => 񢢉
C<$country> => 񵐗
C<$count{'a'}++;> => 񶖗
C<$cp_1047> => 񡑅
C<$cp_posix_bc> => 񡑆
C<$data> => 񹝁
C<$datafile> => 񱞉
C<$days{'Feb'}> => 񘌤
C<$days{Feb}> => 񘌥
C<$debug> => 񲌥
C<$dest = "C:\U$name.$ext"> => 񩦕
C<$dir> => 򀦅
C<$either> => 񗞇
C<$env> => 񲂗
C<$f> => 񢡰
C<$fh> => 񢔨
C<$foo !~ /REGEX/> => 񷥳
C<$foo & 255> => 񰠡
C<$foo . (quotemeta("baz" . $bar))> => 񱔹
C<$foo =~ /REGEX/> => 񷥱
C<$foo ~~ $object> => 񸖐
C<$foo ~~ %$object> => 񸖑
C<$foo ~~ @$object> => 񸖒
C<$foo-> => 񲜄
C<$foo-E<gt>bar();> => 񲕉
C<$foo-E<gt>bar> => 񲜅
C<$foo> => 񰈧
C<$foo[&bar]> => 񠦀
C<$foo[0]> => 񠉸
C<$foo[1,2,3]> => 񠠶
C<$foo[1]> => 񘉐
C<$foo[1][2][3]> => 񠠷
C<$foo[2]> => 񠑩
C<$foo{&bar}> => 񠦃
C<$foo{bar}> => 񸥄
C<$fred> => 񰚇
C<$gcos> => 򀦇
C<$gid> => 򀦄
C<$glob> => 񙐰
C<$gotit> => 񷊙
C<$h-E<gt>{fred}> => 񡍰
C<$handle> => 񸌶
C<$hasargs> => 񤈃
C<$hashref{"KEY"}> => 񵊆
C<$hash{ 'foo' }> => 񢊂
C<$hash{$key}> => 񢉨
C<$hash{\"foo"}> => 񠈠
C<$hash{key}> => 񱜕
C<$him-E<gt>name("Jason")> => 񸜔
C<$hinthash> => 񤈉
C<$hints> => 񤈇
C<$horse> => 񗝘
C<$hour> => 񥀗
C<$href> => 񵎃
C<$href{'red'}> => 񵎄
C<$i> => 񰤉
C<$inner> => 򀍔
C<$ints[N]> => 񢈖
C<$is_ascii> => 񡑄
C<$is_blue{$some_color}> => 񢅖
C<$is_require> => 񤆓
C<$isdst> => 񥀨
C<$item> => 񵎁
C<$key> => 񢉱
C<$kwds =~ /\b($command\w*)/g> => 񶑰
C<$ld> => 񸔂
C<$length> => 񠑳
C<$link> => 񸔃
C<$logmessage> => 񩍤
C<$m> => 񠦇
C<$main'sail> => 񥑷
C<$main::a> => 񥤥
C<$main::b> => 񥤦
C<$main::sail> => 񰅷
C<$mday> => 񥀘
C<$mem> => 񱤢
C<$min> => 񥀖
C<$modifiers> => 񙐒
C<$mon> => 񥀙
C<$moot> => 񧒆
C<$myarray[-1]> => 񘎙
C<$myarray[-2]> => 񘐀
C<$m{$AoA,$b}> => 񡍑
C<$n> => 񶄈
C<$name> => 򀦂
C<$noise> => 񗝓
C<$num> => 񢂄
C<$ob = purge SomeModule> => 񰌷
C<$ob-E<gt>method()-E<gt>[3]> => 񡍱
C<$obj-E<gt>as_string()> => 񷌅
C<$obj> => 񸀲
C<$object> => 񢤶
C<$offset> => 񳁳
C<$one> => 񱥦
C<$outer> => 򀍘
C<$owner::s> => 񰆀
C<$pad_char> => 񢂆
C<$pad_len> => 񢂐
C<$paren > => 񴙅
C<$pattern> => 񶉶
C<$prio> => 񲂀
C<$ps> => 񱥵
C<$quota> => 򀦈
C<$r1> => 񢌢
C<$r> => 񰤐
C<$ready_to_print> => 񘈒
C<$ref> => 񣐄
C<$reg> => 񶑡
C<$regex> => 񢠄
C<$regexp = shift;> => 񵤅
C<$regexp> => 񶖃
C<$res = 4> => 񴁑
C<$result> => 񷅡
C<$s> => 񡀕
C<$scalar> => 񢄵
C<$sec> => 񥀕
C<$seed> => 񦀷
C<$self-E<gt>{ELEMSIZE}> => 񸊁
C<$self-E<gt>{LIST}> => 񸌡
C<$self> => 񸜈
C<$sentence> => 񥕙
C<$sm> => 񲁸
C<$some_pack::secret_version> => 񷑣
C<$str[0]> => 񲁲
C<$string =~ $pattern> => 񡘒
C<$string =~ /(abd|abc)(df|d|de)/;> => 񶁆
C<$string eq 'bert'> => 񵤦
C<$string> => 񹜥
C<$sv> => 񴕠
C<$t/$t> => 񠉴
C<$t> => 񠉳
C<$table{$country}> => 񵐕
C<$text> => 񢂔
C<$time =~ /(\d\d):(\d\d):(\d\d)/> => 񶁐
C<$tr> => 񡁡
C<$two> => 񱥨
C<$uid> => 򀦃
C<$user> => 񦊕
C<$var> => 򀑨
C<$var[SOMETHING]> => 񱘔
C<$var_names_like_this> => 񷌀
C<$vec> => 񢈠
C<$version{'2.0'}++> => 񘌨
C<$version{2.0}++> => 񘌦
C<$version{2}++> => 񘌧
C<$v{timep}=$arg> => 򁈖
C<$v{timep}> => 򁈙
C<$wday> => 񥀤
C<$who's> => 񘌢
C<$who::0> => 񘌡
C<$word> => 񶍦
C<$x & ($y == 0)> => 񠥄
C<$x .= ''> => 񲆑
C<$x ? $y     :  $z> => 񲜃
C<$x ? $y    :  $z> => 񲜂
C<$x eq "abc"> => 񷥵
C<$x++> => 񧑇
C<$x> => 񷑷
C<$x[1]> => 񥤰
C<$x[2]> => 񥤱
C<$x[2][3][5]> => 񵎖
C<$y> => 񶌶
C<$yday> => 񥀥
C<$year> => 񥀢
C<$z0> => 񶖑
C<$z1> => 񶖒
C<${"foo::!"}> => 񙑅
C<${$AoA[$i]}> => 񡎙
C<${$_[0]}> => 񰜲
C<${$a[1]}[2]> => 񵎔
C<${$aref}[1]> => 񵐰
C<${$aref}[3]> => 񵍴
C<${$blah}> => 񡍦
C<${$href}{red}> => 񵍵
C<${${$x[2]}[3]}[5]> => 񵎗
C<${*foo}> => 񵌂
C<${...}> => 񵌇
C<${1+"$@"}> => 񶥰
C<${1}000> => 񴍄
C<${\$foo}> => 񵌃
C<${^CHILD_ERROR_NATIVE}> => 񦒒
C<${^Foo}> => 񹦕
C<${^GLOBAL_PHASE}> => 򀆕
C<${^MATCH> => 񴙂
C<${^MATCH}> => 򀍹
C<${^POSTMATCH}> => 򀐂
C<${^PREMATCH}> => 򀎐
C<${^UNICODE}> => 򀀕
C<${^UTF8CACHE}> => 񠉥
C<${^_XYZ}> => 򀀅
C<${arr[$bar]}> => 񱘖
C<${foo([2])}> => 񠑰
C<${foo[2]}> => 񠑱
C<$|> => 򁄲
C<$~> => 񦔧
C<%!> => 򀜑
C<%$self> => 񸙡
C<%+> => 򀒉
C<%-> => 򀒈
C<%253E> => 񹑩
C<%32H> => 񠌹
C<%32u> => 񠍀
C<%3A> => 񣊖
C<%::> => 񰈙
C<%> => 򀖗
C<%B> => 񩥵
C<%C> => 񡥨
C<%Config> => 񸑷
C<%DB::dbline> => 񘔔
C<%DB::sub> => 񘒂
C<%E> => 񥥴
C<%ENV = ();> => 򁂕
C<%ENV> => 򁂔
C<%EXPORT_TAGS> => 񰕢
C<%File::Glob::> => 񠌩
C<%G> => 񥥶
C<%HASH> => 񡍠
C<%INC> => 򀈴
C<%Is> => 񸐨
C<%OUTER::INNER::> => 񰈠
C<%SIG> => 򀉱
C<%Seen> => 񢅉
C<%^H> => 򀈑
C<%a> => 񷖂
C<%b> => 񷖄
C<%d> => 񨕁
C<%e> => 񥥳
C<%f> => 񨕃
C<%foo:: = ()> => 񙐡
C<%foo::SIG> => 񙑄
C<%foo> => 񸁂
C<%g> => 񥥵
C<%gv> => 񨉡
C<%hash = ()> => 񤥁
C<%hash1> => 񢉇
C<%hash2> => 񢉆
C<%hash> => 񤥃
C<%href> => 񵎅
C<%ld> => 񨕂
C<%main::> => 񰈘
C<%name> => 񧝴
C<%new_hash> => 񢉄
C<%p> => 񨠇
C<%table> => 񵐡
C<%v> => 򁈓
C<%{$_[0]}> => 񰜴
C<%{...}> => 񠈉
C<%{EXPR}> => 񡁥
C<%{}> => 񙉳
C<& | ^ ~> => 񹁆
C<&#8734;> => 񲝂
C<&#x221E;> => 񲝃
C<&$f1($n)> => 񢡢
C<&$f2($n)> => 񢡣
C<&$subref()> => 񷎃
C<&&> => 񷌉
C<&> => 򁕖
C<&DB::sub> => 񘔄
C<&I<foo>;> => 񲖒
C<&Mytest2::TESTVAL> => 򁔘
C<&NAME> => 񴄰
C<&PL_sv_no> => 񧦀
C<&PL_sv_undef> => 񧦁
C<&PL_sv_yes> => 񧥹
C<&REAPER> => 񩘀
C<&SYS_getitimer> => 񣄃
C<&afterinit> => 񘔉
C<&amp;gt;> => 񹑨
C<&eacute;> => 񲔉
C<&foo> => 񢤔
C<&func> => 񤐁
C<&infested> => 񙁙
C<&infin;> => 񲝁
C<&len> => 񧡗
C<&lt;> => 񣉱
C<&name> => 񧝵
C<&open()> => 񷙔
C<&our()> => 񡅖
C<&whatever> => 񸜥
C<&{$_[0]}> => 񸜕
C<&{$subref}()> => 񷎄
C<&{$subref}> => 񷖕
C<' '> => 񥥐
C<'#'> => 񩑥
C<'$x'> => 񤖐
C<''> => 񷞑
C<'+'> => 񩑶
C<'-'> => 񵥔
C<'-Mmodule qw(foo bar)'> => 񶤩
C<'-|'> => 񥈒
C<'.'> => 񶀅
C<'/'> => 񵢔
C<'0'> => 񷞅
C<'> => 򀐃
C<'I'> => 񩑡
C<'IGNORE'> => 򀉵
C<'PerlPerlPerl'> => 񦒀
C<'T'> => 񶅤
C<'The big bad wolf jumped over...'> => 񥕠
C<'World '> => 񵢑
C<'X'> => 񶆀
C<'\ '> => 񶉣
C<'\'> => 񵢕
C<'\d+\.'> => 񶉘
C<'\d+\.\d+'> => 񶉖
C<'a'> => 񶘐
C<'a+'> => 񥅩
C<'ab'> => 񶁕
C<'b'> => 񩑷
C<'b12'> => 񲀷
C<'b16'> => 񲀴
C<'bar'> => 񷦗
C<'c'> => 񵤱
C<'cd'> => 񶁗
C<'ef'> => 񶁘
C<'foo'> => 񷦘
C<'gi'> => 񶁣
C<'i'> => 񵤶
C<'if () {} else {}'> => 񶔸
C<'if () {}'> => 񶔳
C<'j'> => 񶁡
C<'k'> => 񦂂
C<'m'> => 񶈒
C<'o W'> => 񵢈
C<'oW'> => 񵢐
C<'r'> => 񩑰
C<'r+'> => 񥅥
C<'t'> => 񩑸
C<'undef'> => 񠚉
C<'w'> => 񩑲
C<'w+'> => 񥅧
C<'|'> => 񵚑
C<'|-'> => 񥈑
C<( ... )> => 񳞕
C<($$)> => 񥤅
C<($1,$2,$3)> => 񶁑
C<($1,$2,...)> => 񵜑
C<($;@)> => 񸢐
C<($a) / (//)> => 񱊄
C<($r = $a - $i*$b)> => 񰤈
C<((()aaaaaaaaaaaaaaaaaa> => 񴅢
C<((-e $foo) .= "q")> => 񸤀
C<((?i)(&NAME))> => 񳥉
C<()*> => 񴅩
C<();> => 񶤗
C<()> => 񸖗
C<(*)> => 񰘒
C<(*:NAME)> => 񴈳
C<(*ACCEPT)> => 񴉢
C<(*COMMIT)> => 񴉆
C<(*F)> => 񶖖
C<(*FAIL)> => 񶖘
C<(*MARK)> => 񴈢
C<(*MARK:NAME)> => 񴈲
C<(*PRUNE)> => 񴉁
C<(*PRUNE:NAME)> => 񴆔
C<(*SKIP)> => 񴉅
C<(*SKIP:NAME)> => 񴈉
C<(*THEN)> => 񴉀
C<(*THEN:NAME)> => 񴈵
C<(*VERB)> => 񡄂
C<(*VERB:ARG)> => 񴅴
C<(-e ($foo .= "q"))> => 񸤁
C<(.)> => 񢀘
C<(.*?)> => 񠅩
C<(.+)+> => 񴅡
C<(...) xor (...)> => 񷦂
C<(...)> => 򁉹
C<(0x2, 0x1, 0x3, 0x0)> => 񦑱
C<(0x6, 0x3)> => 񦑰
C<(0|0x)\d*\s\g1\d*> => 񴌵
C<(1)> => 񱊘
C<(1, 10, 2)> => 񢈈
C<(1, 2, 10)> => 񢈇
C<(1, 2, 3)> => 񵎇
C<(1,),(,),3> => 񘎓
C<(1,),(3)> => 񘎐
C<(1,2,3)> => 񣕷
C<(4, 5, 6)> => 񵎉
C<(;$)> => 񙑔
C<(;*)> => 񙑕
C<(> => 񵁲
C<(?!)> => 񴉒
C<(?!123)> => 񴊐
C<(?!S)> => 񴐱
C<(?!foo)> => 񴀅
C<(?!pattern)> => 񳦙
C<(?!regexp)> => 񶔉
C<(?# comment )> => 񱘅
C<(?#...)> => 񱙃
C<(?#text)> => 񶒂
C<(?&NAME)> => 񴄲
C<(?&name)> => 񶕤
C<(?'NAME'...)> => 񠥶
C<(?'NAME'pattern)> => 񴀩
C<(?((?{...}))yes-regexp|no-regexp)> => 񶖂
C<(?(?{...})yes-regexp|no-regexp)> => 񶖁
C<(?(DEFINE)...|..)> => 񠘷
C<(?(condition)...)> => 񶕨
C<(?(condition)yes-pattern)> => 񴄥
C<(?(condition)yes-pattern|no-pattern)> => 񴐵
C<(?(condition)yes-regexp)> => 񶔲
C<(?(condition)yes-regexp|no-regexp)> => 񶔱
C<(?+1)> => 񴄕
C<(?+PARNO)> => 񴂕
C<(?-1)> => 񴄔
C<(?-PARNO)> => 񴂔
C<(?-d:...)> => 񳥨
C<(?-i)> => 񶒔
C<(?-p)> => 񳥦
C<(?...)> => 񶕡
C<(?0)> => 񶕣
C<(?1)> => 񢜄
C<(?: ... )> => 񳢙
C<(?:(o){2})?> => 񠅨
C<(?:)*> => 񴍗
C<(?:)> => 񴙧
C<(?:...)> => 񳖅
C<(?:pattern)> => 񳥱
C<(?:regexp)> => 񶄦
C<(?=(pattern))\g{-1}> => 񴅗
C<(?=S)> => 񴐨
C<(?=pattern)> => 񳦓
C<(?=regexp)> => 񶔈
C<(??{ EXPR })> => 񴐳
C<(??{ code })> => 񴄐
C<(??{...})> => 񦡸
C<(??{})> => 񴉠
C<(?DEFINE)> => 񢙁
C<(?E<lt>I<name>E<gt>...)> => 񴑥
C<(?PARNO)> => 񴐴
C<(?R)> => 񶕢
C<(?^...)> => 񳦄
C<(?^:eek)> => 񴙣
C<(?^aluimsx:pattern)> => 񳥴
C<(?^alupimsx)> => 񳥀
C<(?^i:hlagh)> => 񙈣
C<(?adluimsx-imsx)> => 񳥸
C<(?adluimsx-imsx:pattern)> => 񳥳
C<(?adlupimsx-imsx)> => 񳤹
C<(?char...)> => 񶒀
C<(?dl:...)> => 񳥩
C<(?group-ref)> => 񶕗
C<(?i)> => 񶒈
C<(?i-m:regexp)> => 񶒖
C<(?i-xsm:hlagh)> => 񙈢
C<(?m)> => 񶒉
C<(?s)> => 񶒐
C<(?s-i)> => 񶒕
C<(?x)> => 񶒑
C<(?{ ... })> => 񠙩
C<(?{ code })> => 򀒓
C<(?{ })> => 񰊒
C<(?{...})> => 򀐔
C<(?{0})> => 񴄳
C<(?{BLOCK})> => 񱘄
C<(?{code})> => 񶕦
C<(?{pos() = 5})> => 񥔐
C<(?{})> => 񴉔
C<(?|...)> => 񶄀
C<(?|pattern)> => 񳦅
C<(DEFINE)> => 񴄴
C<(R&name)> => 񶕉
C<(R)> => 񶕆
C<(R1)> => 񶕇
C<(R2)> => 񶕈
C<(SV *) 0> => 񧢄
C<(UV_MAX + 1)> => 񰤆
C<(X)PUSH[iunp]> => 񨍈
C<(X)PUSHmortal> => 񨍆
C<(X)PUSHs> => 񨍃
C<(\w+)> => 񶊈
C<(a+|b)+> => 񶔨
C<(a|b)*> => 񵕧
C<(char *host, time_t *timep)> => 򁍵
C<(char *host, time_t timep)> => 򁍧
C<(chomp $cwd) = `pwd`;> => 񤉣
C<(chr(0)> => 񡑐
C<(chr(1)> => 񡑒
C<(condition)> => 񴄩
C<(eval 34)> => 񘒅
C<(eval)> => 񤆘
C<(foo) ? 0 : 1> => 񠦒
C<(getpwuid($E<lt>))[7]> => 񧅸
C<(integer)> => 񶕃
C<(name && namlen == HEf_SVKEY)> => 񨁴
C<(re_eval 19)> => 񘒇
C<(some expression)> => 񥝆
C<(state $a) = foo();> => 񸘄
C<(time_t *timep, char *host)> => 򁍗
C<(unknown)> => 񤈂
C<)> => 񳤸
C<*$> => 񸖈
C<*$foo> => 񙐳
C<*$glob = \@some_array> => 񙐨
C<*$glob> => 񙐹
C<*$handle> => 񸌴
C<*$io_ref> => 񙙗
C<**> => 񸡁
C<*+{}> => 񴍔
C<*,> => 񠊗
C<*.cmd> => 񶜇
C<*2$> => 񥦄
C<*2$v> => 񥦂
C<*> => 򁕔
C<*?> => 񶑶
C<*AUTOLOAD = \&BaseClass::AUTOLOAD> => 񡄷
C<*COMMIT> => 񠅰
C<*FH> => 񢡴
C<*FOO = *Package::FOO> => 񰈵
C<*Foo::ISA = *Bar::ISA> => 񠈸
C<*Foo::ISA = \@Bar::ISA> => 񠈷
C<*HANDLE> => 񵉹
C<*HANDLE{IO}> => 񘐓
C<*OP> => 񨘒
C<*PUSH*> => 񨍐
C<*STDOUT> => 񸌲
C<*_nomg> => 񠁢
C<*a[i]> => 񡎔
C<*bar> => 񙑀
C<*cp> => 򁕒
C<*foo * foo()> => 񠑢
C<*foo * foo> => 񠑡
C<*foo = *bar> => 񰈱
C<*foo = \$bar> => 񰈦
C<*foo = undef> => 񡁴
C<*foo> => 񷕒
C<*foo{FILEHANDLE}> => 񵉴
C<*foo{IO}> => 񵉸
C<*foo{NAME}> => 񰉃
C<*foo{PACKAGE}> => 񰉂
C<*foo{SCALAR}> => 񵉷
C<*foo{THING}> => 񵉶
C<*glob> => 񵈉
C<*name> => 񰈡
C<*s = uv> => 񨖖
C<*s> => 񨖑
C<*x = \$y> => 񰈶
C<*{}> => 񙐸
C<+ - .> => 񸤆
C<++$x> => 񧑐
C<++> => 񷝐
C<+=> => 񷝒
C<+> => 򁈣
C<+?> => 񶑷
C<+{> => 񵉅
C<-"S"> => 򀢓
C<--> => 񷝑
C<--api-info> => 񨕖
C<--delete> => 񨙄
C<--global> => 򁐥
C<--skip-exporter> => 񰕁
C<--use-new-tests> => 񰕂
C<-0xHHH...> => 񶜶
C<-1> => 񴙀
C<-2**2> => 񢡀
C<-2> => 񴕀
C<-9> => 񱘘
C<-=> => 񷝓
C<-> => 񶤦
C<-A> => 򀤣
C<-Accflags=-DDL_UNLOAD_ALL_AT_EXIT> => 񨢕
C<-Accflags=-DPERL_MEM_LOG> => 񷄓
C<-Accflags=-DPL_OP_SLAB_ALLOC> => 񸔥
C<-B> => 򀢙
C<-C0> => 񶝢
C<-C6> => 񶝒
C<-C> => 򀤁
C<-CL> => 򀌖
C<-COE> => 񶝑
C<-CSDL> => 񶝘
C<-D> => 񸔕
C<-DDEBUGGING> => 񸔈
C<-DDEBUG_LEAKING_SCALARS> => 񨤵
C<-DPERL_DEBUG_READONLY_OPS> => 񨤸
C<-DPERL_EMERGENCY_SBRK> => 򀉂
C<-DPERL_GLOBAL_STRUCT> => 񨒕
C<-DPERL_GLOBAL_STRUCT_PRIVATE> => 񨝧
C<-DPERL_MEM_LOG> => 񨤩
C<-DPERL_MEM_LOG_NOIMPL> => 񨤰
C<-DPL_OP_SLAB_ALLOC> => 񨤷
C<-DSETUID_SCRIPTS_ARE_SECURE_NOW> => 񷈃
C<-DUSE_HASH_SEED_EXPLICIT> => 񷄁
C<-D_FORTIFY_SOURCE=2> => 񸔱
C<-Debug> => 񡞐
C<-Dgccansipedantic> => 񨡴
C<-Dm> => 񨤳
C<-Doptimize=-g3> => 񨠱
C<-Dstv> => 񩄐
C<-Dusecrosscompile> => 񸒁
C<-Dusemultiplicity> => 񡙔
C<-Dusethreads -Duseithreads> => 񡙓
C<-Dx> => 񨑠
C<-E> => 򀄘
C<-I/foo> => 񷆆
C<-I<X>> => 񦔷
C<-I> => 򁒃
C<-L> => 񡕅
C<-M> => 򀤆
C<-MPod::Perldoc::ToMan> => 񡌠
C<-MTk::SuperPod;Tk::Pod> => 񡉶
C<-Mlib=/foo> => 񷆅
C<-O> => 򀤕
C<-R> => 򀤖
C<-S> => 򀤈
C<-T> => 򀤐
C<-Ud_flock> => 񤚈
C<-W> => 򀤗
C<-Wall> => 񨡱
C<-Wdeclaration-after-statement> => 񨡹
C<-Wdeclaration-after-statements> => 񨠃
C<-Wendif-labels> => 񨡷
C<-Wextra> => 񨡸
C<-Wformat> => 񨠈
C<-Wpointer-arith> => 񨢀
C<-Wshadow> => 񨢁
C<-Wstrict-prototypes> => 񨢂
C<-Wtraditional> => 񨢃
C<-Wunitialized> => 񨝹
C<-X> => 򀤘
C<-Xa> => 񨢅
C<-]\^$> => 񵤹
C<-a> => 񦕥
C<-ansi -pedantic> => 񨡶
C<-ansi> => 񨡲
C<-b> => 򀢘
C<-c> => 򀤀
C<-d:-foo=bar> => 񙍉
C<-d:-foo> => 񙍆
C<-d:> => 񲉓
C<-d> => 򀤰
C<-e $file> => 񱢗
C<-e $foo .= "q"> => 񸢙
C<-e> => 򀤃
C<-exp($foo)> => 񤁒
C<-f "$file.bak"> => 񰥉
C<-f $file> => 񤂓
C<-f -w -x $file> => 񤂑
C<-f($file).".bak"> => 񰥈
C<-f> => 򀤄
C<-foo()> => 񠒂
C<-foo> => 񠑸
C<-fprofile-arcs -ftest-coverage> => 񨤉
C<-fstack-protector> => 񸔲
C<-g> => 򁐤
C<-help> => 񹠲
C<-i.bak> => 񠔷
C<-i> => 򀢑
C<-k> => 򀤥
C<-l> => 򀤦
C<-m> => 񦕡
C<-n> => 񸠅
C<-name> => 񰑠
C<-noprototypes> => 򁌗
C<-noversioncheck> => 򁌔
C<-o $filename> => 񧂐
C<-o> => 򀤙
C<-oI<formatname>> => 񡍅
C<-oLaTeX> => 񡉱
C<-oman> => 񡌕
C<-ortf> => 񡌘
C<-otext> => 񡌖
C<-otk> => 񡌗
C<-oxml> => 񡌙
C<-p> => 򀤧
C<-pedantic> => 񨡳
C<-pg> => 񨤄
C<-prototypes> => 򁌖
C<-r> => 򀤲
C<-s/a/b/> => 񤁑
C<-s> => 򀤇
C<-std1> => 񨢆
C<-std=c89> => 񨞁
C<-t> => 򀤉
C<-torture> => 񨜅
C<-u> => 򀤨
C<-utf16> => 񨜉
C<-utf8> => 񨜈
C<-v> => 񡌵
C<-versioncheck> => 򁌓
C<-w -U> => 񷅴
C<-w optionname:I<TRUE>> => 񡍆
C<-w optionname> => 񡊅
C<-w page_numbering> => 񡊇
C<-w textsize:15> => 񡊂
C<-w textsize:big> => 񡊄
C<-w textsize=15> => 񡊈
C<-w> => 򁁅
C<-wU> => 񷅳
C<-x $file && -w _ && -f _> => 񤂒
C<-x> => 򀤴
C<-xism> => 񙐓
C<-z> => 򀤑
C<-|> => 񳍩
C<.*2$> => 񥦑
C<.*> => 񶈈
C<.*?> => 񶈕
C<... && ...> => 񷦉
C<... // ...> => 񷦓
C<... and ...> => 񷦐
C<... or ...> => 񷦔
C<... || ...> => 񷦒
C<....> => 񠘸
C<...> => 񸠇
C<..._ent> => 񨄸
C<..> => 񷦇
C<./.../> => 򀡑
C<./Configure -S> => 񠚐
C<.=> => 񷝔
C<.> => 򀠳
C<.?> => 񶅴
C<.??> => 񶈠
C<.c.orig> => 񢐄
C<.c> => 񳈰
C<.gcov> => 񸑰
C<.git/info/grafts> => 񦙃
C<.h> => 񳈱
C<.o> => 񳈳
C<.pl> => 񡡅
C<.s> => 񳈲
C<.tar.gz> => 񰐷
C<.tgz> => 񰐶
C</$/> => 񴠧
C</$arr[0-9]/> => 񱘠
C</$foo[bar]/> => 񘍶
C</$length[2345]/> => 񠑲
C</$pat/> => 񱉂
C</$regexp/> => 񵤈
C</$variable/o> => 񥥉
C</${\$length[2345]}/> => 񠑶
C</${arr[0-9]}/> => 񱘗
C</${foo[bar]}/> => 񘍹
C</${foo}[bar]/> => 񘍷
C</${length[2345]}/> => 񠑵
C</((\w+)(?{ print $2 })){2}/> => 񠆑
C</(?!foo)bar/> => 񴀄
C</(?:(x)|(y)|(z))/> => 񴈧
C</(?:x(*MARK:x)|y(*MARK:y)|z(*MARK:z))/> => 񴈨
C</(?=(\S+))/g> => 񠆆
C</(?{...})/> => 񸙀
C</(Y) ( (X) \g3 \g1 )/x> => 񳠦
C</(\w+)/g> => 񶊉
C</*scope*/> => 򁈩
C</.+/> => 񷅥
C</.../> => 򀁔
C<//> => 񶡓
C<//a> => 񶑂
C<//aa> => 񵥧
C<//c> => 񶊐
C<//d> => 񶌉
C<//g> => 񶔤
C<//i> => 񶒄
C<//l> => 񶌐
C<//m> => 񶒅
C<//o> => 񶌈
C<//p> => 񶒓
C<//s> => 񶒆
C<//u> => 񶎒
C<//x> => 񶖓
C</> => 񳉀
C</GX/> => 񢞔
C</Oh s.*t./> => 񧔂
C</P/w> => 񸘔
C</PATTERN/> => 񥥈
C</PERL_ROOT/lib/2/3/4/5/6/7/8/> => 񳅠
C</RE/> => 񱖅
C</REGEX/> => 񷥰
C</STRING/msixpodual> => 񱉀
C</World/> => 񵢁
C</[A-Z0-9$_-]/> => 񳅃
C</[A-Za-z_0-9]/> => 񥕔
C</[H-K]/> => 񡑦
C</[[:alpha:]]/> => 񹜐
C</[\R]/> => 񴡳
C</[\W\d_]/> => 񢙘
C</[^\W\d_]/> => 񢙗
C</[a-zA-Z]/> => 񢙓
C</[a-z]/> => 񹜅
C</[yY][eE][sS]/;> => 񵤴
C</\313/> => 񡑴
C</\364/> => 񡑵
C</\A(?:(?:)foo|bar|zot)\z/> => 񠆄
C</\A/> => 񴠗
C</\G.../gc> => 񱌦
C</\Quser\E\@\Qhost/> => 񱈥
C</\Z/> => 񴠨
C</\\/> => 񴙷
C</\b\w*\b/> => 񡘄
C</\bfoo\b/> => 񦂃
C</\g137/> => 񴞒
C</\pLl/> => 񵀧
C</\pN/> => 񵀙
C</\p{General_Category=Lowercase_Letter}/> => 񵀦
C</\p{Ll}/> => 񵀤
C</\p{Lowercase_Letter}/> => 񵀥
C</\p{Number=True}/> => 񵀡
C</\p{Number}/> => 񵀠
C</\s+/> => 񶔓
C</\w+(?=\t)/> => 񳦗
C</\w+/> => 񷅤
C</^$/> => 񴊔
C</^${addr_spec}$/> => 񣌦
C</^/> => 񴠖
C</^/m> => 񱙠
C</^/s> => 񴔧
C</^[I#]?[rwa]\+?[bt]?$/> => 񩑠
C</^[_A-Za-z][_A-Za-z0-9]*\z/> => 񴀱
C</^[a-zA-Z]*[0-9]*\z/> => 񰡅
C</a> => 񹌘
C</a?.../> => 񶅃
C</aai> => 񳙰
C</ab/> => 񴊕
C</abc(?=(?:xyz){3})/> => 񠥤
C</abc(?=xyz){3}/> => 񠥥
C</aia> => 񳙱
C</alpha(.*?)omega/> => 񢀰
C</bin/sh -c> => 񦆘
C</bin/sh> => 񱎄
C</c> => 񱐦
C</d> => 񳚕
C</e> => 񴍂
C</ee> => 񧔸
C</el> => 񠚙
C</foo(?!bar)/> => 񴀃
C</foo(?:\w+|\d+|\s+)bar/> => 񵑡
C</foo+/> => 񵕑
C</foo/> => 񵕃
C</foo/bar> => 񠔲
C</g> => 񴠷
C</i> => 񹌹
C</imsxadlup> => 񳕢
C</l> => 񳚒
C</le> => 񱍰
C</m> => 򀝡
C</ms> => 񳔷
C</my/perl_directory> => 񰎖
C</o> => 񵔈
C</p> => 򀐉
C</pat/ /pat/> => 񸝹
C</path/to/script.pl> => 񩉷
C</r> => 񱐐
C</regex/> => 񵜐
C</regex/gc> => 񵝅
C</regexp/> => 񶉨
C</regexp/gc> => 񶊑
C</s> => 򀝠
C</u> => 񳚆
C</usr/local/lib/perl5/pod> => 񡜩
C</w> => 񸘓
C</x(?:foo)y/> => 񵔧
C</x(?:foo*|b[a][rR])(foo|bar)$/> => 񵕙
C</x([^x]*)x/> => 񢀩
C</x/> => 񸤥
C</x> => 񷌆
C</yes/i;> => 񵤵
C<0 but true> => 񥞖
C<0+$arg> => 񡤳
C<0+> => 񱜸
C<0,0> => 񥠤
C<0..11> => 񥀠
C<0..364> => 񥀦
C<0..365> => 񥀧
C<0..9> => 񢈅
C<00000011> => 񡤤
C<00110011> => 񡤢
C<0022> => 񦌠
C<0027> => 񦌣
C<00dddd> => 񸘵
C<0123456789> => 񱤰
C<022> => 񦌳
C<027> => 񦌴
C<0640> => 񦌨
C<0644> => 񦅕
C<0666 & ~027> => 񱡙
C<0666 &~ 027> => 񦌧
C<0666> => 񦌩
C<0750> => 񦌔
C<0755> => 񦌡
C<0777> => 񦌱
C<077> => 񦌵
C<0> => 񷝇
C<0B...> => 񙊅
C<0X...> => 񙊄
C<0[0]> => 񘘆
C<0b...> => 񙊇
C<0b> => 񥅆
C<0oddddd> => 񸘶
C<0x...> => 񙊆
C<0x00 0x00 0xFE 0xFF> => 񹌉
C<0x0000> => 񹕔
C<0x0041> => 񹔰
C<0x00C0> => 񹜁
C<0x00C1> => 񹜀
C<0x01> => 񦑡
C<0x02> => 񦑢
C<0x04> => 񦑣
C<0x08> => 񦑤
C<0x10000> => 񹕙
C<0x100> => 񹘧
C<0x10> => 񦑥
C<0x10FFFF> => 񹕗
C<0x20> => 񱤥
C<0x40> => 񱤣
C<0x5A> => 񱤤
C<0x80> => 񦑨
C<0x8179828> => 񩅨
C<0x> => 񹝑
C<0xC8> => 񨕠
C<0xEF 0xBB 0xBF> => 񹌄
C<0xFE 0xFF> => 񹌂
C<0xFF 0xFE 0x00 0x00> => 񹌐
C<0xFF 0xFE> => 񹌆
C<0xFF> => 񹖖
C<0xFFFF> => 񹕘
C<0xa041450> => 񩄰
C<0xa0484e0> => 񩄱
C<0xa04ecbc> => 񩄩
C<0xa==10> => 񥍂
C<0xddddd> => 񸘷
C<0|0x> => 񴌶
C<1,,,3> => 񘎒
C<1,,3> => 񘎉
C<1,3> => 񘎔
C<1,> => 񘎇
C<1.1> => 񹆗
C<1.4142135623731> => 񱝄
C<10111111> => 񨕧
C<10> => 񷑠
C<11 & 3> => 񡤥
C<1100> => 񰘃
C<1101010010001...> => 񶖈
C<11> => 񢝐
C<123> => 񷐸
C<125> => 񦖅
C<128> => 񘘦
C<12:> => 񘘂
C<12[1]> => 񘘃
C<14:> => 񘘄
C<16> => 񙊉
C<1: ANYOF[bc]> => 񘘀
C<1:> => 񘖙
C<1;> => 񥙹
C<1> => 񸍧
C<1[4]> => 񘖘
C<2 + 20 == 22> => 񰠅
C<2 + 4 * 5> => 񰠃
C<2$> => 񥥸
C<2**3**2> => 񢡁
C<2.18 .. 3.14> => 񱀲
C<20> => 񷑙
C<22> => 񢝘
C<24 * 7> => 񧈇
C<2> => 񸍰
C<2E<gt>E<gt>file> => 򀢈
C<2E<gt>file> => 򀢆
C<3 + 4> => 񩀩
C<3 4 5 6> => 񨍳
C<3*@buffer> => 񲅖
C<3> => 񡤦
C<4 * 5> => 񰠄
C<4 - 2 == 2> => 񰠐
C<4.0> => 񹆓
C<44> => 񳌖
C<47> => 񘁄
C<4F> => 񵀒
C<5.8.1> => 񹑦
C<5[1]> => 񘘁
C<6 * 5 == 30> => 񰠆
C<644> => 񥅈
C<65.66.67> => 񘍂
C<6> => 񨡘
C<8 - 2 == 6> => 񰠑
C<8 - 4 - 2> => 񰠈
C<8 - 4> => 񰠉
C<8> => 񠅳
C<9> => 񥕴
C<: => => 񙑥
C<:...> => 񤅆
C<:0300300002337A1E> => 񲄘
C<:::> => 񴉄
C<::> => 򁎄
C<:=> => 񡄤
C<:> => 򁀉
C<:LOCAL> => 񙡲
C<:]> => 񵅅
C<:bytes> => 񤅃
C<:crlf:bytes> => 񷁉
C<:crlf> => 񹊅
C<:encoding('UTF-8')> => 񹌒
C<:encoding()> => 񹘷
C<:encoding(...)> => 񹙔
C<:encoding(UTF-8)> => 񹔀
C<:encoding(utf-8)> => 񹘲
C<:encoding(utf8)> => 񷁳
C<:encoding> => 񹙳
C<:locale> => 񹙉
C<:opd> => 񶠓
C<:perlio:bytes> => 񷁐
C<:perlio> => 񷁀
C<:pop> => 񠅤
C<:raw> => 񷁡
C<:screen> => 񢦓
C<:shared> => 񸄥
C<:stdio> => 񷁥
C<:unique> => 񸕵
C<:unix:crlf> => 񷁂
C<:unix:perlio> => 񷁁
C<:unix> => 񷁖
C<:utf8> => 񹙲
C<;> => 򁈢
C<;{ ... }> => 񘡵
C<<           thing     >> => 񲖙
C<< "a $b -> {c}" >> => 񰞐
C<< "ook" =~ qr/eek/ >> => 񴑳
C<< # >> => 񷜱
C<< $1 >> => 񳒀
C<< $< >> => 񹥰
C<< $> >> => 񹥱
C<< $@ = eval { $@->PROPAGATE(__FILE__, __LINE__) }; >> => 񣔑
C<< $ENV{PERL_DEBUG_MSTATS} >= 1 >> => 񘑑
C<< $[ == 0 and $#a >= $i >> => 񣕣
C<< $^D & (1<<30) >> => 񘑆
C<< $a <=> $b >> => 񲍇
C<< $a <=> $b >>> => 񲘁
C<< $a E<lt>=E<gt> $b >> => 񲍐
C<< $a E<lt>=E<gt> $b >>> => 񲘂
C<< $a[0]->[1] = 23 >> => 񵍉
C<< $a[0]->[1] >> => 񵍆
C<< $a[1]->[2] >> => 񵍈
C<< $a[ROW]->[COLUMN] >> => 񵍇
C<< $aref->[3] >> => 񵍁
C<< $aref1->[23] >> => 񵍐
C<< $aref2->[23] >> => 񵍑
C<< $array->[$x] >> => 񵆙
C<< $array[$x]->{"foo"} >> => 񵈀
C<< $arrayref->[2][1] >> => 񵆘
C<< $bad->name >> => 񗘖
C<< $bad->{Color} >> => 񗘕
C<< $bad->{Name} >> => 񗘔
C<< $class->sound >> => 񗘇
C<< $foo->bar >> => 񲘄
C<< $foo->bar(); >> => 񲍒
C<< $formatter->textsize(15) >> => 񡆘
C<< $href->{'red'} >> => 񵍂
C<< $href->{key}[0] >> => 񰞀
C<< $href->{red} >> => 񵍀
C<< $obj->bar() >> => 񠐩
C<< $obj->meth >> => 񰞁
C<< $obj->new() >> => 񰙉
C<< $object->attribute() >> => 񸙂
C<< $op->name >> => 񧠶
C<< $read = <STDIN>; >> => 񲤤
C<< $rec->{NAME} >> => 񸙲
C<< $ref->{"A"} >> => 񣔗
C<< $ref->{"A"}->{"B"} >> => 񣔘
C<< $self->{ __PACKAGE__ . "_ObData1" } >> => 񸙄
C<< $self->{ObData1} >> => 񸙃
C<< $semaphore->down(0) >> => 񸂁
C<< $semaphore->down(1) >> => 񸂂
C<< $subref->() >> => 񷌦
C<< $thing->stuff(I<dodad>) >> => 񲖔
C<< $tied->() >> => 񙅤
C<< %$ref->{"hello"} >> => 񠐱
C<< %foo->{"bar"} >> => 񠐰
C<< &(perlio->next) >> => 񩎂
C<< '$line = <STDIN>' >> => 񢠗
C<< '+<' >> => 񣔨
C<< '+>' >> => 񣔩
C<< '<&=X' >> => 񣕀
C<< '<' >> => 񱝴
C<< '<-' >> => 񣔱
C<< '>&' >> => 񣔳
C<< '>' >> => 񱝵
C<< '>-' >> => 񣔲
C<< '>>' >> => 񱝶
C<< '|' >> => 񱝷
C<< ('name') >> => 񵡐
C<< ((?>a*)|(?>b*))ar >> => 񳒘
C<< (<name>) >> => 񵡉
C<< (?&NAME) >> => 񳔖
C<< (?'name'...) >> => 񵠸
C<< (?((?<=AA))G|C) >> => 񵡒
C<< (?(?<=AA)G|C) >> => 񵡑
C<< (?(DEFINE)(?<name>pattern)...) >> => 񵡓
C<< (?<!fixed-regexp) >> => 񵡄
C<< (?<=(ab)*) >> => 񵡃
C<< (?<=(ab|bc)) >> => 񵡂
C<< (?<=...) >> => 񳒁
C<< (?<=fixed-regexp) >> => 񵡁
C<< (?<=regexp) >> => 񵡀
C<< (?<NAME>) >> => 񳒉
C<< (?<NAME>...) >> => 񠐗
C<< (?<NAME>pattern) >> => 񳔒
C<< (?<name>...) >> => 񵠷
C<< (?> [^()]+ ) >> => 񳔂
C<< (?>...) >> => 񳔁
C<< (?>S) >> => 񳔐
C<< (?>[^()]+) >> => 񵡈
C<< (?>\x0D\x0A)|\v) >> => 񴙴
C<< (?>a*) >> => 񵡇
C<< (?>pattern) >> => 񳔅
C<< (?>pattern) >>> => 񳔈
C<< (?>regexp) >> => 񵡅
C<< (?P=NAME) >> => 񳔓
C<< (?P>NAME) >> => 񳔕
C<< (?PE<lt>NAMEE<gt>pattern) >> => 񳔑
C<< (?{...}) >> => 񙅠
C<< (EXPR & 0700) > 0 >> => 񣕥
C<< +< >> => 񣔹
C<< +> >> => 񣔷
C<< -> >> => 񵍃
C<< ->import >> => 񙅴
C<< ->maketext >> => 񙅗
C<< ->offs[0].start/end >> => 񴒃
C<< ->offs[num].end >> => 񴒂
C<< ->offs[num].start >> => 񴒁
C<< ->offs[paren].end >> => 񴒄
C<< 0 <= rand($x) < $x >> => 񡡴
C<< 1 << 32 >> => 񰝤
C<< 12: EXACT <d> >> => 񘑉
C<< 14: CURLYX[0] {1,32767} >> => 񘑐
C<< 2>&1 >> => 򀝵
C<< < >> => 񸝗
C<< <$foo> >> => 񰞖
C<< <$foo[0]> >> => 񙅰
C<< <$hash{key}> >> => 񰞔
C<< <$x > >> => 񰞕
C<< <$x> >> => 񰞓
C<< <${foo}> >> => 񰞗
C<< <& >> => 񠐦
C<< <*.c> >> => 񣔡
C<< <*> >> => 񷌨
C<< << >> => 񰞅
C<< <=> >> => 񣕡
C<< <> >> => 񹥷
C<< <> >>> => 񲤨
C<< <><b><><a><><r><> >> => 񳔉
C<< <ARGV> >> => 񱝳
C<< <EXPR> >> => 񷜩
C<< <FH> >> => 񹥣
C<< <FILE> >> => 񣕙
C<< <FILEHANDLE> >> => 񷌩
C<< <Foo$Dir>.Bar >> => 񲤩
C<< <GWFILE> >> => 񢌴
C<< <IMG SRC="yellow_sign.gif" ALT="Under Construction"> >> => 񲤗
C<< <PIPE> >> => 񹥹
C<< <System$Dir>.Modules >> => 񲤧
C<< <[^<>]+\$[^<>]> >> => 񲤰
C<< <bdfoy@cpan.org> >> => 񡙸
C<< <br/> >> => 񢘀
C<< <commit> >> => 񳔆
C<< <expr> >> => 񙅧
C<< <file*glob> >> => 񰞉
C<< <filehandle> >> => 񰞒
C<< <jwz@netscape.com> >> => 񢥧
C<< <number>[m][s][t] >> => 񶙈
C<< <perlfaq-workers AT perl DOT org> >> => 񡙷
C<< <x> >> => 񵡕
C<< <y> >> => 񵡖
C<< ==> >> => 񘝂
C<< => >> => 񰝸
C<< > >> => 񲤲
C<< > foo >> => 񲤳
C<< >& >> => 񠐧
C<< @$a > 3 >> => 񙅢
C<< @$ref->[99] >> => 񠐳
C<< @foo->[23] >> => 񠐲
C<< @{ $rec->{PEERS} } >> => 񸙳
C<< @{"_< ..."} >> => 񙅲
C<< Animal->sound >> => 񗘈
C<< Animal->speak >> => 񗘆
C<< CLASS->new() >> => 񰙈
C<< Class->method >> => 񗖘
C<< Cow->sound >> => 񗘃
C<< Cow->speak >> => 񗘁
C<< Devel::foo->unimport("bar") >> => 񙅒
C<< Devel::foo->unimport() >> => 񙅑
C<< E<lt>E<gt> >> => 񦙔
C<< E<lt>FHE<gt> >> => 񦙕
C<< Employee->debug() >> => 񸙴
C<< Employee->new() >> => 񸙶
C<< File::Spec->case_tolerant >> => 򀝴
C<< Foo->bar() >> => 񠐨
C<< Guru->find("Samy") >> => 񢠘
C<< HANDLE->input_line_number(EXPR) >> => 񹥸
C<< Horse->speak >> => 񗘓
C<< I<Your_OS>::Process >> => 񩖀
C<< IO::Socket::INET->new() >> => 񩖂
C<< Mouse->sound >> => 񗘉
C<< Mouse->speak >> => 񗘄
C<< N > 1 >> => 񣔐
C<< PeerPort => 8080 >> => 񩖁
C<< Person->new() >> => 񸙵
C<< Tie::Hash->TIEHASH() >> => 񙅘
C<< [^<>]++ >> => 񢘁
C<< \g{NAME} >> => 񳔔
C<< \k'NAME' >> => 񳒈
C<< \k<NAME> >> => 񳒑
C<< \k<name> >> => 񴙳
C<< ^(?>a*)ab >> => 񳒕
C<< a >> => 񳑸
C<< b >> => 񳑹
C<< decimal string --> native integer >> => 񰖘
C<< decimal_string --> native_floating_point --> native_integer >> => 񰖙
C<< foo($a < $b) >> => 񙅔
C<< foo($a) < $b >> => 񙅓
C<< m/foo/s and $bar >> => 񙅖
C<< m/foo/sand $bar >> => 񙅕
C<< my $x = 3; $x = length(undef) >> => 񙅡
C<< my_function()->[0] >> => 񷌧
C<< n <x> <y> >>> => 񵡔
C<< native floating point --> native integer >> => 񰖗
C<< o->op_ppaddr >> => 񧠵
C<< open $fh, ">", \$output >> => 񣔙
C<< open($fh, ">", \$buffer) >> => 񙅥
C<< open($fh, ">", \*glob) >> => 񙅙
C<< open(A, '>>&=B') >> => 񣕂
C<< open(A, '>>&B') >> => 񣕁
C<< qr//->isa("Regexp") >> => 񴒀
C<< require <file> >> => 񠐙
C<< return foo(...) >> => 񸐒
C<< rx->extflags >> => 񴑸
C<< rx->offs >> => 񴑹
C<< s/<.*?>//g >> => 񣉓
C<< s<foo>/bar/ >> => 񰞂
C<< thing >> => 񲖘
C<< threads->create() >> => 򁄷
C<< tr/ !#%&'()*;<=>?// >> => 񲤥
C<< tr/#%*<>?// >> => 񲤦
C<< use re Debug => 'PARSE' >> => 񵑐
C<< while (<>) >> => 񣔖
C<< while (<>) >>> => 񵠶
C<< |  1:  STAR >>> => 񵡗
C<<<   thing >>> => 񲘀
C<<< $? >> => 񹦀
C<<< $a <=> $b >>> => 񲍈
C<<< '>>' >>> => 񣔥
C<<< +>> >>> => 񣔸
C<<< >> >>> => 񸝘
C<<< open(FH, '>>filename') >>> => 񲤴
C<<< open(X, ">>thing.dat") || die $! >>> => 񲖖
C<<<<  $a <=> $b     >>>> => 񲍉
C<===E<gt>> => 񨍲
C<==> => 񸠕
C<=> => 򁎀
C<=E<gt>> => 񰑢
C<=back> => 񲤂
C<=begin I<formatname>> => 񲖇
C<=begin> => 񢥕
C<=cut> => 򁍸
C<=encoding I<encodingname>> => 񲖑
C<=encoding> => 񲐱
C<=end I<formatname>> => 񲖈
C<=end> => 񢥗
C<=for I<formatname> I<text...>> => 񲖉
C<=head1 I<Heading Text>> => 񲖀
C<=head1> => 񲢀
C<=head2 For Loops> => 񲑹
C<=head2 I<Heading Text>> => 񲖁
C<=head2> => 񲢃
C<=head3 I<Heading Text>> => 񲖂
C<=head4 I<Heading Text>> => 񲖃
C<=item $.> => 񲑶
C<=item I<stuff...>> => 񲖆
C<=item> => 񸐱
C<=items> => 񸑗
C<=over I<indentlevel>> => 񲖄
C<=over> => 񲤀
C<=pod> => 񲐁
C<=value> => 񘡰
C<=~> => 򀀱
C<?-xism> => 񙈦
C<?:> => 񷅠
C<?> => 񶆐
C<??> => 񸡘
C<???> => 񢄧
C<?PATTERN?> => 񱌵
C<?RE?> => 񱖄
C<?\w?> => 񡅆
C<?foo?> => 񱘲
C<?pattern?> => 񵞑
C<?x?> => 񸤤
C<?{}> => 񶕵
C<@$aref> => 񵐧
C<@*> => 񱈑
C<@+> => 򀑠
C<@-> => 򀐰
C<@> => 򁈆
C<@ARGV> => 򀔢
C<@ARRAY> => 񡍙
C<@Class::ISA> => 񗜴
C<@Cow::ISA> => 񗙇
C<@DB::args> => 񤈰
C<@DB::dbline> => 񘔒
C<@EXPORT> => 򁔣
C<@EXPORT_FAIL> => 񙕇
C<@EXPORT_OK> => 򁔤
C<@F> => 򀆄
C<@Fields> => 񷕰
C<@Foo::ISA> => 񠉀
C<@Horse::ISA> => 񗝔
C<@INC> => 򁒐
C<@ISA> => 򁒖
C<@_> => 򀁆
C<@a = reverse @a> => 񥜢
C<@a> => 񷖁
C<@addrs> => 񤠃
C<@animals> => 񢖂
C<@aref> => 񵎀
C<@array> => 񵍰
C<@array[1,4,3,0]> => 񢅂
C<@array[1]> => 񢅃
C<@b> => 񷖃
C<@bar> => 񰈳
C<@compiled> => 񶑧
C<@dates> => 񲁳
C<@files> => 񦂐
C<@foo> => 񷘷
C<@foo[&bar]> => 񠦁
C<@foo{&bar}> => 񠦄
C<@gv> => 񨉠
C<@ints> => 񢈡
C<@item> => 񵎂
C<@name> => 񧝳
C<@orbits{keys %orbits}> => 񢆆
C<@program> => 񶜔
C<@words> => 񦂑
C<@{$AoA[$i]}> => 񡎒
C<@{$_[0]}> => 񰜳
C<@{$aref}> => 񵐨
C<@{$blah[$i]}> => 񡍨
C<@{$blah}> => 񡍧
C<@{$table{$country}}> => 񵐃
C<@{*}> => 񱈒
C<@{...}> => 񵌆
C<@{EXPR}> => 񡁤
C<@{[ (some expression) ]}> => 񥝅
C<@{[ system "rm -rf /" ]}> => 񢄥
C<@{foo()}> => 񠑦
C<@{foo}> => 񠑣
C<@{}> => 񙉲
C<A (*PRUNE) B> => 񴆗
C<A + COMBINING RING> => 񶐡
C<A'> => 񴎗
C<A'B'> => 񴎕
C<A*> => 񲂆
C<A*A*Z*> => 񲄀
C<A-Z> => 񤥸
C<A-Za-z> => 񩠳
C<A10> => 񱤹
C<A12> => 񱥡
C<A27> => 񱥁
C<A4> => 񲂉
C<A> => 񶐢
C<AAG> => 񶕔
C<AB'> => 񴎙
C<AB> => 񴎘
C<ABDAY_1> => 񩥹
C<ABDAY_7> => 񩦀
C<ABMON_12> => 񩦆
C<ABMON_1> => 񩦅
C<ADDOP> => 񩈣
C<AIX> => 񠔁
C<ALERT> => 񙆃
C<ALTERNATE_SHEBANG> => 񶜉
C<APPROX> => 񘘢
C<ARG()> => 񵒖
C<ARG1()> => 񵒗
C<ARG2()> => 񵒘
C<ARGV::readonly> => 񱜐
C<ARGV> => 򀕇
C<ARG_SET()> => 񵒙
C<ARRAY> => 񵐶
C<ASCII DIGIT EIGHT> => 񳘠
C<ASSIGNOP> => 񩈂
C<ATCGTTGAAT...> => 񶌂
C<AUTHORS> => 񠎄
C<AUTOLOAD()> => 񸁘
C<AUTOLOAD> => 򀅙
C<AUTOMATED_TESTING> => 񣆀
C<AV *> => 򁆄
C<AV* save_ary(GV *gv)> => 񨉗
C<AV*> => 񧦓
C<AV> => 񸕇
C<Age> => 񹆙
C<Algorithm::Loops> => 񢈀
C<Algorithm::Permute> => 񢆗
C<Alias> => 񨊂
C<Alzabo> => 񣆕
C<Ambulation::legs> => 񙁠
C<Animal::name> => 񗞒
C<Animal::named> => 񗠅
C<Animal::speak($class)> => 񗚓
C<Animal::speak> => 񗞃
C<Animal> => 񗠇
C<Apache::DProf> => 񲉈
C<Apache::SmallProf> => 񲉩
C<Archive::Tar> => 񙥦
C<Argument list too long> => 񢑨
C<Array::Iterator::Circular> => 񢅹
C<AtExit> => 񣂔
C<Athens> => 񵐢
C<Attribute::Handlers> => 񥉦
C<AutoSplit> => 񠕲
C<AutoTrace> => 񙁷
C<AvALLOC> => 񧤀
C<AvARRAY> => 񧤂
C<AvFILL> => 񧤃
C<AvMAX> => 񧤄
C<B'> => 񴐂
C<B::> => 񘈈
C<B::Deparse> => 񲌦
C<B::Generate> => 񨘨
C<B::LOGOP> => 񠈰
C<B::OP> => 񠈩
C<B::Terse> => 񩆔
C<B::Xref> => 񡠒
C<B::minus_c> => 򀅡
C<B> => 񴐀
C<BAR::getit()> => 򁌣
C<BE<lt>E<gt>> => 񷌘
C<BE<lt>textE<gt>> => 񲚂
C<BEGIN { add_100() }> => 򀈈
C<BEGIN {require 'perl5db.pl'}> => 񘑢
C<BEGIN {require 5.12.0}> => 񠆘
C<BEGIN {}> => 񥠸
C<BEGIN> => 򀆓
C<BEGIN{ $/ = "\0digits"; }> => 񶜀
C<BEGIN{}> => 񱠗
C<BEL> => 񙆁
C<BELL> => 񙆀
C<BENGALI DIGIT FOUR> => 񳘙
C<BHK> => 񨑅
C<BINOP> => 񨎃
C<BOL> => 񘖃
C<BOOT:> => 񰔕
C<BRANCH> => 񵕥
C<BSD::Itimer> => 񣁥
C<BSD::Resource> => 񣆉
C<BUFLEN> => 񲅘
C<Bar::> => 񨀶
C<Bar::Baz> => 񨀴
C<BaseClass> => 񡄶
C<Baz::> => 񨀵
C<Benchmark> => 񲌡
C<Berkeley DB> => 񠔃
C<BhkDISABLE> => 񨑇
C<BhkENABLE> => 񨑈
C<BhkENTRY_set> => 񨑄
C<BinGOs> => 񨦗
C<Bit::Vector> => 񢈣
C<Build.PL> => 񣈩
C<Business::CreditCard> => 񢌦
C<Business::ISBN> => 񢀐
C<C0> => 񨦔
C<C> => 񹀨
C<CALL_FPTR> => 񠄩
C<CATCH_GET> => 񩄆
C<CATCH_SET(TRUE)> => 񩄄
C<CE<lt>E<gt>> => 񷌤
C<CE<lt>codeE<gt>> => 񲚄
C<CE<lt>drwxr-xr-xE<gt>> => 񲑖
C<CE<lt>gmtime($^T)E<gt>> => 񲑕
C<CGI.pm> => 񣌘
C<CGI::Carp> => 񣉦
C<CGI::Minimal> => 񣌗
C<CGI> => 񡝔
C<CHECK {}> => 񥡀
C<CHECK> => 򀆘
C<CHLD> => 򀉧
C<CIRCLED DIGIT ONE> => 񴥀
C<CLASS> => 򁎒
C<CLASSNAME> => 񸈳
C<CLD> => 񩖉
C<CLISYM_> => 򁁡
C<CLISYM_LOCAL> => 򁁣
C<CLONE()> => 򁑉
C<CLONE> => 񷎕
C<CLONE_PARAMS> => 񠀡
C<CLONE_SKIP> => 񰍵
C<CODE:> => 򁕶
C<CODE> => 򁘅
C<COLON> => 񵀑
C<COMBINING ACUTE ACCENT> => 񹕑
C<COMBINING RING> => 񶐣
C<COMBINING TILDE> => 񴥓
C<COP *> => 񠄅
C<CORE::> => 񷙑
C<CORE::GLOBAL::> => 񷙡
C<CORE::GLOBAL::die()> => 򀊇
C<CORE::GLOBAL::glob> => 񠌰
C<CORE::GLOBAL> => 񹉥
C<CORE::dump()> => 񤔐
C<CORE::log($x)> => 񠑐
C<CORE::open()> => 񷙒
C<CORE::word> => 񠕄
C<CPAN.pm> => 񣈰
C<CPAN/misc/japh> => 񡜣
C<CPAN/modules/by-category/> => 񡜤
C<CPAN/path/...> => 񡜢
C<CPANPLUS::Dist::*> => 񹤨
C<CPANPLUS> => 񹤥
C<CPERLscope> => 񠄰
C<CPU> => 񲈤
C<CRNCYSTR> => 񩥳
C<CUR> => 񩅖
C<CV*> => 򁌨
C<CV> => 񷜃
C<CXT*> => 򁐰
C<CYGWIN> => 񳌆
C<CallSavedSub1> => 񘁅
C<Carp> => 򀊔
C<Cased> => 񹄄
C<Cased_Letter> => 񹄅
C<Class::method> => 񗜳
C<Class> => 񗘤
C<Close()> => 񩐸
C<Cls> => 񢦗
C<Common> => 񹄷
C<Config.pm> => 񸑶
C<Config> => 񷊗
C<Configure> => 񸒀
C<Content-Length> => 񹠆
C<Content-Type> => 񹠅
C<Convert::Binary::C> => 񲄩
C<Convert::Recode> => 񹝩
C<Copy> => 񘅃
C<Cow::speak> => 񗙆
C<Cow> => 񗙩
C<Critter> => 񰚑
C<CvFLAGS()> => 񸔹
C<CvGV(cv) = gv> => 񠄇
C<CvGV_set(cv,gv)> => 񠄈
C<Cwd> => 񣈷
C<CxEVAL> => 񩄠
C<CxSUB> => 񩁑
C<D> => 񴉨
C<DATA> => 񣐦
C<DAY_1> => 񩦁
C<DAY_7> => 񩦂
C<DB::> => 񸘑
C<DB::DB()> => 򀉡
C<DB::OUT> => 񘝨
C<DB::dump_trace(skip[,count])> => 񘔠
C<DB::parse_options(string)> => 񘔙
C<DB::postponed(subname)> => 񘒀
C<DB::postponed> => 񘒁
C<DB::print_trace(FH, skip[, count[, short]])> => 񘔲
C<DB::sub> => 񠡨
C<DB> => 񰈄
C<DBI> => 񣌇
C<DBIx::*> => 񲊄
C<DBIx> => 񲈖
C<DB_File> => 񢔢
C<DEBUG> => 񲌧
C<DEBUGGING> => 񸔐
C<DEBUG_BEGIN> => 񣐠
C<DEBUG_END> => 񣐡
C<DECC$FILENAME_UNIX_REPORT> => 򁄰
C<DEL> => 񵅤
C<DELETE> => 񥜤
C<DESTROY()> => 񰍳
C<DESTROY> => 񷎖
C<DISPLAY> => 򀡸
C<DOES> => 񸘇
C<DO_UTF8(sv)> => 񹍤
C<DProf> => 񡠂
C<DTrace> => 񙍨
C<DUA1:> => 򀤱
C<Data::Diver> => 񢊕
C<Data::Dumper> => 񢌙
C<Data::Validate::IP> => 񢀓
C<Date::Calc> => 񡦕
C<Date::Manip> => 񡥹
C<Date::Parse> => 񡥸
C<Date> => 񡦓
C<DateTime> => 񡦔
C<Derived> => 񩠨
C<Devel::*> => 񙍒
C<Devel::> => 񠡧
C<Devel::Apache::Profiler> => 񲉢
C<Devel::Cover> => 񡠄
C<Devel::DProf> => 񲉠
C<Devel::FastProf> => 񲉷
C<Devel::FindAmpersand> => 򀍦
C<Devel::NYTProf::Apache> => 񲌂
C<Devel::NYTProf> => 򀍥
C<Devel::PPPort> => 񨕓
C<Devel::Peek::Dump> => 񧢖
C<Devel::Peek> => 񩄨
C<Devel::Profiler> => 񲉣
C<Devel::Proviler> => 񲉡
C<Devel::Ptkdb> => 񘝙
C<Devel::SmallProf> => 񲊀
C<Devel::ebug> => 񡞈
C<Devel::foo::unimport> => 񙌹
C<Devel> => 񡞑
C<Digest::SHA> => 񹤘
C<Display> => 񘁧
C<Dive> => 񢊔
C<Dump*> => 񙁀
C<DumpDBFiles> => 񘦓
C<DumpPackages> => 񘦕
C<DumpReused> => 񘦗
C<Dup> => 񩔅
C<E WITH DIAERESIS> => 񡒀
C<E<gt>=> => 񰘥
C<E<gt>> => 񲦅
C<E<gt>E<gt>file> => 򀢄
C<E<gt>file> => 򀢂
C<E<lt>*.cE<gt>> => 򀡠
C<E<lt>=> => 񰘦
C<E<lt>=E<gt>> => 񲈉
C<E<lt>> => 񲦆
C<E<lt>E<gt>> => 񶡢
C<E<lt>HANDLEE<gt>> => 񸍕
C<E<lt>file> => 򀢀
C<E<lt>stddef.hE<gt>> => 񲅈
C<E> => 񶉡
C<EE<lt>...E<gt>> => 񲠃
C<EE<lt>075E<gt>> => 񲔔
C<EE<lt>0x201EE<gt>> => 񲔒
C<EE<lt>0xADE<gt>> => 񲝢
C<EE<lt>173E<gt>> => 񲝡
C<EE<lt>181E<gt>> => 񲔖
C<EE<lt>eacuteE<gt>> => 񲔗
C<EE<lt>escapeE<gt>> => 񲚘
C<EE<lt>gtE<gt>> => 񲔀
C<EE<lt>htmlnameE<gt>> => 񲔇
C<EE<lt>ltE<gt>> => 񲒙
C<EE<lt>numberE<gt>> => 񲔐
C<EE<lt>shyE<gt>> => 񲝧
C<EE<lt>solE<gt>> => 񲔄
C<EE<lt>verbarE<gt>> => 񲔁
C<EINTR> => 񩘤
C<END {}> => 񥡂
C<END> => 򀜸
C<END{}> => 򀊗
C<ENOENT> => 򀜕
C<ENTER> => 񩉒
C<ENV> => 򀅳
C<EOF> => 񱑄
C<EOL> => 񵕣
C<ERRSV> => 񘀉
C<EXACT BRANCH ... EXACT> => 񵕸
C<EXACT> => 񵕷
C<EXISTS> => 񥜣
C<EXPR> => 񷠐
C<EXTEND> => 񸉲
C<EXTERN.h> => 򁅉
C<Email::*> => 񰔧
C<Email::Valid> => 񣌠
C<Embed::Persistent::eval_file> => 񡘨
C<Encode::encode_utf8()> => 񹜨
C<Encode> => 򀅩
C<English> => 򀀒
C<Evil> => 񗞐
C<Expect> => 񩙶
C<Exporter> => 񦐇
C<ExtUtils::Constant::ProxySubs> => 񙚔
C<ExtUtils::Installed> => 񡝶
C<ExtUtils::MakeMaker> => 񣈳
C<ExtUtils::Makemaker> => 񣈴
C<ExtUtils::Miniperl> => 񩀅
C<F4> => 񵀓
C<F> => 񹦖
C<FALSE> => 񙠘
C<FE<lt>.cshrcE<gt>> => 񲔢
C<FE<lt>E<gt>> => 񷌣
C<FE<lt>filenameE<gt>> => 񲚆
C<FETCH> => 񩂕
C<FILE *> => 򁘉
C<FILE SEPARATOR> => 񡑢
C<FILE*> => 񘄷
C<FILE> => 򁘕
C<FILEHANDLE> => 񦥐
C<FIRSTKEY> => 񘌂
C<FOO::gettime()> => 򁌢
C<FOO> => 񠙀
C<FREETMPS> => 񘁳
C<Fcntl> => 񳎆
C<File/Basename> => 񡌅
C<File::Basename> => 񡌄
C<File::Copy> => 񢑷
C<File::DosGlob> => 񷙱
C<File::Find::Closures> => 񢖇
C<File::Find::Rule> => 񢖑
C<File::Find> => 񹡥
C<File::Finder> => 񢖉
C<File::Glob::glob> => 򀡨
C<File::Glob> => 񱜙
C<File::KGlob> => 񢑗
C<File::Path> => 񢖕
C<File::Random> => 񢕸
C<File::ReadBackwards> => 񢎔
C<File::Slurp> => 񢔤
C<File::Tail> => 񢕖
C<File::stat> => 񤠒
C<Filespec> => 񙝷
C<Fill()> => 񩕥
C<Fill> => 񩔐
C<Filter::Util::Call> => 񣐆
C<Filter::cpp> => 񣎉
C<Filter::exec> => 񣎒
C<Filter::sh> => 񣎔
C<FindBin> => 񣉀
C<Flush> => 񩔕
C<Foo::> => 񨀳
C<Foo::Bar> => 񹐙
C<Foo::bar()> => 񡄲
C<Foo::import()> => 񶤶
C<Foo::our()> => 񡅗
C<Foo> => 񨀲
C<FooPack> => 񥤩
C<Fred.pm> => 񣎂
C<Fred> => 񸜤
C<FreezeThaw> => 񢌓
C<G> => 񹀇
C<GIMME> => 񗤠
C<GIMME_V> => 񗤣
C<GP> => 񸔶
C<GPOS> => 񘖅
C<GREATEST> => 񘘤
C<GREEK SMALL LETTER ALPHA> => 񹔧
C<GRT> => 񲈕
C<GTT GAA> => 񶌅
C<GV *> => 񨉒
C<GV> => 񨑢
C<GV_ADD> => 񨀇
C<G_ARRAY> => 񗤗
C<G_DISCARD> => 񧥉
C<G_KEEPERR> => 񠜇
C<G_SCALAR> => 񗤡
C<G_VOID> => 񗤢
C<GetLastError()> => 򀙵
C<Get_cnt()> => 񩕕
C<Get_ptr()> => 񩕖
C<Getarg()> => 񩐶
C<Getarg> => 񩔂
C<Golden Bullet> => 񲈅
C<Greece> => 񵐘
C<Greek> => 񹕥
C<H> => 񶜷
C<HASH(0xDEADBEEF)> => 񢊉
C<HASH> => 񵐵
C<HAS_STATIC_INLINE> => 񠂔
C<HD:MacPerl folder:site_lib:> => 񰐥
C<HE*> => 񧥠
C<HE> => 񠅀
C<HEAD> => 񦖉
C<HORIZONTAL TABULATION> => 񡑃
C<HTML::FormatText> => 񣉰
C<HTML::LinkExtor> => 񣉳
C<HTML::Parser> => 񣉴
C<HTML::SimpleLinkExtor> => 񣉵
C<HTTPD::GroupAdmin> => 񣌃
C<HTTPD::UserAdmin> => 񣌄
C<HV *> => 򁆅
C<HV* save_hash(GV *gv)> => 񨉘
C<HV*> => 񨀷
C<HV> => 񸕈
C<HVhek_UTF8> => 񰒖
C<HighBit> => 񙀀
C<Horse::name> => 񗝕
C<Horse::named> => 񗝲
C<Horse::sound> => 񗝑
C<Horse> => 񗝸
C<HotKey> => 񢦉
C<HvENAME()> => 񰔃
C<HvENAME> => 񠁹
C<HvFILL> => 񙕀
C<HvNAME()> => 񰔄
C<HvNAME> => 񠁸
C<HvTOTALKEYS> => 񙕁
C<I!> => 񱦒
C<I18N::Collate> => 񰂘
C<I> => 񱦔
C<IE<lt>textE<gt>> => 񲚀
C<IN> => 򁉥
C<INADDR_ANY> => 񩚁
C<INC> => 񥚙
C<INCLUDE: perl |> => 򁍀
C<INCLUDE_COMMAND:> => 򁌹
C<INCLUDE_COMMAND> => 򁍃
C<INFILE> => 񱞑
C<INIT {}> => 񥠹
C<INIT:> => 򁕸
C<INIT> => 򀆗
C<INNER> => 򀍕
C<INPUT> => 򁐕
C<IN_OUT> => 򁉴
C<IN_OUTLIST> => 򁉳
C<IO::File> => 񥈱
C<IO::Handle> => 򀔃
C<IO::Interactive> => 񣅸
C<IO::Pty> => 񩙷
C<IO::Socket> => 񥈲
C<IO::String> => 񢑐
C<IO::Stty> => 񩙸
C<IPC::Msg> => 񥄁
C<IPC::Open2> => 񩙱
C<IPC::Open3> => 񩙲
C<IPC::Run> => 񣀨
C<IPC::Semaphore> => 񥠀
C<IPC::Shareable> => 񩜙
C<IPC::SysV::Msg> => 񥄐
C<IPC::SysV::Semaphore> => 񥠑
C<IPC::SysV> => 񥡤
C<IPC_STAT> => 񥡓
C<ISA> => 񠉁
C<ISO 8859-1> => 񩤆
C<Illegal octal digit '8' ignored> => 񱅕
C<In> => 񹅃
C<InOutStream> => 򁖖
C<Infinity> => 񘊈
C<Inherited> => 񹄵
C<Inline::C> => 񣄀
C<InputStream> => 򁘃
C<Interpolation> => 񢀧
C<Is> => 񹅄
C<Is_> => 񹄦
C<Is_ascii_print()> => 񡑸
C<Is_latin_1()> => 񡑹
C<J> => 񥐄
C<JMPENV> => 񩄙
C<JMPENV_JUMP(2)> => 񩁥
C<JMPENV_JUMP(3)> => 񩄢
C<JMPENV_JUMP> => 񩁡
C<JMPENV_PUSH> => 񩄉
C<Jobbie> => 񸜣
C<KELVIN SIGN> => 񳘣
C<KISS> => 񲌉
C<KOI8R> => 񹙡
C<L&> => 񹄒
C<L<LC_NUMERIC|/Category LC_NUMERIC: Numeric Formatting>> => 񰅆
C<L<use 5.012|perlfunc/use VERSION>> => 񴑡
C<L<use bytes|bytes>> => 񹑁
C<L<use feature 'unicode_strings'|feature>> => 񹑀
C<L<use feature 'unicode_strings|feature>> => 񴑠
C<L<use locale|perllocale>> => 񴑢
C<L> => 񱥸
C<LABEL> => 񤔇
C<LANG> => 񰂂
C<LANGUAGE> => 񰁒
C<LATIN CAPITAL LETTER A WITH ACUTE> => 񹚓
C<LATIN CAPITAL LETTER A WITH GRAVE> => 񹚔
C<LATIN CAPITAL LETTER A WITH MACRON> => 񱅢
C<LATIN CAPITAL LETTER A> => 񹚅
C<LATIN CAPITAL LETTER SHARP S> => 񳘩
C<LATIN CAPITAL LETTER Y WITH DIAERESIS> => 񳘉
C<LATIN SMALL LETTER ETH> => 񳘗
C<LATIN SMALL LETTER SHARP S> => 񵁧
C<LATIN SMALL LETTER Y WITH DIAERESIS> => 񳘐
C<LATIN SMALL LIGATURE FF> => 񳘤
C<LATIN SMALL LIGATURE FI> => 񳕄
C<LC> => 񹄑
C<LC_...> => 񰂄
C<LC_ALL> => 񰂃
C<LC_COLLATE> => 񰂖
C<LC_CTYPE> => 񰂓
C<LC_DATE> => 񩦘
C<LC_MESSAGES> => 񰁓
C<LC_MONETARY> => 񰁰
C<LC_NUMERIC> => 񰁵
C<LC_TIME> => 񰂀
C<LE<lt>"section"E<gt>> => 񲠡
C<LE<lt>...E<gt>> => 񲠂
C<LE<lt>/"Object Methods"E<gt>> => 񲑳
C<LE<lt>/"sec"E<gt>> => 񲑱
C<LE<lt>/secE<gt>> => 񲑲
C<LE<lt>/sectionE<gt>> => 񲠠
C<LE<lt>BE<lt>Foo::BarE<gt>E<gt>> => 񲠅
C<LE<lt>Foo/BarE<gt>> => 񲞘
C<LE<lt>Foo::BarE<gt>> => 񲠒
C<LE<lt>HTTP::ResponseE<gt>> => 񲝸
C<LE<lt>Module::NameE<gt>> => 񲡹
C<LE<lt>Net::PingE<gt>> => 񲑥
C<LE<lt>Object AttributesE<gt>> => 񲠗
C<LE<lt>Perl Error Messages|perldiagE<gt>> => 񲒂
C<LE<lt>The Perl Home Page|http://www.perl.org/E<gt>> => 񲒓
C<LE<lt>chmodE<gt>> => 񲠔
C<LE<lt>crontab(5)E<gt>> => 񲠓
C<LE<lt>fooE<gt>> => 񲠕
C<LE<lt>http://www.perl.comE<gt>> => 񲝷
C<LE<lt>http://www.perl.org/E<gt>> => 񲒒
C<LE<lt>manpage(section)E<gt>> => 񲡸
C<LE<lt>name/"sec"E<gt>> => 񲑨
C<LE<lt>name/"section"E<gt>> => 񲞑
C<LE<lt>name/itemE<gt>> => 񲞒
C<LE<lt>name/secE<gt>> => 񲑩
C<LE<lt>nameE<gt>> => 񲠣
C<LE<lt>perlsyn/"For Loops"E<gt>> => 񲑸
C<LE<lt>perlsyn/For LoopsE<gt>> => 񲑷
C<LE<lt>perlvar/"$."E<gt>> => 񲑵
C<LE<lt>perlvar/$.E<gt>> => 񲑴
C<LE<lt>postfix "if"|perlsyn/"Statement Modifiers"E<gt>> => 񲒅
C<LE<lt>scheme:...E<gt>> => 񲒐
C<LE<lt>sectionE<gt>> => 񲠢
C<LE<lt>text|"sec"E<gt>> => 񲒈
C<LE<lt>text|...E<gt>> => 񲠁
C<LE<lt>text|/"sec"E<gt>> => 񲒆
C<LE<lt>text|/secE<gt>> => 񲒇
C<LE<lt>text|name/"sec"E<gt>> => 񲒃
C<LE<lt>text|name/secE<gt>> => 񲒄
C<LE<lt>text|nameE<gt>> => 񲒁
C<LE<lt>text|scheme:...E<gt>> => 񲒑
C<LE<lt>the Foo::Bar documentation|Foo::BarE<gt>> => 񲕲
C<LE<lt>the various attributes|/"Member Data"E<gt>> => 񲒉
C<LEAVE> => 񩉓
C<LEN> => 񩅈
C<LINE FEED> => 񡑖
C<LINKLIST> => 񠁱
C<LIST OF FILES TO TEST> => 񨜨
C<LIST> => 񸈱
C<LISTOP> => 񨎓
C<LOCK_EX | LOCK_NB> => 񱤄
C<LOCK_NB> => 񱤂
C<LOOP> => 񨎑
C<LVALUE> => 񥙕
C<LWP::Simple> => 񣍤
C<LWP::UserAgent> => 񣊅
C<LWP> => 񣍣
C<Latin> => 񹕤
C<LeftString> => 񗤹
C<Letter_Number> => 񵁄
C<LineInfo> => 񙁂
C<LinkedList::Single> => 񢅱
C<Linux::Pid> => 򀁣
C<List::MoreUtils> => 񢅈
C<List::Permutor> => 񢆖
C<List::Util::first> => 񠍣
C<List::Util::shuffle()> => 񢆀
C<List::Util> => 񢅥
C<Listen> => 񩜔
C<Ll> => 񹄓
C<LocalPort> => 񩜒
C<Locale::Maketext::Guts::_compile()> => 񙝑
C<Lowercase> => 񹂖
C<Lowercase_Letter> => 񹂑
C<Lt> => 񹄕
C<Lu> => 񹄔
C<MAGIC> => 񸔸
C<MANIFEST> => 񦕴
C<MANPAGER> => 񡌱
C<MBOL> => 񘖄
C<MCR> => 򁀔
C<METHOD> => 񰜣
C<MGVTBL> => 񨅃
C<MHCONTEXT> => 񢕦
C<MICRO SIGN> => 񳘧
C<MIME-Base64> => 񣌧
C<MIME-Tools> => 񣌨
C<MIME::Lite> => 񣍈
C<MODE> => 񩐩
C<MODULE> => 񣈡
C<MRO_GET_PRIVATE_DATA()> => 񰔉
C<MSWin32> => 򀉓
C<MU> => 񳘨
C<MULTIPLICITY> => 񠄱
C<MYEXTLIB> => 򁔥
C<MY_CXT_CLONE> => 򁑈
C<Mac::Carbon> => 񣂙
C<Mail::Folder> => 񣍑
C<Mail::Header> => 񣌑
C<Mail::Internet> => 񣍓
C<Mail::Mailer> => 񣍅
C<Mail::Util> => 񣌱
C<MailFolder> => 񣍒
C<MailTools> => 񣍔
C<MakeMaker> => 򀞙
C<Makefile.PL> => 񰕸
C<Malformed UTF-8 character> => 񹜴
C<Map> => 񘂘
C<Mapping> => 񘂒
C<Math::Complex> => 񦀣
C<Math::Matrix> => 񡤵
C<Math::MatrixReal> => 񡤶
C<Math::Trig::acos()> => 񤍁
C<Math::Trig::asin> => 񥡶
C<Math::Trig::tan> => 񤄤
C<Math::Trig> => 񡢔
C<Math::TrulyRandom> => 񡥐
C<Module.pm> => 񰐰
C<Module::Build> => 񠍹
C<Module::CoreList> => 񹤆
C<Module::Install::DSL> => 񙙈
C<Module> => 񦐃
C<Modules> => 񳈣
C<Mouse> => 񗜡
C<Move> => 񩅒
C<Mr. Ed> => 񗝩
C<Mus::speak> => 񗜇
C<Mus> => 񗜄
C<My::Module::FAQ> => 񰒃
C<My::Module::Tutorial> => 񰒂
C<MyCritter> => 񰚉
C<MyMaths> => 񳑓
C<MyMod::Abc> => 񩠗
C<MyMod_threaded> => 񸄃
C<MyObject> => 򁈦
C<N f=2> => 񙀹
C<N> => 񲦄
C<NAME> => 򁉶
C<NATIVE_IS_INVARIANT()> => 񨠁
C<NEE<lt>ltE<gt>3> => 񲔸
C<NEXT_OFF()> => 񵔃
C<NO> => 񱥴
C<NO_INIT> => 򁈡
C<NO_XSLOCKS> => 񨕄
C<NULL> => 񸕢
C<NV> => 񲀩
C<NYTProf> => 񲊔
C<NZE<lt>E<gt>E<lt>3> => 񲔹
C<NaN != NaN> => 񥤶
C<NaN> => 񥤷
C<Nd> => 񹐥
C<Net::Config> => 򁐡
C<Net::Domain> => 񣍖
C<Net::FTP> => 񣍥
C<Net::NNTP> => 񣍡
C<Net::SMTP> => 񣍄
C<Net::Telnet> => 񣅥
C<Net::hostent> => 񤠅
C<Net::netent> => 񤠆
C<Net::protoent> => 񤠇
C<Net::servent> => 񤠈
C<Net_Config> => 򁐣
C<New> => 񨌡
C<Newc> => 񨌢
C<News::NNTPClient> => 񣍢
C<Newx> => 񨌕
C<Newxc> => 񨌖
C<Newxz> => 񨌗
C<NextPermute> => 񢈃
C<NextPermuteNum> => 񢈄
C<NonStop=1 frame=2> => 񙀸
C<NonStop> => 񙀴
C<Non_Canonical> => 񹅴
C<Not in [].> => 񴚀
C<OA_*> => 񨘠
C<OM> => 񲈐
C<ON> => 񱥳
C<ONCE UPON A TIME THERE WAS> => 򁁵
C<ONE_DAY> => 񢀂
C<OOK> => 񧢑
C<OP *> => 񨈧
C<OP()> => 񵒓
C<OP> => 񨑗
C<OPERAND()> => 񵔂
C<OP_CUSTOM> => 񨘆
C<OP_DOFILE> => 񨑁
C<OP_ENTEREVAL> => 񨑀
C<OP_REQUIRE> => 񨑂
C<OP_TRANS> => 񨘘
C<OPf_KIDS> => 񠌸
C<OPpDEREF> => 񙘑
C<OS/2> => 񠔂
C<OUT> => 򁉲
C<OUTER> => 򀍇
C<OUTLIST> => 򁉱
C<OUTPUT:> => 򁕷
C<OUTPUT> => 򁐖
C<O_ASYNC> => 񱡁
C<O_BINARY> => 񱢖
C<O_CREAT> => 񧄃
C<O_CREAT|O_EXCL> => 񦅉
C<O_DEFER> => 񱠹
C<O_DSYNC> => 񱡂
C<O_EXCL> => 񧄄
C<O_EXLOCK> => 񱠸
C<O_LARGEFILE> => 񱡇
C<O_NDELAY> => 񱡅
C<O_NOCTTY> => 񱡄
C<O_NONBLOCK> => 񣈀
C<O_RDONLY> => 񦅓
C<O_RDWR> => 񦄴
C<O_RDWR|O_NDELAY|O_NOCTTY> => 񣀇
C<O_RSYNC> => 񱡃
C<O_SHLOCK> => 񱠷
C<O_SYNC> => 񱡀
C<O_TEXT> => 񱠶
C<O_TRUNC> => 񦅒
C<O_WRONLY> => 񦄳
C<O_XXXXX> => 񩐔
C<Off_t> => 񗔔
C<Oh say can you see by the dawn's early light> => 񧔃
C<Oh sit!> => 񧔄
C<Open()> => 񩒓
C<Open> => 񩔈
C<OutputStream> => 򁘂
C<P.> => 񢙩
C<P> => 񴝱
C<PACKNAME::DATA> => 񘍠
C<PACKNAME> => 񘍡
C<PAGER> => 񡌰
C<PARNO> => 񢜃
C<PARSER> => 񢝵
C<PATH> => 񡌥
C<PDL> => 񢌨
C<PERL5DB> => 񙄁
C<PERL5LIB> => 񷅷
C<PERLDB_OPTS> => 񙂔
C<PERLDOC> => 񡌔
C<PERLDOC_PAGER> => 񡌳
C<PERLIO_F_ERROR> => 񩔢
C<PERLIO_F_UTF8> => 񩕧
C<PERLIO_F_XXXXX> => 񩔤
C<PERLIO_K_CANCRLF> => 񩐘
C<PERLIO_K_FASTGETS> => 񩐢
C<PERLIO_K_RAW> => 񩕦
C<PERLLIB> => 񷅸
C<PERL_ASYNC_CHECK()> => 񸕥
C<PERL_ASYNC_CHECK> => 񩀷
C<PERL_BADFREE> => 񠔇
C<PERL_CORE> => 񨔔
C<PERL_HASH(hash, key, klen)> => 񧥕
C<PERL_MAGIC_arylen> => 񨂒
C<PERL_MAGIC_ext> => 񨅂
C<PERL_MAGIC_foo> => 񨂃
C<PERL_MAGIC_sv> => 񨄖
C<PERL_MAGIC_tied> => 񨅦
C<PERL_MAGIC_uvar> => 񨅁
C<PERL_MEM_LOG=1mst> => 񷄖
C<PERL_MEM_LOG> => 񷄔
C<PERL_POLLUTE> => 񠄁
C<PERL_PV_ESCAPE_NONASCII> => 񠂖
C<PERL_REENTRANT_MAXSIZE> => 񸈖
C<PERL_ROOT:[LIB.2.3.4.5.6.7.8.9]> => 񳅘
C<PERL_ROOT:[LIB.2.3.4.5.6.7.8]> => 񳅗
C<PERL_SET_CONTEXT> => 񨔅
C<PERL_SIGNALS> => 񩘴
C<PERL_STATIC_INLINE> => 񠂒
C<PERL_SUB_DEPTH_WARN> => 񠘲
C<PERL_UNICODE> => 񹖒
C<PERL_UNUSED_ARG> => 񸔗
C<PERL_VMS_POSIX_EXIT> => 򁄱
C<PGPLOT> => 񢌧
C<PGPLOTSHR/Share> => 򀠢
C<PID==0> => 񤝇
C<PLUS(7)> => 񶘑
C<PLUS> => 񵕖
C<PL_*> => 񙔱
C<PL_> => 񩀉
C<PL_curcop> => 񸘳
C<PL_custom_op_descs> => 񠁗
C<PL_custom_op_names> => 񠁖
C<PL_defstash> => 񨀰
C<PL_do_undump> => 񩀈
C<PL_errgv> => 񘀇
C<PL_exit_flags |= PERL_EXIT_DESTRUCT_END> => 񡘲
C<PL_isarev> => 񠉂
C<PL_main_root> => 򀆙
C<PL_na> => 񧡡
C<PL_op> => 񨡙
C<PL_origalen = 1;> => 񡘷
C<PL_origalen> => 񡘵
C<PL_peepp> => 񨐉
C<PL_perl_destruct_level> => 񡙉
C<PL_phase> => 򀆑
C<PL_restartjmpenv> => 񠄵
C<PL_restartop> => 񩄣
C<PL_rpeepp> => 񨐑
C<PL_rsfp> => 񸘂
C<PL_sv_no> => 񧢁
C<PL_sv_serial> => 񨤦
C<PL_sv_undef> => 񧢂
C<PL_sv_yes> => 񧢀
C<PL_top_env> => 񩂙
C<PMOP> => 񨎐
C<POD2::*> => 񡌀
C<POD2::> => 񡊗
C<POD2::E<lt>language_codeE<gt>> => 񡊖
C<POE> => 񲈙
C<POP*> => 񘄇
C<POPi> => 񗦐
C<POPn> => 񩈧
C<POPs> => 񘀑
C<POSIX::_exit> => 񳌣
C<POSIX::ceil> => 񤤔
C<POSIX::floor> => 񤤓
C<POSIX::getattr> => 񤜲
C<POSIX::mkfifo()> => 񩘶
C<POSIX::open> => 񢕢
C<POSIX::setgid()> => 򀂉
C<POSIX::setsid()> => 񥠧
C<POSIX::setuid()> => 򀄹
C<POSIX::sigprocmask> => 񠌔
C<POSIX::strftime()> => 񢔑
C<POSIX::strftime> => 񠍙
C<POSIX::strtod> => 񢌅
C<POSIX::strtol> => 񢌆
C<POSIX:_exit($status)> => 񤙒
C<POSIX> => 񩘆
C<PPCODE:> => 򁕵
C<PRINT()> => 񸍈
C<PROPAGATE> => 񤑆
C<PS_PIPE> => 񩙢
C<PUSH*()> => 򁊇
C<PUSH> => 񩉑
C<PUSHMARK(SP)> => 񗤲
C<PUSHMARK> => 񘁙
C<PUSHTARG> => 񨌳
C<PUSHs> => 򁕲
C<PUTBACK> => 񗦈
C<PV> => 񹚂
C<PVOP> => 񨘗
C<PadWalker> => 񙄆
C<Parallel::ForkManager> => 񣀰
C<Parallel::Jobs> => 񣀩
C<Parse::RecDescent> => 񢀵
C<Parse::Yapp> => 񢀶
C<Pcb> => 񘂗
C<PeerAddr> => 񩚇
C<PeerPort> => 񩚒
C<Perl++> => 񧐩
C<Perl::Unsafe::Signals> => 񩘢
C<PerlIO *> => 򁖘
C<PerlIO*> => 񘄶
C<PerlIO> => 񢍈
C<PerlIOArg> => 񩑖
C<PerlIOBase_clearerr()> => 񩔣
C<PerlIOBase_close()> => 񩔗
C<PerlIOBase_eof()> => 񩔠
C<PerlIOBase_error()> => 񩔡
C<PerlIOBase_fileno()> => 񩔆
C<PerlIOBase_open> => 񩒒
C<PerlIOBase_pushed()> => 񩐳
C<PerlIOBase_setlinebuf()> => 񩔥
C<PerlIOBase_unread()> => 񩔔
C<PerlIOBase_xxxx()> => 񩕩
C<PerlIOBuf_read()> => 񩔑
C<PerlIOUnix_open> => 񙦕
C<PerlIO_allocate()> => 񩑑
C<PerlIO_apply_layers()> => 񗑠
C<PerlIO_binmode()> => 񩐗
C<PerlIO_close()> => 񗔶
C<PerlIO_error()> => 񩐖
C<PerlIO_exportFILE()> => 򁘘
C<PerlIO_fdopen> => 񩒅
C<PerlIO_findFILE()> => 򁘙
C<PerlIO_funcs> => 񩐂
C<PerlIO_get_cnt> => 񗕄
C<PerlIO_get_ptr> => 񗕃
C<PerlIO_open()> => 񩐕
C<PerlIO_open> => 񩒉
C<PerlIO_pop> => 񩒕
C<PerlIO_push> => 񩒔
C<PerlIO_pushed> => 񩐨
C<PerlIO_puts()> => 򁘆
C<PerlIO_releaseFILE()> => 񗔳
C<PerlIO_reopen> => 񩒂
C<PerlIO_xxxxx> => 񩐃
C<PerlIOl *> => 񩎖
C<PerlIOl*> => 񩔩
C<PerlIOl> => 񩐧
C<PerlInterpreter*> => 򀆉
C<PerlLIO_open3> => 񩑩
C<PerlMem_malloc> => 񩀓
C<Perl_> => 񨔵
C<Perl_av_fetch> => 񨔡
C<Perl_blockhook_register> => 񨐖
C<Perl_cpeep_t> => 񨘡
C<Perl_croak("%s", PL_no_modify)> => 񠂐
C<Perl_croak_no_modify> => 񠂉
C<Perl_csighandler()> => 񸕙
C<Perl_custom_op_register> => 񨘉
C<Perl_dump_all> => 񨑥
C<Perl_dump_eval> => 񨑙
C<Perl_dump_packsubs> => 񨑣
C<Perl_dump_sub> => 񨑤
C<Perl_fbm_instr> => 񴒙
C<Perl_fetch_cop_label> => 񠄃
C<Perl_mro_register> => 񰒕
C<Perl_mro_set_private_data()> => 񰔒
C<Perl_newASSIGNOP()> => 񸘅
C<Perl_op_dump> => 񨡠
C<Perl_parse> => 񨔴
C<Perl_pp_add> => 񨠸
C<Perl_pp_regcomp> => 񴙔
C<Perl_ptr_table_clear> => 񠄡
C<Perl_ptr_table_free> => 񠅁
C<Perl_ptr_table_store> => 񠄸
C<Perl_reg_numbered_buff_fetch> => 񴕕
C<Perl_reg_numbered_buff_length> => 񴕦
C<Perl_reg_numbered_buff_store> => 񴕘
C<Perl_rpeep> => 񨘣
C<Perl_runops_debug> => 񨐔
C<Perl_runops_standard> => 񨐕
C<Perl_sighandler()> => 񸕦
C<Perl_sv_dump> => 񨡗
C<Perl_warn> => 񩐷
C<Perltidy> => 񡠓
C<Platform> => 񸂉
C<Pod::Simple> => 񸐳
C<Popped()> => 񩑁
C<PosixAlpha> => 񹄃
C<PosixLower> => 񹄁
C<PosixUpper> => 񹄀
C<PrintID> => 񘁦
C<PrintRet> => 񘥗
C<Proc::Background> => 񣀲
C<Proc::Daemon> => 񣅵
C<ProcessRead> => 񘂅
C<Program$Name> => 񳉂
C<Proto> => 񩚆
C<Ptr> => 򁐈
C<Pushed> => 񩔄
C<Q> => 񱦀
C<R> => 񙂆
C<RADIXCHAR> => 񩥨
C<RE> => 񱖃
C<REGEXP> => 񴙑
C<REGlob> => 񷙩
C<REMOTE> => 񤙱
C<RETURN> => 񩉡
C<RETVAL> => 򁆘
C<RE_ENGINE_PTR> => 񴘉
C<RExC_size> => 񵔤
C<RExC_state_t> => 񵔘
C<RExC_xxxx> => 񵔢
C<RFC::RFC822::Address> => 񣌡
C<ROLE> => 񰜙
C<RPC.pm> => 򁑓
C<RPC.xs> => 򁑑
C<RXapif_ALL> => 񴖆
C<RXapif_ONE> => 񴖅
C<RXf_PMf_LOCALE> => 񴔡
C<Read()> => 񩕔
C<ReadLine> => 񙀲
C<Regexp::Common> => 񢚘
C<Regexp> => 񴖒
C<Renew> => 񨌙
C<Renewc> => 񨌠
C<Reuse> => 񩜕
C<S*> => 񴐖
C<S*?> => 񴐢
C<S+> => 񴐗
C<S+?> => 񴐣
C<S<[ \f\n\r\t]>> => 񹑓
C<S<git add --interactive>> => 񦙒
C<S<git add I<FILE ...>>> => 񦙓
C<S<use encoding>> => 񱝢
C<S> => 񴐲
C<S?> => 񴐕
C<S??> => 񴐡
C<SAVECLEARSV(SV *sv)> => 񨈲
C<SAVEDELETE(HV *hv, char *key, I32 length)> => 񨈵
C<SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)> => 񨉁
C<SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)> => 񨉅
C<SAVEFREEOP(OP *op)> => 񨈦
C<SAVEFREEPV(p)> => 񨈩
C<SAVEFREESV(SV *sv)> => 񨈓
C<SAVEFREESV> => 񨈣
C<SAVEI32(I32 i)> => 񨈁
C<SAVEINT(int i)> => 񨆙
C<SAVEIV(IV i)> => 񨈀
C<SAVELONG(long i)> => 񨈂
C<SAVEMORTALIZESV(SV *sv)> => 񨈢
C<SAVEMORTALIZESV> => 񨈡
C<SAVEPPTR(p)> => 񨈆
C<SAVESPTR(s)> => 񨈅
C<SAVESTACK_POS()> => 񨉉
C<SAVETMPS> => 񘁲
C<SAVE_FOO> => 񩁘
C<SA_SIGINFO> => 񸕧
C<SCALAR> => 񘌁
C<SE<lt>$x ? $y : $zE<gt>> => 񲔨
C<SE<lt>...E<gt>> => 񲝕
C<SE<lt>textE<gt>> => 񲜁
C<SEEK_CUR> => 񦆑
C<SEEK_END> => 񦆒
C<SEEK_SET> => 񦆐
C<SET PATHEXT=%PATHEXT%;.PL> => 񡡆
C<SET PROCESS /CASE_LOOKUP=SENSITIVE> => 򀡗
C<SETMAGIC: DISABLE> => 򁆓
C<SETMAGIC: ENABLE> => 򁆔
C<SETn> => 񩉠
C<SHARP S> => 񙎃
C<SHOW ROOT> => 򀡙
C<SIGALRM> => 񥡹
C<SIGBUS> => 񨥀
C<SIGCHLD> => 򀜲
C<SIGHUP> => 񩘇
C<SIGINT> => 񦈕
C<SIGQUIT> => 񦈖
C<SIZE_ONLY> => 񵔥
C<SMALL LETTER SHARP S> => 񡒂
C<SMALLEST> => 񘘣
C<SP> => 򁊘
C<SPACE> => 񱒄
C<SPAGAIN> => 񗥷
C<SQL> => 񲈘
C<SS> => 񳘰
C<SSS...S> => 񴐐
C<ST(0)> => 򁈘
C<ST(1)> => 򁈠
C<ST(count-1)> => 񘄓
C<ST(i)> => 򁕣
C<ST(n)> => 񨊄
C<ST> => 񴎂
C<STAR(4)> => 񶘉
C<START> => 񢘧
C<STATIC S_whatever> => 񨔣
C<STDERR> => 򀉴
C<STDIN> => 񳉄
C<STDOUT> => 򀘕
C<STDOUT_TOP> => 򀘑
C<STORESIZE> => 񸉳
C<STRING()> => 񵔁
C<STRING> => 񧔷
C<STRLEN> => 񧠷
C<STR_LEN()> => 񵔀
C<SUPER::speak> => 񗜤
C<SUPER> => 񸜆
C<SV *> => 򁌁
C<SV* save_scalar(GV *gv)> => 񨉕
C<SV* save_svref(SV **sptr)> => 񨉴
C<SV**> => 񧥆
C<SV*> => 񨌂
C<SV> => 񸕔
C<SVOP> => 񨘙
C<SVf_UTF8> => 񨖀
C<SVs_PADMY> => 񨍕
C<SVs_PADTMP> => 񨍗
C<SVt_PVMG> => 񨁣
C<SYS$INPUT> => 򁂘
C<SYS$OUTPUT> => 򁂙
C<SYS$TIMEZONE_DIFFERENTIAL> => 񳅱
C<S_*> => 񦁰
C<S_> => 񨔉
C<S_I*> => 񤉇
C<S_IF*> => 񦁩
C<S_IS*> => 񦁥
C<S_doeval> => 񨢒
C<S_mro_get_linear_isa_c3()> => 񰔔
C<S_mro_get_linear_isa_dfs()> => 񰔗
C<S_parse_body> => 񩀙
C<S_raise_signal()> => 񸕠
C<SaveSub1> => 񘁈
C<SaveSub2> => 񘁔
C<Scalar::Util> => 񢥉
C<Schwarzian Transform> => 񲌕
C<Seek> => 񩔖
C<Set_ptrcnt()> => 񩕗
C<Sheep::named> => 񗠄
C<Sheep> => 񗠃
C<Shell.pm> => 񡝩
C<ShellBang> => 񘤣
C<Socket::getaddrinfo()> => 񙍣
C<Socket::getnameinfo()> => 񙍤
C<Socket> => 񩚀
C<Some::Module> => 񰐨
C<Sort::Key> => 񲌇
C<Sort::Maker> => 񲌆
C<Ss> => 񳘱
C<Storable> => 񢌠
C<String::Approx> => 񢄆
C<Strtol> => 񘅣
C<Strtoul> => 񘅤
C<Style> => 񨙠
C<Sv*OK> => 񧤇
C<Sv*V> => 񧤐
C<Sv> => 񩄴
C<SvCUR(sv)> => 񩄵
C<SvCUR> => 񷜂
C<SvEND> => 񩅗
C<SvGETMAGIC()> => 񨅗
C<SvGROW(sv, len + 1)> => 񧡥
C<SvGROW> => 񩅉
C<SvIOK_on> => 񨁖
C<SvLEN> => 񧢘
C<SvMAGICAL> => 񸕷
C<SvNOK> => 񨡆
C<SvNV> => 񨡔
C<SvPOK()> => 񧡦
C<SvPOK_on> => 񨁕
C<SvPOK_only> => 񩅡
C<SvPOK_only_utf8> => 񩅠
C<SvPV(sv, len)> => 񩄷
C<SvPV> => 񧡙
C<SvPVX(sv) - SvIV(sv)> => 񧢕
C<SvPVX> => 񷜁
C<SvPV_force> => 񩅅
C<SvPV_nolen> => 񧡘
C<SvPVbyte> => 񠍕
C<SvREFCNT_dec(SV*)> => 񧢇
C<SvREFCNT_dec(val)> => 񨅳
C<SvREFCNT_dec> => 񨈗
C<SvREFCNT_inc> => 񨀣
C<SvREFCOUNT(sv)> => 񩄶
C<SvROK> => 򁕹
C<SvRV> => 򁖐
C<SvRX> => 񴖖
C<SvSETMAGIC()> => 򁆒
C<SvSetSV> => 񘁖
C<SvTAINT> => 񩅢
C<SvTIED_obj> => 񩉂
C<SvTRUE(ERRSV)> => 񘀒
C<SvTRUE> => 񙤠
C<SvTYPE> => 򁖑
C<SvUPGRADE> => 񨁡
C<SvUTF8(sv)> => 񹍦
C<SvUTF8> => 񨖇
C<Switch> => 񢤰
C<Sys::AlarmCall> => 񣆃
C<Sys::Hostname> => 񣍗
C<System$Path> => 񳈦
C<System:Modules> => 񳈥
C<S{0,1}> => 񴐘
C<S{0,1}?> => 񴐤
C<S{0,BIG_NUMBER}> => 񴐙
C<S{0,BIG_NUMBER}?> => 񴐥
C<S{1,BIG_NUMBER}> => 񴐠
C<S{1,BIG_NUMBER}?> => 񴐦
C<S{REPEAT_COUNT}> => 񴐉
C<S{max}|S{max-1}|...|S{min+1}|S{min}> => 񴐒
C<S{min,max}> => 񴐑
C<S{min,max}?> => 񴐓
C<S{min}|S{min+1}|...|S{max-1}|S{max}> => 񴐔
C<S|T> => 񴐃
C<T> => 񴐈
C<TAIL> => 񵕵
C<TARG> => 񨍑
C<TCP::Client> => 񣅣
C<TEMPLATE> => 񡆐
C<TERM> => 򀡴
C<TESTVAL> => 򁔠
C<TEST_JOBS> => 񨜠
C<TGA> => 񶌆
C<THIS> => 򁎉
C<THX> => 񨒉
C<TIEARRAY> => 񩄅
C<TIEHANDLE> => 񦉠
C<TIEHASH> => 񦉢
C<TIESCALAR> => 񦉙
C<TIOCNOTTY> => 񩙈
C<TOP*> => 񩈴
C<TOPs> => 񨡐
C<TRIE-EXACT> => 񵕹
C<TTY> => 񙀤
C<TYPE> => 񨍰
C<TYPEMAP> => 򁐔
C<T_PTROBJ> => 񠍡
C<T_PTROBJ_SPECIAL> => 򁐢
C<Task::Deprecations::5_14> => 񙔘
C<Template> => 񢄐
C<Term::ANSIColor> => 񢦃
C<Term::ANSIScreen> => 񢦑
C<Term::Cap> => 񢦔
C<Term::ReadKey> => 񤜳
C<Term::ReadLine> => 񙁃
C<Term::Rendezvous> => 񙀥
C<Test::More> => 񸐠
C<Text::Autoformat> => 񢁇
C<Text::Balanced> => 񱄇
C<Text::CSV> => 񢂗
C<Text::CSV_PP> => 񢂙
C<Text::CSV_XS> => 񢂘
C<Text::Diff> => 񹤔
C<Text::DoubleMetaphone> => 񢄈
C<Text::Metaphone> => 񢄇
C<Text::ParseWords> => 񢁳
C<Text::Soundex> => 񰍉
C<Text::Tabs> => 񢁂
C<Text::Template> => 񢄉
C<Text::Wrap> => 񢁅
C<Th> => 񶈅
C<ThatPack::INPUT_HANDLE> => 񥑳
C<The NO_OUTPUT Keyword> => 򁉕
C<Thread::Queue-E<gt>new()> => 񸅘
C<Tie::Cycle> => 񢅸
C<Tie::File> => 񢕹
C<Tie::Hash::NamedCapture> => 񙕐
C<Tie::IxHash> => 񢊀
C<Time::HiRes> => 񣁳
C<Time::JulianDay> => 񡦂
C<Time::Local> => 񥀳
C<Time::Piece> => 񡦙
C<Time::Seconds> => 񢀁
C<Time::gmtime> => 񤠉
C<Time::localtime> => 񤠐
C<Titlecase> => 񹂗
C<Titlecase_Letter> => 񹂒
C<Tk> => 񡞆
C<To-> => 񹉇
C<ToLower()> => 񹉧
C<ToLower> => 񹈲
C<ToTitle> => 񹉰
C<ToUpper()> => 񹍐
C<ToUpper> => 񹉀
C<Today_and_Now> => 񡦖
C<Total sbrk(): SBRKed/SBRKs:CONTINUOUS> => 񘘧
C<Tputs> => 񢦕
C<Try::Tiny> => 񣂑
C<U*> => 񨦕
C<U+0000..U+FFFF> => 񹊑
C<U+0041 LATIN CAPITAL LETTER A> => 񹔲
C<U+0041> => 񹈀
C<U+0130> => 񹉖
C<U+10000..U+10FFFF> => 񹊖
C<U+1EFF> => 񹈁
C<U+D800..U+DBFF> => 񹊘
C<U+DC00..U+DFFF> => 񹌀
C<U+FDD0> => 񹈄
C<U+FEFF> => 񹌁
C<U+FFFE> => 񹌇
C<U+FFFF> => 񹌑
C<U+HHHH> => 񹝐
C<U0> => 񹜶
C<U> => 񹜷
C<UNDERBAR> => 񠅃
C<UNICODE_ALLOW_FDD0> => 񠄔
C<UNICODE_ALLOW_FFFF> => 񠄕
C<UNICODE_ILLEGAL> => 񠄖
C<UNICODE_IS_ILLEGAL> => 񠄗
C<UNISKIP()> => 񹎑
C<UNISKIP(chr)> => 񹎉
C<UNITCHECK {}> => 񥡁
C<UNITCHECK> => 񷒈
C<UNIVERSAL::can> => 񸙦
C<UNIVERSAL::isa> => 񨀆
C<UNIVERSAL> => 񰜑
C<UNI_DISPLAY_BACKSLASH> => 񹐁
C<UNI_DISPLAY_ISPRINT> => 񹐀
C<UNI_DISPLAY_QQ> => 񹐂
C<UNOP> => 񨎔
C<URI::Escape> => 񣊘
C<URI::Find> => 񣉶
C<USE_PERLIO> => 񩎄
C<USE_SFIO> => 񩎅
C<UTF-8> => 񹞕
C<UTF8> => 񹚁
C<UTF8SKIP()> => 񹎐
C<UTF8SKIP(buf)> => 񹎈
C<UTF8SKIP> => 񨕩
C<UTF8_IS_INVARIANT(*s)> => 񨖐
C<UTF8_IS_INVARIANT(uv))> => 񨖕
C<UV> => 񘅓
C<UV_MAX> => 񰤄
C<Unassigned> => 񹆔
C<Unicode Transformation Format> => 񡐷
C<Unicode::Map8> => 񹝧
C<Unicode::Map> => 񹝨
C<Unicode::String> => 񹝦
C<Unicode::UCD> => 񹝥
C<Unimplemented> => 񱁢
C<Unread()> => 񩔘
C<Uppercase> => 񹂕
C<Uppercase_Letter> => 񹂐
C<UsageOnly> => 񙀉
C<Use of uninitialized value $Foo::BAR> => 񠉅
C<User::grent> => 񤠑
C<User::pwent> => 񤠓
C<V currentpackage [vars]> => 񘞆
C<V> => 񲀉
C<VARIABLE> => 񸈩
C<VAR_NAMES_LIKE_THIS> => 񷌂
C<VERSION> => 񰜧
C<VMS::Filespec::candelete> => 򁀶
C<VMS::Filespec> => 򀡉
C<VMS::Stdio::remove> => 򁀷
C<VSTRING> => 񥙘
C<W*()> => 񦈡
C<W> => 񹦓
C<WWW::Mechanize> => 񰔦
C<Wide character in crypt> => 񤍢
C<Win32::*> => 񳄲
C<Win32::API> => 񣂘
C<Win32::Console> => 񢦖
C<Win32::GetOSName()> => 򀉔
C<Win32::ODBC> => 񣆔
C<Win32::Process> => 񣀳
C<World> => 񵡴
C<Writer> => 񩙳
C<X*> => 񶆂
C<X+> => 񶆁
C<X4> => 񲄨
C<X> => 񹦉
C<XE<lt>absolutizing relative URLsE<gt>> => 񲔳
C<XE<lt>topic nameE<gt>> => 񲚈
C<XML::Parser> => 񢘷
C<XOP> => 񨘇
C<XPUSH*> => 񩈲
C<XPUSHn> => 񩈱
C<XPUSHs> => 򁕰
C<XPV> => 񙕂
C<XPVIV> => 񙕃
C<XPVNV> => 񙕄
C<XS> => 񠄲
C<XSANY.any_dptr> => 򁌧
C<XSINTERFACE_FUNC> => 򁌩
C<XSINTERFACE_FUNC_SET> => 򁌰
C<XSRETURN*()> => 򁊔
C<XSRETURN> => 򁌅
C<XSRETURN_*> => 򁌆
C<XSRETURN_EMPTY> => 򁌃
C<XST_m*()> => 򁊓
C<XSUB.h> => 򁅑
C<XS_APIVERSION_BOOTCHECK> => 񠄂
C<XXX> => 񘤕
C<XopENTRY_set> => 񨘈
C<Your-Module-1.33.tar.gz> => 񰐸
C<Your-Module-1_33.tgz> => 񰐹
C<Z*> => 񲂐
C<Z> => 񥎁
C<ZE<lt>E<gt>> => 񲠄
C<ZE<lt>potatoesE<gt>> => 񲚒
C<Zoidberg> => 񡝨
C<[ ITEMS ]> => 񵍗
C<[ \f\n\r\t]> => 񳙅
C<[ ]> => 񶉤
C<[#]> => 񶉦
C<[$+E<lt>=E<gt>^`|~]> => 񵅲
C<[$opt]> => 񸤡
C<['-?]> => 񵄃
C<[()]> => 񵁳
C<[+-]> => 񶉓
C<[+-]?> => 񶉔
C<[-!"#%&'()*,./:;?@[\\\]_{}]> => 񵅱
C<[-ab]> => 񵥕
C<[-az]> => 񴌈
C<[...]> => 򀡕
C<[./0-9A-Za-z]> => 񤍖
C<[.^.^.^.]> => 򀡒
C<[.class.]> => 񵆒
C<[.t]*.*> => 򀡩
C<[0-9]> => 񵥢
C<[0123456789]> => 񵥐
C<[0]> => 񵊔
C<[1, 2, 3]> => 񵎆
C<[2345]> => 񠑴
C<[89\000]> => 񠅲
C<[89]> => 񠅶
C<[:> => 񵅄
C<[:^alpha:]> => 񸦂
C<[:^digit:]> => 񶑓
C<[:alpha:]> => 񸥹
C<[:class:]> => 񵅂
C<[:digit:]> => 񶑆
C<[:lower:]> => 񱐡
C<[:name:]> => 񶐥
C<[:print:]> => 񳁶
C<[:space:]> => 񶑈
C<[:upper:]> => 񶑃
C<[:word:]> => 񶑇
C<[=class=]> => 񵆑
C<[> => 񵂓
C<[A-Za-z0-9_]> => 񹆆
C<[A-Za-z]> => 񹜈
C<[TEMPLATE]> => 񡆉
C<[X]PUSH*()> => 򁊑
C<[[:alpha:]]> => 񰄄
C<[[:ascii:]]> => 񹍇
C<[[:cntrl:]]> => 񵅥
C<[[:posix:]]> => 񙉂
C<[[:print:]]> => 񳙈
C<[[:punct:]]> => 񵅸
C<[\$x]> => 񵥄
C<[\8\9]> => 񠅵
C<[\D\W]> => 񵥲
C<[\W]> => 񵥵
C<[\\$x]> => 񵥇
C<[\da-z]> => 񴙹
C<[\h\v]> => 񴦈
C<[\x89-\x91]> => 񡑧
C<[]> => 񸖖
C<[^()]+ (?! [^()] )> => 񴅧
C<[^()]+> => 񶔦
C<[^...]> => 񵥡
C<[^0-9]> => 񳙖
C<[^\d\w]> => 񵥳
C<[^\n]> => 񴡘
C<[^\n]{> => 񠠣
C<[^\w]> => 񵥴
C<[^a-z]> => 񵄅
C<[a-f\d]> => 񵄠
C<[a-m]> => 񵄂
C<[a-z]> => 񵥓
C<[a\-b]> => 񵥗
C<[a\-z]> => 񴌐
C<[ab-]> => 񵥖
C<[abc...xyz]> => 񵥑
C<[abc}]> => 񶒘
C<[aeiou]+> => 񵁤
C<[aeiou]> => 񵁗
C<[az-]> => 񴌉
C<[bar]> => 񘎁
C<[fee|fie|foe]> => 񴌰
C<[feio|]> => 񴌱
C<[pad]THX_?> => 񩉥
C<[s]> => 񲅓
C<\#> => 񶉥
C<\$$foo{bar}> => 񸥃
C<\$name> => 񗝱
C<\$v{timep}=@{[$v{timep}=$arg]}> => 򁈔
C<\&CORE::open> => 񷙕
C<\&foo> => 񷖔
C<\'> => 񘌉
C<\(@foo)> => 񵈰
C<\([^()]*\)> => 񶔧
C<\*ARGV> => 򀔡
C<\*FH> => 񢡵
C<\-> => 񱕃
C<\/> => 񱘩
C<\000> => 񴜤
C<\0018> => 񴞘
C<\007> => 񠥴
C<\012> => 񳈖
C<\015> => 񳅣
C<\015\012> => 񳅥
C<\033> => 񵤁
C<\034> => 񱒕
C<\040> => 񳅧
C<\077> => 񳡘
C<\0> => 򀉘
C<\10> => 񳡑
C<\11> => 񳡒
C<\18> => 񴞗
C<\1> => 񴍀
C<\200> => 񱕀
C<\2> => 񳡉
C<\400> => 񙎒
C<\777> => 񙎓
C<\7> => 񠥳
C<\8> => 񠅷
C<\9> => 񳡔
C<\> => 񷘁
C<\@some_array> => 񙐩
C<\A> => 񶀕
C<\B> => 񹍁
C<\C> => 񶔒
C<\D*> => 񴊓
C<\D> => 񶑔
C<\E> => 񶍸
C<\G> => 񶔥
C<\H> => 񴥶
C<\I<N>> => 񴢓
C<\I<digit>> => 񴑲
C<\K> => 񴡒
C<\L> => 񹌵
C<\L\u$word> => 񶍤
C<\N> => 񵞔
C<\N\{> => 񠠤
C<\N{...}> => 񹘔
C<\N{3}> => 񵀄
C<\N{4F}> => 񵀉
C<\N{5,}> => 񵀅
C<\N{> => 񠠠
C<\N{ALERT}> => 񙆉
C<\N{ASTERISK}> => 񠠉
C<\N{BELL}> => 񙔂
C<\N{BEL}> => 񙆐
C<\N{COLON}> => 񵀈
C<\N{ESCAPE}> => 񴜁
C<\N{F4}> => 񵀐
C<\N{I<NAME>}> => 񵆕
C<\N{I<NAME>}}> => 񠎘
C<\N{I<name>}> => 񶘶
C<\N{KELVIN SIGN}> => 񳙩
C<\N{LATIN CAPITAL LETTER I WITH DOT ABOVE}> => 񹉕
C<\N{NAME}> => 񳝓
C<\N{U+...}> => 񸦉
C<\N{U+001B}> => 񴜂
C<\N{U+0041}> => 񴜑
C<\N{U+0050}> => 񱅤
C<\N{U+1F514}> => 񙆆
C<\N{U+263A}> => 񸦑
C<\N{U+I<code point>.I<code point>...}> => 񴢇
C<\N{U+I<code point>}> => 񴢆
C<\N{U+I<hex char>}> => 񵆗
C<\N{U+I<hex number>}> => 񱝡
C<\N{U+I<hex>}> => 񴑤
C<\N{U+I<hexadecimal number>}> => 񱝘
C<\N{WHITE SMILING FACE}> => 񸦕
C<\N{charname}> => 񠞔
C<\N{}> => 񹝆
C<\P> => 񹜓
C<\PP> => 񴝳
C<\P{...}> => 񶐈
C<\P{Cyrillic}> => 񹄢
C<\P{InKana}> => 񹈡
C<\P{IsDigit}> => 񶑕
C<\P{Is_Lu}> => 񹄧
C<\P{Katakana}> => 񶐑
C<\P{Lu}> => 񹄨
C<\P{Nd}> => 񶐃
C<\P{Property}> => 񴝴
C<\P{Tamil}> => 񹂈
C<\P{Uppercase}> => 񹁨
C<\P{name}> => 񶎗
C<\P{script=katakana}> => 񶐗
C<\P{}> => 񹂆
C<\Q...\E> => 񳤩
C<\Q> => 񹍉
C<\Q\E> => 񱕥
C<\Q\p> => 񠕙
C<\R> => 񵄙
C<\S> => 񹍃
C<\U> => 񹌶
C<\V> => 񴥸
C<\W*> => 񶕠
C<\W> => 񹍅
C<\W\w> => 񵥹
C<\X> => 񹘥
C<\Y|$re\Y|> => 񴑆
C<\Y|> => 񴑇
C<\Z> => 񶀖
C<\[> => 񱑦
C<\[@%]> => 񷘑
C<\[]> => 񷘂
C<\\/> => 񱘧
C<\\> => 򁈇
C<\\p> => 񠕗
C<\]> => 񱑥
C<\a> => 񵤀
C<\b(foo)> => 񴊁
C<\b=head\d\b> => 񴡇
C<\b> => 񹍀
C<\c> => 񶍧
C<\c@> => 񱘃
C<\cA> => 񴚉
C<\cI<X>> => 񡆗
C<\cJ> => 񤅤
C<\cK> => 񵆂
C<\cM> => 񲥷
C<\cM\cJ> => 񲥰
C<\cU> => 񡑘
C<\cZ> => 񶍨
C<\c\> => 񴚖
C<\c\I<X>> => 񴢃
C<\cb> => 񴚑
C<\ck> => 񱅨
C<\d*> => 񴊆
C<\d*\.\d*> => 񶉕
C<\d+> => 񶉧
C<\d> => 񹐤
C<\d\d> => 񶁃
C<\d\s\w\D\S\W> => 񵥨
C<\e> => 񵂄
C<\f> => 򀖔
C<\g-1> => 񳠢
C<\g-2> => 񳠤
C<\g-I<N>> => 񴢔
C<\g0> => 񠥲
C<\g1> => 񶂅
C<\g2> => 񶂆
C<\g> => 񳡖
C<\gI<N>> => 񴢑
C<\g{-1}> => 񶂈
C<\g{-2}> => 񶂉
C<\g{-7}> => 񠥸
C<\g{-I<N>> => 񴢕
C<\g{-I<N>}> => 񴢖
C<\g{...}> => 񴜦
C<\g{1}> => 񳞗
C<\g{2}> => 񳞙
C<\g{I<N>}> => 񴢒
C<\g{I<name>}> => 񴢗
C<\g{NAME}> => 񴀣
C<\g{name}> => 񶂓
C<\g{}> => 񳡕
C<\h> => 񹅷
C<\integer> => 񶕄
C<\k'I<name>'> => 񴑰
C<\k'NAME'> => 񠥵
C<\k'name'> => 񴠉
C<\k> => 񳡇
C<\kE<lt>I<name>E<gt>> => 񴑩
C<\k{I<name>}> => 񴑨
C<\k{name}> => 񴠈
C<\l> => 񹌸
C<\n> => 񹙵
C<\o> => 񠞙
C<\oI<OOO>> => 񠐂
C<\o{...}> => 񴜧
C<\o{120}> => 񱅙
C<\o{400}> => 񱅡
C<\o{oct}> => 񶎂
C<\o{}> => 񴜡
C<\p> => 񹜒
C<\pL> => 񹁦
C<\pM> => 񶐅
C<\pN> => 񹄐
C<\pP> => 񵀖
C<\p{   Upper  }> => 񹂂
C<\p{ Up-per case = Yes}> => 񹂄
C<\p{ Upper_case : Y }> => 񹂃
C<\p{...}> => 񶐒
C<\p{AHex}> => 񵅔
C<\p{ASCII_Hex_Digit}> => 񵅕
C<\p{ASCII}> => 񹅤
C<\p{Age=3.1}> => 񹈅
C<\p{All}> => 񹅣
C<\p{Alnum}> => 񹅙
C<\p{Alphabetic}> => 񹅠
C<\p{Alpha}> => 񵞗
C<\p{Any}> => 񹅢
C<\p{Arabic}> => 񹄰
C<\p{Assigned}> => 񹅥
C<\p{Bidi_Class: Left}> => 񹁲
C<\p{Bidi_Class:R}> => 񹄗
C<\p{Blank}> => 񹅸
C<\p{Blk=Hebrew}> => 񹅀
C<\p{Block: Arrows}> => 񹄹
C<\p{Block: foo}> => 񹅐
C<\p{Changes_When_Uppercased}> => 񠥡
C<\p{Decimal_Number}> => 񹅡
C<\p{Decomposition_Type: Non_Canonical}> => 񹅩
C<\p{Digit}> => 񴤳
C<\p{Dt=NonCanon}> => 񹅰
C<\p{General_Category=Decimal_Number}> => 񴤶
C<\p{General_Category=Digit}> => 񴤷
C<\p{General_Category=Number}> => 񹄈
C<\p{Graph}> => 񹅵
C<\p{Greek}> => 񶐐
C<\p{Hebrew}> => 񹅈
C<\p{HorizSpace}> => 񹅶
C<\p{In=*}> => 񹆑
C<\p{InFoo}> => 񠜥
C<\p{InKana}> => 񹈠
C<\p{In_Arrows}> => 񹅁
C<\p{In_Hebrew}> => 񹅂
C<\p{IsAlpha}> => 񵅗
C<\p{IsFoo}> => 񠜤
C<\p{IsScript:Arabic}> => 񹄩
C<\p{IsUpper}> => 񶑄
C<\p{Latin}> => 񹄡
C<\p{Lowercase}> => 񙉥
C<\p{Lu}> => 񶐂
C<\p{L}> => 񹁥
C<\p{Nd}> => 񹐣
C<\p{Numeric_Type=Decimal}> => 񴤸
C<\p{Numeric_Type=Digit}> => 񴥂
C<\p{PerlSpace}> => 񹆁
C<\p{PerlWord}> => 񹆄
C<\p{Posix...}> => 񹆇
C<\p{PosixAlpha}> => 񵆅
C<\p{PosixPunct}> => 񵅵
C<\p{Present_In: *}> => 񹆐
C<\p{Present_In: 3.1}> => 񹈆
C<\p{Present_In: Unassigned}> => 񹆕
C<\p{Present_In=*}> => 񹆀
C<\p{Print}> => 񹈇
C<\p{Property}> => 񴝲
C<\p{Prop}> => 񵀕
C<\p{Punct}> => 񵅷
C<\p{Script: bar}> => 񹅑
C<\p{Script:Greek}> => 񶐖
C<\p{Script=Hebrew}> => 񹄙
C<\p{Script=Latin}> => 񶐕
C<\p{SpacePerl}> => 񹈈
C<\p{Space}> => 񵆁
C<\p{Titlecase}> => 񙉢
C<\p{Title}> => 񙉣
C<\p{U_p_p_e_r}> => 񹂁
C<\p{UpPeR}> => 񹂀
C<\p{Uppercase=False}> => 񹁰
C<\p{Uppercase=True}> => 񹁩
C<\p{Uppercase}> => 񹁵
C<\p{Upper}> => 񹁸
C<\p{VertSpace}> => 񹈐
C<\p{Word}> => 񹈒
C<\p{XPosix...}> => 񹈔
C<\p{XPosixAlpha}> => 񵞘
C<\p{XPosixBlank}> => 񵆄
C<\p{XPosixPunct}> => 񵅳
C<\p{^Tamil}> => 񹂇
C<\p{alpha}> => 񹜑
C<\p{foo::bar}> => 񙍱
C<\p{gc:n}> => 񹄉
C<\p{name:value}> => 񶐔
C<\p{name=value}> => 񶐓
C<\p{name}> => 񶎘
C<\p{property:value}> => 񹁴
C<\p{property=value}> => 񹁳
C<\p{sc=hebr}> => 񹄠
C<\p{upper}> => 񹁹
C<\p{}> => 񹝅
C<\r> => 񵢙
C<\s+> => 񴔩
C<\s> => 񹍂
C<\t> => 񵢗
C<\u> => 񹌷
C<\u\L$word> => 񶍥
C<\v> => 񹈑
C<\w*> => 񶑲
C<\w+> => 񵁖
C<\w> => 񹑳
C<\w\W> => 񵥸
C<\w\w\w\w|\w\w\w|\w\w|\w> => 񶄧
C<\x..> => 񹙶
C<\x00> => 񱄵
C<\x07> => 񱄳
C<\x0D\x0A> => 񲥱
C<\x0b> => 񱅩
C<\x1B> => 񵤂
C<\x1c> => 񱒖
C<\x7> => 񱄲
C<\x89> => 񡑩
C<\x8e> => 񡑳
C<\x91 > => 񡑱
C<\x> => 񵂑
C<\xDF> => 񵄓
C<\xHH> => 񳂁
C<\xI<HH>> => 񠐁
C<\xc4\xb0> => 񹉔
C<\x{...}> => 񹙴
C<\x{00}> => 񱄧
C<\x{100}> => 񳙷
C<\x{1FF}> => 񙎑
C<\x{50}> => 񱅘
C<\x{hex}> => 񶎁
C<\x{}> => 񱅒
C<\z> => 񶀘
C<\{1}000> => 񴍃
C<\{> => 񱙀
C<\|> => 񴙶
C<]$\> => 񵥃
C<]> => 򁀐
C<^...$> => 񵤧
C<^> => 򀘃
C<^X> => 񹦇
C<^\s+> => 񢁷
C<^_> => 񹦙
C<_> => 񷘖
C<_OR_SVOP> => 񨘖
C<_TOP> => 򀘉
C<_USE_32BIT_TIME_T> => 񠀄
C<__ANON__> => 񠉉
C<__DATA__> => 񢍡
C<__DIE__> => 򀊉
C<__END__> => 񷀤
C<__LINE__> => 񧉨
C<__PACKAGE__> => 񰈈
C<__WARN__> => 򀊐
C<_aMY_CXT> => 򁑄
C<_exit()> => 񣐵
C<_flags> => 񠁥
C<_nomg> => 񠁣
C<_pMY_CXT> => 򁑆
C<_permitted> => 񸜠
C<_utf8_off> => 񹔄
C<_utf8_on> => 񹔅
C<`> => 򀎑
C<``> => 򀜢
C<`which $scriptname`> => 񠖄
C<a*+> => 񶉅
C<a*> => 񶔙
C<a*?> => 񶆒
C<a*ab> => 񴅕
C<a++> => 񶉇
C<a+> => 񶄵
C<a+?> => 񶆓
C<a+b> => 񴅐
C<a-z> => 񴌇
C<a2p -F:> => 񹡉
C<a> => 񶔣
C<a?+> => 񶉁
C<a?> => 񶄳
C<a??> => 񶆑
C<aMY_CXT> => 򁑁
C<aMY_CXT_> => 򁑅
C<aTHX> => 񨔦
C<aTHX_> => 񨒆
C<ab> => 񶔢
C<ab\x80c = \x{100}\n> => 񹜦
C<abs($b)> => 񰤅
C<abs> => 񰘵
C<accept> => 񩜖
C<add> => 񩅸
C<add_off> => 򁌴
C<addop> => 񩈥
C<afterinit> => 񙂖
C<alarm()> => 񣆄
C<alarm(0)> => 񩘒
C<alarm> => 񥢃
C<alnum> => 񶐨
C<alpha> => 񶐧
C<anchored(TYPE)> => 񘖁
C<anchored> => 񘕘
C<and that feature is known as BE<lt>autovivificationE<gt>> => 񲑐
C<and> => 񷌇
C<apidoc> => 񨔢
C<arg1> => 񵔄
C<arg3> => 񙍧
C<arg> => 񩐱
C<args> => 񡕶
C<argv> => 񗡢
C<argv[0]> => 򀌹
C<argv[1]> => 񸠀
C<array> => 񵐐
C<arrayDepth> => 񘦀
C<ascii> => 񶐩
C<asynch_close> => 񘂐
C<asynch_read> => 񘂄
C<asynch_read_if> => 񘂉
C<at> => 񶅓
C<atan2()> => 񳌁
C<atan2(0,0)> => 񤄥
C<atan2> => 񣘦
C<atexit()> => 񣂒
C<attributes> => 񥉥
C<auto> => 񙀆
C<autoflush()> => 򀔂
C<autoflush> => 񩚘
C<autovivification> => 񢊒
C<av.c> => 񸘗
C<av> => 񘄲
C<av_clear> => 񧤱
C<av_extend> => 񧤳
C<av_fetch> => 򁖄
C<av_len> => 򁖃
C<av_push> => 򁖅
C<av_shift> => 񧤅
C<av_store> => 񨅲
C<av_undef> => 񧤲
C<av_unshift> => 񧤓
C<ax> => 񘄐
C<a{0,1}+> => 񶉂
C<a{0,}+> => 񶉆
C<a{1,}+> => 񶉈
C<a{n,m}+> => 񶈸
C<a{n,m}> => 񶄶
C<a{n,m}?> => 񶆔
C<a{n,}+> => 񶉃
C<a{n,}> => 񶄹
C<a{n,}?> => 񶆗
C<a{n}+> => 񶉉
C<a{n}> => 񶈃
C<a{n}?> => 񶈂
C<a|ab> => 񴍵
C<a|b|c...> => 񶅙
C<b compile subname> => 񙂇
C<b+> => 񶈦
C<b> => 񲁓
C<backticks> => 򁀀
C<bad> => 񦘁
C<bar.dll> => 񠕵
C<bar> => 񵕱
C<be BE<lt>careful!E<gt>> => 񲑉
C<be IE<lt>careful!E<gt>> => 񲑁
C<bind> => 񣠕
C<binmode $fh> => 񹑧
C<binmode STDOUT, ':utf8'> => 񡆅
C<binmode($fh)> => 񷁠
C<binmode()> => 񹙖
C<binmode(FH, ":crlf")> => 񠅠
C<binmode(FILEHANDLE)> => 񳄙
C<binmode> => 򀥁
C<black> => 񗞑
C<blah> => 񳥅
C<blank> => 񶑁
C<blead> => 񦕑
C<bless> => 񤅶
C<blessed> => 񢥈
C<blk_eval.cur_top_env> => 񠄶
C<blurfl> => 񴌅
C<branch> => 񦕇
C<break> => 񸞉
C<bsd_glob> => 񤠸
C<buckets SMALLEST(APPROX)..GREATEST(APPROX)> => 񘘡
C<buffer> => 񘂓
C<buffer_t> => 񲅗
C<bumpx()> => 񷐩
C<byacc> => 񢀸
C<bytes> => 񹜩
C<bytes_to_utf8> => 񨖗
C<c x![d] d c[2]> => 񥑄
C<c3> => 񠝅
C<c> => 񲊒
C<call_*> => 񨕈
C<call_argv> => 񨌄
C<call_method> => 񩉉
C<call_pv("fred", 0)> => 񗡒
C<call_sv(code, G_EVAL)> => 񠍢
C<call_sv(cv, G_EVAL)> => 񩁱
C<call_sv> => 񩂁
C<callback> => 񘂂
C<caller()> => 񸢈
C<caller(N)> => 񤈕
C<caller> => 񳑵
C<caller_cx> => 񠁁
C<camel> => 񦘧
C<can> => 񰜢
C<carp()> => 񰑲
C<carp> => 񲜖
C<carpout> => 񣉨
C<case> => 񸀀
C<cast> => 񨌒
C<cat> => 񶅉
C<cat|keeper> => 񶀳
C<cb1> => 񘁹
C<cc -O> => 񰝐
C<cc> => 񸒉
C<cd sdbm && make all> => 񳉈
C<ceil()> => 񡢑
C<cflags> => 񨡵
C<chain: 0> => 񘘰
C<char *> => 򁈱
C<char *host> => 򁈗
C<char*> => 򁅔
C<char> => 񹔥
C<charnames::string_vianame()> => 񹘖
C<charnames::viacode()> => 񙈉
C<charnames::viacode> => 񙈆
C<charnames::vianame()> => 񙈈
C<charnames::vianame> => 񙈅
C<charnames> => 񹘑
C<chdir()> => 񸈂
C<chdir> => 񷙗
C<check_num()> => 񸆓
C<chmod +x hello> => 򁑶
C<chmod 755 script.pl> => 񩉸
C<chmod> => 񲙳
C<chomp $a, $b> => 񤉥
C<chomp $cwd = `pwd`;> => 񤉢
C<chomp( $cwd = `pwd` )> => 񤉤
C<chomp($a), $b> => 񤉦
C<chomp($a, $b)> => 񤉧
C<chomp()> => 񹀖
C<chomp> => 񷙶
C<chop()> => 񹀕
C<chop> => 񤉲
C<chown> => 񣥀
C<chr()> => 񹜖
C<chr(...)> => 񹘄
C<chr(0x36)> => 񦑩
C<chr(0xD801)> => 񹌈
C<chr(1)> => 񴚔
C<chr(196).chr(172)> => 񨕢
C<chr(2)> => 񴚒
C<chr(200)> => 񨕵
C<chr(255)> => 񶎀
C<chr(28) . 'I<X>'> => 񴢄
C<chr(300)> => 񹜗
C<chr(45)> => 񹜘
C<chr(65)> => 񤊄
C<chr> => 񹞈
C<chroot()> => 񸈁
C<chroot> => 񤊓
C<ck_*> => 񨐂
C<cksum> => 񲌖
C<clang> => 񙥷
C<classname> => 񨀅
C<clear_noremap> => 񘈑
C<clearerr()> => 񣅡
C<clearerr> => 񢕔
C<clock_gettime()> => 񲊐
C<close DATA> => 񘍢
C<close()> => 򀕆
C<close> => 򀙉
C<closedir> => 񳁆
C<cls> => 񢦒
C<cmd.exe /x/d/c> => 񷂇
C<cmd> => 񱎉
C<cmp> => 񹚗
C<cnt> => 񩔨
C<cntrl> => 񶐰
C<code()> => 񩘈
C<code-style> => 񲍡
C<code> => 񴂅
C<col -x> => 񡈴
C<command.com /c> => 񷂈
C<command> => 񧑸
C<comment> => 񸎅
C<commit -a> => 񦕦
C<comp.lang.perl.*> => 񘆀
C<comp.lang.perl.announce> => 񰖁
C<comp.lang.perl.modules> => 񰔩
C<comp> => 񴒇
C<compactDump> => 񘦐
C<concatenation (.)> => 񡅣
C<cond_signal()> => 񸅵
C<cond_wait()> => 񸅴
C<condition> => 񶕓
C<confess> => 񣉥
C<connect> => 񣠖
C<const> => 񨝦
C<constant> => 򁔩
C<context> => 񘔢
C<continue> => 񸞐
C<convert> => 񨐄
C<cop_hints_2hv> => 񠀲
C<cop_hints_fetchpvn> => 񠀳
C<cop_hints_fetchpvs> => 񠀴
C<cop_hints_fetchsv> => 񠀵
C<cophh_> => 񠀹
C<cos($x)> => 񩈩
C<cos> => 񣘧
C<count> => 񲅔
C<counter> => 񢢆
C<cp -R> => 񢖗
C<cp> => 򁕑
C<cpan> => 񣈆
C<cpp -dM perl.c | sort> => 񨠧
C<cpp(1)> => 񣄂
C<cpp> => 񣍸
C<cpp_test> => 񣎅
C<create()> => 񸄒
C<crlf> => 񷁷
C<croak()> => 񰑱
C<croak> => 񸉑
C<crontab(5)> => 񲞁
C<crypt($plain, $digest) eq $digest> => 񤍓
C<crypt()> => 񤍘
C<crypt> => 򀥇
C<csh(1)> => 񣅁
C<custom_op_register> => 񠁆
C<customre> => 񴑃
C<d u o x X b i D U O> => 񥦘
C<d-imsx> => 񳦃
C<d> => 񹐦
C<dMY_CXT> => 򁑀
C<dPOPTOPnnrl_ul> => 񨡁
C<dSP> => 񩉄
C<dTARG> => 񨍉
C<dTARGET> => 񨍒
C<dTHR> => 񨒐
C<dTHX;> => 񨒓
C<dTHX> => 񨔀
C<dUNDERBAR> => 񠅅
C<dVAR> => 񨔂
C<dXSTARG> => 񨍓
C<d_csh> => 񠚈
C<d_pwage> => 񤞕
C<d_pwchange> => 񤞖
C<d_pwcomment> => 񤞗
C<d_pwexpire> => 񤞘
C<d_pwquota> => 񤞔
C<d_setlocale> => 񩡇
C<d_u32align> => 񙦁
C<data> => 񵘳
C<date(1)> => 񣁕
C<datum_type> => 񨥤
C<datumtype!> => 񨥸
C<dbm_open()> => 񦉣
C<dbmclose> => 񣥃
C<dbmopen()> => 񸥑
C<dbmopen> => 񦉴
C<dbx> => 񨠠
C<dclone> => 񢌣
C<ddd> => 񶕱
C<de> => 񘕕
C<debug()> => 񲌙
C<debug> => 񶘆
C<debugcolor> => 񶘈
C<decimal_point> => 񩤩
C<decode('utf8', ...)> => 񹒄
C<decode> => 񹔁
C<decode_utf8> => 񹒂
C<decrypt> => 񣎆
C<default> => 񸀔
C<default_color> => 񗠆
C<default_flags> => 򁊃
C<define> => 򁀳
C<defined $var> => 񸢆
C<defined %Foo::> => 񙐖
C<defined %hash> => 񙐙
C<defined($a // $b)> => 񱀂
C<defined($a) ? $a : $b> => 񰦘
C<defined($a) || $b> => 񰦕
C<defined($a)> => 񰦗
C<defined($pid)> => 񥈔
C<defined(&func)> => 񤎙
C<defined()> => 񸌆
C<defined(...)> => 񷥷
C<defined> => 񱜡
C<delete $+{...}> => 񙉧
C<delete $::{"Foo::"}> => 񠉆
C<delete $Foo::{ISA}> => 񠈶
C<delete local $array[$idx]> => 񷕂
C<delete local $hash{key}> => 񷕃
C<delete local EXPR> => 񥀑
C<delete()> => 񷔵
C<delete> => 򁎈
C<dense_t> => 񲄳
C<dequeue()> => 񸅡
C<dest> => 񨌤
C<detach()> => 񸄡
C<dfs> => 񠝄
C<dick> => 񰈤
C<die ""> => 񠙇
C<die()> => 򀜇
C<die> => 򀥡
C<dieLevel> => 񘥃
C<diff> => 񨙐
C<digit> => 񶐱
C<dir *.*> => 񵡦
C<dist> => 񰕹
C<divide_off> => 򁌳
C<do BLOCK> => 񷚀
C<do EXPR> => 򀈖
C<do FILE> => 񷔃
C<do FILENAME> => 񤒇
C<do { ... }> => 񘡶
C<do { } while> => 񸞔
C<do {}> => 񸠣
C<do/require/use> => 񷐡
C<do> => 򀈨
C<docatch> => 񩄡
C<dog> => 񶀨
C<dog|cat> => 񶀣
C<doit> => 񩝣
C<down()> => 񸅳
C<down_force> => 񙠩
C<down_nb> => 񙠨
C<do{}> => 񷥉
C<dp> => 񡍴
C<dprofpp> => 񲉘
C<dump()> => 񲙲
C<dump> => 򀥧
C<dumpDepth> => 񘦄
C<dump_chars($string)> => 򁉸
C<dup(2)> => 񥈅
C<dup> => 񗑹
C<e WITH DIAERESIS> => 񡒁
C<e f g E F G> => 񦀁
C<e> => 񶉠
C<each()> => 񤔦
C<each> => 򀒐
C<else if> => 񸞈
C<else> => 񷡦
C<elsif> => 񸞇
C<emacs> => 񘥒
C<embed.fnc> => 񨔶
C<embed.pl> => 񸑇
C<embedding[]> => 񡘸
C<encode('utf8', ...)> => 񹒅
C<encode> => 񹔙
C<encode_utf8> => 񹒃
C<encoding> => 񹑰
C<endgrent> => 񣥆
C<endhostent> => 񣥇
C<endnetent> => 񣥈
C<endprotoent> => 񣥉
C<endpwent> => 񣥐
C<endservent> => 񸑖
C<engine> => 񴘆
C<enqueue()> => 񸅙
C<enter> => 񩆈
C<entersub> => 񸕄
C<entertry> => 񠈱
C<env> => 񨢐
C<environ> => 򁂇
C<eof()> => 񸍳
C<eof(...)> => 񷥹
C<eof(ARGV)> => 񤕇
C<eof(FH)> => 񸍩
C<eof(FILEHANDLE)> => 񤔶
C<eof> => 񸍲
C<eogc> => 񴒗
C<eq> => 񹚆
C<equal()> => 񸆆
C<errno> => 򁄂
C<errstr> => 񰑤
C<eval "EXPR"> => 񸤹
C<eval "use SomeModule"> => 򀆔
C<eval ''> => 񤖘
C<eval 'BEGIN{die}'> => 񠌨
C<eval BLOCK> => 񤖓
C<eval EXPR> => 񤈁
C<eval STRING> => 񨐵
C<eval sprintf "%#X", 0x10> => 񙊈
C<eval sprintf "%#x", 0x10> => 񙊐
C<eval {}> => 񷝵
C<eval'ed> => 񘥁
C<eval("...")> => 񵉘
C<eval()> => 򀝈
C<eval> => 򀘩
C<eval_pv> => 񠍐
C<eval_sv> => 񠍉
C<eval{...}> => 񵝣
C<eval{}> => 񸥁
C<ex-const> => 񙕕
C<exec LIST> => 񦆗
C<exec()> => 򁀦
C<exec> => 򀥲
C<exec[lv]e()> => 򁁖
C<execvp> => 񦆙
C<exists $!{the_key}> => 򀜖
C<exists $av[0]> => 񧥰
C<exists $hash{$key}> => 񢉰
C<exists &sub()> => 񠒉
C<exists &sub> => 񠒈
C<exists($hash{$key})> => 񢉦
C<exists()> => 񸌅
C<exists(...)> => 񷥸
C<exists> => 񷚑
C<exit 0> => 񳌘
C<exit 1> => 񳌔
C<exit()> => 򀜶
C<exit(0)> => 񶜄
C<exit> => 񸞁
C<exp($_)> => 񤙠
C<exp> => 񰙁
C<expr> => 񘠱
C<expression> => 񘝗
C<ext/IO/t/io_dir.t> => 񨜤
C<ext> => 򀠄
C<extflags> => 񴘩
C<extobj> => 򀠅
C<e|r> => 񶈆
C<f (eval 7)> => 񘠡
C<f eval 7\b> => 񘠢
C<f(e|i|o)e> => 񴌨
C<f=n N> => 񘕃
C<f> => 񲀦
C<fallback> => 񠤁
C<fbm_instr()> => 񵖐
C<fchdir> => 񸘹
C<fclose()> => 񗔲
C<fcntl> => 񱢄
C<fdopen> => 񥈄
C<feature> => 񷑴
C<fee|fie|foe> => 񴌧
C<fetch> => 񦘦
C<ff> => 񠝑
C<fgets> => 񘅁
C<fh> => 񘂈
C<fi> => 񳕅
C<fields> => 񥉤
C<file> => 򀢉
C<filename:startline-endline> => 񘒃
C<filename> => 񘒄
C<fileno> => 񥞃
C<filetest> => 񤁱
C<filter()> => 񣐇
C<filter_*> => 񘐨
C<filter_add()> => 񣐃
C<filter_read()> => 񣐉
C<find Guru "Samy"> => 񢤷
C<find(\&wanted, $dir)> => 񰑙
C<find2perl . -user root -perm 4000 -print> => 񹡤
C<find> => 񹡢
C<find_by_class()> => 񵘲
C<find_byclass()> => 񵖑
C<find_records()> => 񥤠
C<find_records(@key)> => 񥤙
C<find_rundefsv> => 񠅄
C<find_rundefsvoffset> => 񠄤
C<first()> => 񢅣
C<first> => 񢅠
C<flags> => 񴕶
C<float> => 񡖖
C<floating `k'$> => 񘖇
C<floating> => 񘕢
C<flock()> => 񸅄
C<flock> => 񱤁
C<floor()> => 񡢒
C<flush> => 񢍒
C<fmod()> => 񰤔
C<fmt> => 񲕑
C<fn1> => 񘂔
C<fn2> => 񘂕
C<fn3> => 񘂖
C<foldEQ> => 񠅇
C<foldEQ_locale> => 񠅈
C<foldEQ_utf8(s1, pe1, l1, u1, s2, pe2, l2, u2)> => 񹐃
C<foldEQ_utf8> => 񠅉
C<foo ? 0 : 1> => 񠦑
C<foo()> => 򀈇
C<foo(SvPV(s, len), len);> => 񧡢
C<foo.bar.h.baz> => 񳈶
C<foo.so> => 񠕴
C<foo/bar/baz.h> => 񳈴
C<foo/bar/h/baz> => 񳈵
C<foo: eval $string> => 񠆔
C<foo::::bar> => 񙑈
C<foo> => 񵕰
C<foo|foot> => 񴌩
C<fopen()> => 񩑙
C<fopen> => 񱞓
C<for $i (1,2,3) { ... }> => 񙒙
C<for $item (@array)> => 񸀦
C<for my $_ (@array)> => 񸀨
C<for(;;)> => 񱚅
C<for/foreach/while/until/continue> => 񷐙
C<for> => 񷥄
C<foreach $x (qw(a b c)) {...}> => 񡅓
C<foreach $x qw(a b c) {...}> => 񡅉
C<foreach (1..10)> => 񱀖
C<foreach qw(a b c) {...}> => 񡅒
C<foreach()> => 񸀢
C<foreach> => 򀀲
C<foreach{}> => 񸡃
C<fork()> => 򁀥
C<fork> => 򀥶
C<format()> => 򀖃
C<format-patch> => 񨙇
C<format> => 񤜢
C<formline()> => 򀖉
C<formline> => 񤜤
C<fp[]> => 򁌱
C<fprofpp> => 񲉹
C<fputs()> => 򁘈
C<frame & 16> => 񘥱
C<frame & 2> => 񘥥
C<frame & 4> => 񘥦
C<frame & 8> => 񘥧
C<frame=2> => 񘔹
C<frame> => 񙁲
C<fread> => 񘄹
C<fred> => 񘁇
C<frob> => 񰕘
C<frobnicate> => 񨖂
C<from_to()> => 񹜹
C<fseek> => 񥝒
C<ftp> => 񙜙
C<full == 0> => 񨐢
C<full == 1> => 񨐠
C<full_csh='/usr/bin/tcsh'> => 񠚇
C<func()> => 񷘵
C<function()> => 񷌗
C<fwrite> => 񘅀
C<g> => 񱉹
C<gappy_t> => 񲄲
C<gcc -Wall> => 񨝸
C<gcc> => 񡜕
C<gcov2perl> => 񸑩
C<gcov> => 񸑦
C<gdb> => 񸘒
C<ge> => 񹚘
C<get_regex_charset(const U32 flags)> => 񴔆
C<getc()> => 񢕀
C<getc> => 񸍣
C<getegid()> => 򀂂
C<getgid()> => 򀁧
C<getgrent()> => 񸈐
C<getgrent> => 񣥖
C<getgrgid> => 񣥗
C<getgrnam> => 񣡗
C<getgroups()> => 򀂃
C<gethost*()> => 򀜱
C<gethostbyaddr> => 񣡳
C<gethostbyname('127.0.0.1')> => 񳌸
C<gethostbyname('localhost')> => 񳌷
C<gethostbyname> => 񣥘
C<gethostent()> => 񸈑
C<gethostent> => 񣥙
C<getlogin> => 񤜹
C<getnetbyaddr> => 񣥡
C<getnetbyname> => 񣥢
C<getnetent()> => 񸈒
C<getnetent> => 񣥣
C<getnum> => 񢌐
C<getpeername> => 񣠗
C<getpgrp> => 񤝆
C<getpid()> => 򀁢
C<getppid()> => 򀁠
C<getppid> => 񣥤
C<getpriority(2)> => 񤝙
C<getpriority> => 񣥦
C<getprotobyname> => 񤠗
C<getprotobynumber> => 񣥧
C<getprotoent> => 񣥨
C<getpw*()> => 񣁐
C<getpw*> => 򀥆
C<getpwent> => 񣥩
C<getpwnam> => 񸑕
C<getpwuid(0);> => 񘉨
C<getpwuid> => 񤝀
C<getpwxxx()> => 񷅒
C<gets> => 񩐤
C<getservbyname> => 񣢂
C<getservbyport> => 񣥲
C<getservent> => 񣥳
C<getsockname> => 񣠘
C<getsockopt> => 񣥴
C<gettext> => 񰁖
C<gettime()> => 򁆉
C<gettimeofday()> => 񣁲
C<gettimeofday(2)> => 񣁴
C<gh> => 񘕔
C<git add> => 񦕧
C<git am> => 񦘰
C<git bisect log> => 񦖒
C<git bisect reset> => 񦖔
C<git bisect visualize> => 񦖓
C<git bisect> => 񦖑
C<git checkout -f> => 񦕸
C<git checkout> => 񦕷
C<git cherry-pick> => 񦙁
C<git clean> => 񦕵
C<git commit> => 񦕔
C<git diff> => 񨙈
C<git format-patch> => 񨙆
C<git help bisect> => 񦘂
C<git pull> => 񨙉
C<git reset> => 񦕹
C<git status> => 񦕩
C<git> => 񦖈
C<given()> => 򀀵
C<given(@foo)> => 񸀂
C<given(EXPR)> => 񷥢
C<given(\@foo)> => 񸀃
C<given-when> => 񢤤
C<given/when> => 񸞖
C<given> => 񸁁
C<glob("$x ")> => 񱜖
C<glob("*")> => 񢕳
C<glob("*.c *.h")> => 񤠱
C<glob(".* *")> => 񤠴
C<glob($foo)> => 񱜘
C<glob()> => 򀡧
C<glob> => 񷚆
C<globPrint> => 񘦑
C<global_state> => 򁈨
C<glyph> => 񲅕
C<gmtime()> => 򀦐
C<gmtime> => 򀦉
C<goes> => 񗘩
C<gofs> => 񴘣
C<good> => 񦘀
C<goto &subroutine> => 򀉢
C<goto &whatever> => 񸜦
C<goto LABEL> => 񤔅
C<goto NEXT> => 񤡘
C<goto keyword> => 񸖆
C<goto("NE")."XT"> => 񤡗
C<goto-&NAME> => 񤡢
C<goto-EXPR> => 񤡠
C<goto-LABEL> => 񤡙
C<goto> => 򀉹
C<gp_cv> => 񠄆
C<graph> => 񶐲
C<grep {> => 񸡦
C<grep()> => 򀀳
C<grep> => 񸡣
C<grep_step> => 񶑦
C<grok_bin> => 񘅘
C<grok_hex> => 񘅙
C<grok_oct> => 񘅠
C<gt> => 񹚙
C<gv(*)> => 񸕃
C<gv(*x)> => 񸕁
C<gv> => 񨂘
C<gv_stash*v> => 񨁁
C<gvsv gvsv add whatever> => 񨍵
C<gvsv, gvsv, add> => 񨖘
C<gvsv> => 񩆁
C<gzip -d yourmodule.tar.gz> => 񰑆
C<h = host> => 򁈴
C<h h> => 񘝢
C<h2ph> => 񣉑
C<h2xs -A -n Mytest> => 򁑳
C<h2xs -x> => 򁐀
C<h2xs> => 򁅂
C<h> => 񵅐
C<h_errno> => 򀜩
C<harness> => 񨜧
C<hash> => 񧥀
C<hashDepth> => 񘦁
C<heads: 2192> => 񘘩
C<help> => 񨠡
C<hex()> => 񹝕
C<hex> => 񣘩
C<hibit> => 񨠀
C<host> => 򁈲
C<house(cat|keeper)> => 񶀸
C<house> => 񶀹
C<housecat|housekeeper> => 񶀶
C<how> => 񨄁
C<html2text> => 񲊘
C<http://pause.perl.org/> => 񰕴
C<http://users.perl5.git.perl.org/~yourlogin/> => 񦙉
C<http> => 񙜘
C<hv> => 񨈷
C<hv_clear> => 񧥑
C<hv_common()> => 񰒘
C<hv_copy_hints_hv> => 񠀶
C<hv_delete> => 񧥐
C<hv_delete_ent> => 񨄶
C<hv_ename_add> => 񠂀
C<hv_ename_delete> => 񠂁
C<hv_exists> => 񧥵
C<hv_exists_ent> => 񨄷
C<hv_fetch> => 񨅷
C<hv_fetch_ent> => 񨅸
C<hv_store()> => 񰔓
C<hv_store> => 򁖆
C<hv_store_ent> => 񨅵
C<hv_undef> => 񧥒
C<i!> => 񱦑
C<i> => 񵁠
C<ibcmp_*> => 񠅆
C<if ( $debug ) { > => 񲊁
C<if (!I<condition>)> => 񩍸
C<if (%hash) { # not empty }> => 񠘶
C<if (@array) { # not empty }> => 񠘴
C<if (do BLOCK)> => 񷤂
C<if (is_print_ascii("A")) {print "A is a printable character\n";}> => 񡑷
C<if BLOCK> => 񷤁
C<if()> => 񸀸
C<if-elsif-else> => 񢤦
C<if/else> => 񷈵
C<if/unless/elsif/else> => 񷐘
C<if> => 񸞅
C<ilya@math.ohio-state.edu> => 񰙅
C<implicit> => 񘕶
C<import> => 񷚘
C<inFile.txt> => 񢍴
C<in_addr> => 񳁤
C<in_effect()> => 񳑦
C<incpath> => 񠀈
C<incr+1> => 񘠇
C<increment_count> => 񢢇
C<index()> => 񹘙
C<index> => 򁐹
C<inet_aton()> => 񳁥
C<inet_ntoa()> => 񳁦
C<inet_ntoa> => 񣍙
C<inhibit_exit> => 񘥔
C<input> => 򁑹
C<install-linux.pl> => 񡡇
C<install-linux> => 񡡈
C<installhtml> => 񸑐
C<int *> => 򁎙
C<int input> => 򁑷
C<int is_even(int input)> => 򁕆
C<int()> => 񥕱
C<int(-6.725/0.025)> => 񤤐
C<int(EXPR) == int($.)> => 񱀧
C<int(EXPR) == int(EXPR)> => 񱀥
C<int*> => 򁍣
C<int> => 򁑸
C<integer> => 񷌃
C<interp> => 񡙕
C<intflags> => 񵘙
C<intmax_t> => 񙌲
C<invariant characters> => 񨞙
C<invariant> => 񡐸
C<io> => 񶝓
C<ioctl()> => 񣀁
C<ioctl> => 񱢅
C<iodbc> => 񣆖
C<is> => 񠤳
C<isSPACE_LC> => 񴔑
C<is_interactive> => 񣅹
C<is_numeric> => 񢌉
C<is_tainted()> => 񷅣
C<is_utf8()> => 񹜤
C<is_utf8> => 񹒆
C<is_utf8_char(s)> => 񹎅
C<is_utf8_char> => 񨕤
C<is_utf8_space> => 񴔐
C<is_utf8_string(buf, len)> => 񹎆
C<is_utf8_string> => 񨕣
C<isa> => 񰜠
C<isall> => 񘖈
C<iso-8859-1> => 񹞔
C<iso-8859> => 񹞖
C<isprint> => 񠤵
C<items> => 򁍈
C<ix> => 򁍑
C<j> => 񥐃
C<joe> => 񘁆
C<join $", @array> => 񱈐
C<join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]> => 񤍗
C<join()> => 񸄙
C<join> => 񱕙
C<junk> => 񩅐
C<keep> => 񵤣
C<keepSub> => 񘁕
C<keeper> => 񶁁
C<key+1> => 񧤵
C<key3> => 񢊑
C<key> => 񨈹
C<keys %!> => 򀜗
C<keys %$foo> => 񠈓
C<keys %{+undef}> => 񠈒
C<keys %{...}> => 񠈑
C<keys @array> => 񦑈
C<keys()> => 񩌁
C<keys> => 򁂖
C<kill -l> => 񸠃
C<kill("KILL", ...)> => 񙑱
C<kill("TERM", ...)> => 񙑲
C<kill($sig, $pid)> => 񳍡
C<kill('KILL', ...)> => 񣐩
C<kill('TERM', ...)> => 񣐱
C<kill()> => 򀦗
C<kill(-9, $pid)> => 񳍢
C<kill> => 򀦙
C<klen> => 񧤸
C<koi8-r> => 񹙠
C<l -> => 񘠑
C<l> => 񵅈
C<lasparen> => 񴘦
C<last> => 񸞑
C<lastcloseparen> => 񴘧
C<lc()> => 񹌳
C<lc> => 񴜷
C<lcfirst()> => 񹌴
C<lcfirst> => 񹉩
C<ld> => 񸒕
C<lddlflags> => 񠀑
C<ldflags> => 񠀐
C<ldflags_nolargefiles> => 񠀒
C<le> => 񹚖
C<leave> => 񩆄
C<left> => 񩉘
C<leftsv> => 񨡒
C<len> => 񹎇
C<length()> => 񹜰
C<length(Encode::encode_utf8(EXPR))> => 񤦙
C<length(NAME)> => 򁉷
C<length(substr($uni_string, ...))> => 񠉤
C<length> => 񹠄
C<less -+C -E> => 񡌴
C<lex> => 񳞆
C<lex_start> => 񠂙
C<lex_stuff_pvn> => 񠍈
C<lib$do_command> => 򀥰
C<lib$spawn()> => 򁀈
C<lib.pm> => 񣉐
C<lib/ExtUtils> => 򁐗
C<lib> => 񷆄
C<libpth> => 񠀉
C<libwww-perl> => 񡝕
C<limit datasize n> => 񠤆
C<limit> => 񶍒
C<line> => 񘔱
C<link> => 񲦓
C<lint> => 񨡦
C<listen> => 񣠠
C<ll> => 񦀄
C<local $$ref> => 񠕦
C<local $@> => 񙌑
C<local $SIG{__DIE__}> => 񤖆
C<local $^W=0> => 񩞙
C<local $_;> => 񱚆
C<local $gv> => 񨉖
C<local */> => 񷔤
C<local($_)> => 񷔖
C<local($x)> => 񢢓
C<local($x=10)> => 񡄐
C<local()> => 򀔉
C<local::lib> => 񣉉
C<local> => 񷖘
C<localtime()> => 񸈈
C<localtime> => 񳅲
C<lock()> => 񸅅
C<lock> => 񣤐
C<log> => 񣘱
C<logger()> => 񲌠
C<long double> => 񲀥
C<long*> => 򁍤
C<long> => 򁍢
C<longjmp()> => 񩁖
C<longjmp> => 񣂇
C<looks_like_number> => 񢌂
C<lower> => 񶐳
C<ls *.txt> => 񵡥
C<lseek()> => 񩕒
C<lseek> => 񷁱
C<lstat> => 񳉣
C<lt> => 񹚕
C<lval> => 񧥂
C<m!World!> => 񵢂
C<m!^(blead|maint|perl)!> => 񦘘
C<m!regexp!> => 񶉩
C<m!x!> => 񸤦
C<m''> => 񶉸
C<m(X)PUSH[iunp]> => 񨍅
C<m/ \G( \d+\b )/gcx> => 񢝶
C<m/ ^ a \s* b /mx> => 񱘵
C<m/$(?)\/> => 񠥐
C<m/$\/> => 񠥅
C<m/${\}/> => 񠥈
C<m/()/g> => 񴍥
C<m//> => 򀀧
C<m//g> => 񸤐
C<m//gc> => 񱌄
C<m//o> => 񸤒
C<m//x> => 񱒅
C<m/PATTERN/> => 񱌩
C<m/RE/> => 񱖆
C<m/\A(\d*\.)?\d+\z/> => 񲠰
C<m/\A:?[âaâzAâZ0â9_]+\z/> => 񲙦
C<m/\A=[a-zA-Z]/> => 񲙔
C<m/\A=[a-zA-Z]\S*\s*/> => 񲘩
C<m/\A=cut/> => 񲘥
C<m/\A=item\s*\z/> => 񲠴
C<m/\A=item\s+\*\s*\z/> => 񲠳
C<m/\A=item\s+\d+\.?\s*\z/> => 񲠲
C<m/\A[ \t]/> => 񲙂
C<m/\A\w+:[^:\s]\S*\z/> => 񲝶
C<m/\A\w+\z/> => 񲜳
C<m/\G.../g> => 񱌆
C<m/\p{Cased}/i> => 񙐃
C<m/\p{Lowercase}/i> => 񙐂
C<m/\p{Uppercase}/i> => 񙐁
C<m/clasp/> => 񡘃
C<m/foo$(?)\s+bar/> => 񠥑
C<m/foo$\s+bar/m> => 񠥆
C<m/foo${\}s+bar/> => 񠥉
C<m/pattern/> => 񵞒
C<m/pattern/msixpogcdual> => 񵞃
C<m> => 񶉹
C<m??> => 񱌰
C<m?PATTERN?> => 񱌴
C<m?\w?> => 񡅇
C<m?pat?> => 񷢔
C<m?x?> => 񸤣
C<mXPUSH[iunp]> => 񨍇
C<mY> => 񘞈
C<m[foo]> => 񱘱
C<magic_> => 񨄘
C<magic_get> => 񨄗
C<mail> => 񣌹
C<mailaddress()> => 񣌳
C<mailx> => 񣍀
C<main()> => 񩊇
C<main::DATA> => 񘍥
C<main::infested> => 񙁗
C<main::pests> => 񙁢
C<main> => 򀀆
C<maint-5.005> => 񦘷
C<make clean> => 񦕶
C<make dist> => 񰖀
C<make install> => 񹡱
C<make minitest> => 񦘵
C<make perl> => 򁑩
C<make realclean> => 񨙑
C<make regen_headers> => 񨔹
C<make test TEST_VERBOSE=1> => 񡡨
C<make test.taintwarn> => 񸐸
C<make test.valgrind> => 񙥳
C<make test> => 򁔕
C<make test_harness> => 񨜡
C<make test_porting> => 񦘳
C<make test_static> => 򁑱
C<make utest.utf16> => 񨜇
C<make> => 򁒁
C<malloc()> => 񨤴
C<malloc> => 񸕨
C<man debug> => 񘤗
C<man op> => 񘤘
C<man perl> => 񡜥
C<man> => 񡜨
C<manpage(section)> => 񲡷
C<map { ...> => 񥁲
C<map {> => 񸡥
C<map()> => 򀀴
C<map> => 񸡢
C<matching floating/anchored> => 񘕦
C<max> => 񘠐
C<maxTraceLen> => 񘥲
C<maxdepth> => 񘝴
C<maxsarg> => 񨉳
C<maybe::next::method> => 񠡱
C<memEQ()> => 񹐄
C<memNE()> => 񹐅
C<memcpy> => 񘅅
C<memmove> => 񘅆
C<memzero> => 񨌘
C<methname> => 񗡕
C<method> => 񗜵
C<mg_copy> => 񨆃
C<mg_find> => 񨅢
C<mg_findext()> => 񠂃
C<mg_findext> => 񨅣
C<mg_get()> => 񨆀
C<mg_get> => 񨆄
C<mg_len> => 񨁧
C<mg_obj> => 񨂇
C<mg_ptr> => 񨄤
C<mg_set()> => 񨆁
C<mg_set(val)> => 񨅱
C<mg_set> => 񨆅
C<mg_type> => 񨄔
C<mg_virtual> => 񨄈
C<min> => 񘠉
C<mingw64> => 񙚆
C<miniperl> => 񸒅
C<minlen> => 񴘠
C<minlenret> => 񴘢
C<mjd-perl-ref+@plover.com> => 񵑇
C<mkdir> => 񦌲
C<mkpath> => 񥂈
C<mkrot13> => 񣐔
C<mktime> => 񡥡
C<mm> => 񶈢
C<mmap()> => 񷁔
C<mmap> => 񩐒
C<mmk> => 񰑂
C<mms> => 񰑃
C<mod 2**32> => 񰘓
C<mod_perl> => 񲌄
C<mode> => 񩐴
C<module-starter> => 񰕶
C<modules@perl.org> => 񰔰
C<moooo> => 񗘸
C<mother_re> => 񴘐
C<move> => 񰜉
C<mro::get_isarev> => 񠉃
C<mro::set_mro("classname", "foo")> => 񠝁
C<mro_alg> => 񰔑
C<mro_meta> => 񰔐
C<msg*(), sem*(), shm*()> => 񳁡
C<msgctl> => 񣦀
C<msgget> => 񣦁
C<msgrcv()> => 񷅑
C<msgrcv> => 񣦂
C<msgsnd> => 񣦃
C<msixp> => 񴒕
C<msqid_ds> => 񥂒
C<multiply_off> => 򁌲
C<mx> => 񱘴
C<my $_> => 񥁩
C<my $a> => 򀅒
C<my $b> => 򀅓
C<my $f> => 񢡱
C<my $fh='zzz'; open($fh, ...)> => 񘐙
C<my $foo if 0> => 񦦇
C<my $infile> => 񱞒
C<my $logmessage = shift;> => 񩍣
C<my $message = shift;> => 񲊂
C<my $pi : = 4> => 񙑡
C<my $pi := 4> => 񙑠
C<my $str> => 񲈩
C<my $x : = 42> => 񡄢
C<my $x := 42> => 񡄡
C<my $x if ...> => 񷠹
C<my $x if 0> => 񠙃
C<my %hash = ...> => 񙔴
C<my ($thr)> => 񸄗
C<my @array = ...> => 񙔳
C<my Pony $bill> => 񧝩
C<my \$alias = \$foo> => 񸘖
C<my($x)> => 񢢖
C<my()> => 񸠤
C<my> => 򀁀
C<my_cxt_t> => 򁐸
C<my_start_hook> => 񨐗
C<my_strftime> => 񠍘
C<mygrep()> => 񷘙
C<myint> => 񳑗
C<myname> => 񷝡
C<mypush()> => 񷖑
C<myrand()> => 񷘠
C<mysub(1,2,3)> => 񵌅
C<mytime() + 2> => 񷘤
C<mytime()> => 񷘢
C<mytime(2)> => 񷘥
C<m{1,2}> => 񶅷
C<m{1,2}?> => 񶈑
C<m{World}> => 񵢃
C<n> => 񶉐
C<name(section)> => 񲤄
C<name> => 񷔣
C<named> => 񗠉
C<named_buff> => 񴕱
C<named_buff_iter> => 񴕵
C<namlen> => 񨁳
C<nasty_break()> => 򀔐
C<ne> => 񹚇
C<negative_is_failure> => 򁎗
C<neigh> => 񗝒
C<netstat -a> => 񩜓
C<new()> => 񸄑
C<new*OP> => 񨐃
C<new> => 򁎓
C<newBINOP> => 񩈡
C<newFOROP> => 񠄉
C<newRV> => 򁖉
C<newRV_inc> => 񨀓
C<newRV_noinc> => 񨀒
C<newSV> => 񧦂
C<newSVpv> => 񧡅
C<newSVpvn> => 񧡂
C<newSVsv> => 񘁓
C<newWHILEOP> => 񠄐
C<new_SV()> => 񨤥
C<new_tmpfile> => 񢐔
C<next unless -f $file && -T $file> => 񤂂
C<next::can> => 񠡲
C<next::method> => 񠡰
C<next> => 񸞒
C<nextstate> => 񩆇
C<nm libperl.a|egrep -v ' [TURtr] '> => 񨝤
C<nm> => 񨝥
C<nmake> => 񰐈
C<nn> => 񩉖
C<no 5.13.2> => 񠆕
C<no Devel::foo 'bar'> => 񙍑
C<no Devel::foo> => 񙍈
C<no I<VERSION>> => 񠐓
C<no VERSION> => 񦐦
C<no locale> => 񷅱
C<no myint;> => 񳑙
C<no strict 'subs'> => 񘍰
C<no strict 'vars'> => 񷑓
C<no strict refs> => 񗘢
C<no warnings 'all'> => 񤕱
C<no warnings 'ambiguous';> => 񠑷
C<no warnings 'misc'> => 񗤑
C<no warnings 'non_unicode';> => 񠤃
C<no warnings 'nonchar';> => 񡁷
C<no warnings 'surrogate';> => 񡅲
C<no warnings 'utf8';> => 񡆆
C<no warnings qw(taint)> => 񶥷
C<no warnings> => 񷉷
C<no-pattern> => 񴐷
C<no-regexp> => 񶕁
C<no> => 񦐧
C<noTTY> => 񙀡
C<no_plan> => 񙠦
C<non_unicode> => 񙈔
C<nonchar> => 񙈓
C<noscan> => 񘕰
C<nosuid> => 񙥹
C<not (...)> => 񷦁
C<not> => 񷞐
C<nparens> => 񴘥
C<nsv> => 񨅥
C<null> => 񨎕
C<num> => 񨊉
C<number> => 񷄕
C<nytprofcsv> => 񲊗
C<nytprofhtml> => 񲊖
C<o ...> => 񘔐
C<o WITH CIRCUMFLEX> => 񡑶
C<o option="She said, \"Isn't it?\""> => 񘡩
C<o option='this isn\'t bad'> => 񘡨
C<o pager="less -MQeicsNfr"> => 񘡦
C<o pager=...> => 񘝣
C<o recallCommand> => 񘢂
C<o shellBang> => 񘢄
C<o> => 񹦗
C<o?> => 񴍐
C<obj> => 񨂓
C<oct> => 񥅉
C<off> => 񹎔
C<off_t> => 񗔕
C<offs> => 񴘴
C<offset[length]> => 񘖕
C<offsetof> => 񲅇
C<offsets> => 񵘧
C<op_children> => 񨎒
C<op_first> => 񨎇
C<op_last> => 񨎈
C<op_next> => 񩆒
C<op_sibling> => 񨎉
C<open '-|'> => 񱠅
C<open '|-'> => 񱠆
C<open FH, "|-"> => 񩙘
C<open source software> => 񧄘
C<open( *{'zzz'}, ...)> => 񘐠
C<open()> => 򁁀
C<open(2)> => 񥈨
C<open(BAR, "-|")> => 񣐸
C<open(CMD, "|cmd|")> => 񠖃
C<open(FH, "command |")> => 񠠂
C<open(FH, "| command")> => 񠠁
C<open(FH, 'A')> => 񳅐
C<open(FOO, "|-")> => 񣐷
C<open(LOG,'logfile')> => 񘉓
C<open(MYSELF, "|-")> => 񣔂
C<open(X, "E<gt>E<gt>thing.dat") || die $!> => 񲕈
C<open(local $fh,...)> => 񘐘
C<open(log,'logfile')> => 񘉔
C<open(my $fh, ...)> => 񘐗
C<open3()> => 񣄳
C<open> => 򀘰
C<open_door()> => 񦥡
C<opendir> => 񳅔
C<optimize> => 񨘂
C<option> => 񘡲
C<or> => 񷝢
C<ord($char)%16> => 񥌳
C<ord($char)%2> => 񥌙
C<ord($char)> => 񦍩
C<ord()> => 񹘀
C<ord> => 񹞇
C<origin/blead> => 񦕉
C<origin/maint-5.005> => 񦘸
C<origin> => 񦘨
C<ornaments> => 񘥠
C<our $_> => 򀁁
C<our()> => 򀅐
C<our> => 񸜧
C<overload::Method> => 񙞐
C<overload> => 񠘗
C<owner> => 񰆁
C<p5p> => 񲌩
C<p> => 񵅉
C<pMY_CXT> => 򁑂
C<pMY_CXT_> => 򁑇
C<pRExC_state> => 񵔡
C<pTHX> => 򁑃
C<pTHX_> => 񨑷
C<pack "U3C8", @stuff> => 񨥒
C<pack("  U*", @stuff)> => 񨥹
C<pack("C")> => 񹁂
C<pack("C[80]", @arr)> => 񥉴
C<pack("N", 10, 20, 30, 40)> => 񳁢
C<pack("U", ...)> => 񹘇
C<pack("W")> => 񹀷
C<pack("l! a*", $type, $message)> => 񥄈
C<pack("s!",(0)x$nsem)> => 񥞗
C<pack("s!3", $semnum, $semop, $semflag)> => 񥠆
C<pack('P', $x)> => 񲆐
C<pack()> => 񹘒
C<pack(..., $x)> => 񲆃
C<pack> => 񳑰
C<package Foo 1.2 { ... }> => 񙊁
C<package Foo { ... }> => 񙉹
C<package;> => 񘍓
C<package> => 򀀇
C<pad: 0> => 񘘨
C<pager> => 񘤧
C<param()> => 񣌕
C<param> => 񹐡
C<paren> => 񴔹
C<paren_names> => 񴙕
C<parse> => 񨔳
C<parse_arithexpr()> => 񠀰
C<parse_from_file> => 񡉴
C<parse_fullexpr()> => 񠀧
C<parse_listexpr()> => 񠀨
C<parse_termexpr()> => 񠀩
C<parse_text> => 񲙹
C<pat> => 񨦂
C<patcopy+1> => 񨥶
C<patcopy> => 񨦁
C<pattern> => 񴒒
C<pause> => 񥢆
C<pcb1> => 񘂁
C<peep> => 񩀲
C<perl "-V:startperl"> => 񶜖
C<perl -%c -n> => 񡁀
C<perl -%c scriptname> => 񡁃
C<perl -Dx> => 񨑘
C<perl -Idir> => 񣉇
C<perl -MCGI::Carp -e 1> => 񰎈
C<perl -MConfig -e 'print $Config{cc}'> => 񡕂
C<perl -MFoo -e 1> => 񰎇
C<perl -V:d_mymalloc> => 񷂒
C<perl -V:d_setlocale> => 񩡆
C<perl -V:path_sep> => 񷀲
C<perl -V:usemymalloc> => 񡠴
C<perl -V> => 񸂈
C<perl -c> => 񡀣
C<perl -d:DProf ...> => 񙙣
C<perl -e "print qq(@INC)"> => 񰎙
C<perl -n -%c> => 񡀹
C<perl -x/foo/bar> => 񠔱
C<perl -x> => 񠡵
C<perl Build test> => 񰑷
C<perl Makefile.PL PREFIX=/my/perl_directory> => 񰎕
C<perl Makefile.PL; make test; make dist> => 񰕵
C<perl Makefile.PL> => 򁑴
C<perl Porting/Maintainers -M Module::Name> => 񷉣
C<perl dangerous.pl 'rm -rfv *|'> => 񱜆
C<perl program> => 񶜓
C<perl scriptname> => 񡁁
C<perl's BE<lt>-nE<gt> switch> => 񲑇
C<perl-5.10.0> => 񦖐
C<perl.*> => 񡜹
C<perl.h> => 򁅐
C<perl5-porters@perl.org> => 񵅡
C<perl5.git.perl.org> => 񦙅
C<perl> => 񸒆
C<perl_> => 񡂕
C<perl__> => 񡂖
C<perl_alloc> => 񨔃
C<perl_call_sv> => 񨌃
C<perl_clone> => 񨔄
C<perl_construct> => 򀆐
C<perl_destruct()> => 񡘥
C<perl_destruct> => 񡘳
C<perl_parse()> => 񩁩
C<perl_parse> => 񩀘
C<perl_run()> => 񩁰
C<perl_run> => 񩄀
C<perlapio> => 񘄸
C<perlbench> => 񸐶
C<perldebug(1)> => 񡝥
C<perldoc -MPod::Perldoc::ToChecker> => 񡉵
C<perldoc -f I<functionname>> => 񩍹
C<perldoc -f sort> => 񲌰
C<perldoc -oLaTeX -dtextwrapdocs.tex Text::Wrap> => 񡉥
C<perldoc E<lt>nameE<gt>> => 񹠖
C<perldoc I<Module::Name>> => 񩎀
C<perldoc Win32> => 񳄥
C<perldoc perl> => 񡜧
C<perldoc perldoc> => 񗎆
C<perldoc perlintro> => 񗎅
C<perldoc ppport.h> => 񨕗
C<perldoc> => 񹠔
C<perlfunc> => 񸑓
C<perlio.c> => 񩕉
C<perlio> => 񙦙
C<perlsh> => 񡝰
C<permute()> => 񢆘
C<persistent.pl> => 񡘩
C<pipe()> => 񣄘
C<pipe(Rdr, Wtr)> => 񥢕
C<pipe> => 񳁔
C<plan> => 񙠥
C<plen == 1 && *exp == '^'> => 񴔦
C<plus> => 񘕴
C<pod2man | nroff -man | $PAGER> => 񡈳
C<podselect -s "SYNOPSIS" ...> => 񹠶
C<pointer> => 񨌓
C<pop @_> => 񤈨
C<pop> => 򀁈
C<popen> => 񱞔
C<pos($x) = 10> => 񧌃
C<pos()> => 񹀘
C<pos> => 򀐢
C<post_end> => 񨐳
C<power("puff")> => 񦙥
C<pp_*.c> => 񨘅
C<pp_> => 񩁄
C<pp_add> => 񩅹
C<pp_addr> => 񨘄
C<pp_die> => 񩄕
C<pp_entereval> => 񩂑
C<pp_entersub> => 񩁅
C<pp_entertry> => 񩄇
C<pp_gvsv> => 񩅶
C<pp_leavesub> => 񩁉
C<pp_leavetry> => 񩁐
C<pp_pack> => 񨥢
C<pp_require> => 񩂐
C<pp_sassign> => 񩅰
C<pp_split> => 񴔀
C<pp_tie> => 񩄃
C<pp_unpack> => 񨥠
C<ppm> => 񰐇
C<pprivate> => 񵘣
C<prctl(2)> => 򀄡
C<pre/post_end> => 񨑉
C<pre_> => 񨐲
C<precomp> => 񵘩
C<prefix1> => 񠞅
C<pregcomp()> => 񵔗
C<pregexec()> => 񵖕
C<prelen> => 񴙓
C<print "Hello, world."> => 񘈤
C<print $fh //> => 񱊆
C<print $fh(//> => 񱊇
C<print $test ? "ok 42\n" : "not ok 42\n"> => 񨙧
C<print $y> => 񩌔
C<print 0x..., "\n"> => 񹝓
C<print @AoA> => 񡍔
C<print FILEHANDLE sprintf(FORMAT, LIST)> => 񥔨
C<print STDOUT "$foo\n";> => 񧆗
C<print if /$regexp/;> => 񵤆
C<print ref($object)> => 񢤵
C<print {$DB::OUT} expr> => 񘝥
C<print($fh //> => 񱊈
C<print()> => 񸍅
C<print(1/7)> => 񰀸
C<print> => 񷅔
C<printf "%s", $value> => 񰙄
C<printf "%x\n", $decimal> => 񹝔
C<printf()> => 񸢒
C<printf(3)> => 񥥨
C<printf(fmt,...)> => 񗒃
C<printf> => 񳆖
C<program> => 񵘴
C<program_name> => 񘝖
C<programming> => 񶈐
C<prototype> => 񷙲
C<ps> => 򀄉
C<psh> => 񡝧
C<pthreads> => 񸅶
C<ptkdb> => 񡞇
C<ptr> => 񩔧
C<ptrdiff_t> => 񙌱
C<punct> => 񶐵
C<push()> => 񷖒
C<push(@tied_array,())> => 񡄗
C<push(@x)> => 񡄕
C<push> => 򀁇
C<pv/pvs/sv> => 񠁦
C<pv_escape> => 񠂗
C<pv_uni_display(dsv, spv, len, pvlim, flags)> => 񹎗
C<pwd_mkdb(8)> => 񣁓
C<q #foo#> => 񱄑
C<q#foo#> => 񱄉
C<q()> => 񱐸
C<q//> => 񱔄
C<q> => 񱥹
C<qq()> => 񸥈
C<qq//> => 񱘂
C<qq/\c\/> => 񱒒
C<qq[]> => 񱑖
C<qq\\> => 񱑩
C<qq]]> => 񱑗
C<qq{\x{30ab}} =~ /\xab|\xa9/> => 񠆃
C<qr!!> => 񶑢
C<qr''> => 񶑥
C<qr/$a$b/> => 񴞇
C<qr//> => 񶑗
C<qr//i> => 񹚒
C<qr/eek/> => 񴙤
C<qr/hlagh/i> => 񙈡
C<qr/pattern/msixpodual> => 񵞆
C<qr/string/> => 񶑘
C<qr> => 񠤗
C<qr{}> => 񶑣
C<qr~~> => 񶑤
C<query_form> => 񣊈
C<quote> => 񙀅
C<quotemeta("\t")> => 񱕕
C<quotemeta> => 񹍕
C<qw(...)> => 񡅑
C<qw//> => 񧑩
C<qw/STRING/> => 񰤡
C<qw> => 񱐀
C<qx//> => 񷚐
C<qx/EXPR/> => 񥘨
C<qx> => 񹌥
C<r> => 񶅦
C<raise()> => 񳍠
C<rand($x)> => 񡥓
C<rand()> => 񸈔
C<rand> => 񦀲
C<random_int_between(50,120)> => 񡥖
C<re '/flags'> => 񶘄
C<re 'debug'> => 򀒖
C<re 'eval'> => 񠙧
C<re/"'/flags' mode"> => 񶘅
C<re::regname> => 񴖂
C<re::regnames> => 񴖃
C<re::regnames_count> => 񴖄
C<re> => 񢚆
C<re_intuit_start()> => 񵘱
C<read()> => 񹙣
C<read> => 񸍒
C<readdir()> => 񸈓
C<readdir> => 񷈀
C<readline HANDLE> => 񸍖
C<readline($x)> => 񱜗
C<readline()> => 򀔷
C<readline(*FILEHANDLE)> => 񱚙
C<readline> => 񸍗
C<readlink()> => 񷅉
C<readlink> => 񲦕
C<readpipe> => 񷚈
C<recallCommand> => 񘤢
C<recv> => 񣠡
C<redo IE<lt>LABELE<gt>> => 񲑂
C<redo> => 񸁤
C<ref qr//> => 񴖑
C<ref(qr/x/)> => 񱉁
C<ref> => 񵐴
C<refcnt> => 񴙰
C<refspec> => 񦘖
C<reg()> => 񵔹
C<reg_try()> => 񵖒
C<regarglen[]> => 񵒆
C<regatom()> => 񵔶
C<regbranch()> => 񵕒
C<regcomp> => 񴙐
C<regex> => 񵝉
C<regexp> => 񶒗
C<regexp_internal> => 񵘐
C<regexp_paren_ofs> => 񵘦
C<regexp_paren_pair> => 񴘹
C<register_fatal> => 񘂃
C<regmatch()> => 񵖙
C<regmatch> => 񵘀
C<regmatch_info> => 񵖘
C<regnext()> => 񵔆
C<regnext> => 񵕦
C<regnode> => 񵒔
C<regnode_1> => 񵔅
C<regnode_2> => 񵑸
C<regnode_charclass> => 񵒂
C<regnode_charclass_class> => 񵒄
C<regnode_string> => 񵒀
C<regpiece()> => 񵕓
C<regstclass> => 񵘰
C<regtail()> => 񵕄
C<regtail> => 񵕁
C<regtry()> => 񵖗
C<rel2abs> => 񣈹
C<rememberSub> => 񘁃
C<remove_tree> => 񢖔
C<rename()> => 񢑸
C<rename> => 񳀨
C<replacement> => 񶌔
C<require 'file'> => 񡀄
C<require 'syscall.ph'> => 񹡸
C<require 5.6.1> => 񰑳
C<require FILE> => 񰊔
C<require Foo::Bar> => 񷚃
C<require Module> => 񰍅
C<require VERSION> => 򀝲
C<require> => 򀞑
C<reset> => 񣝩
C<resolve> => 񰒙
C<retrieve> => 񢌘
C<return> => 򁌂
C<return_count> => 񢢈
C<reverse()> => 񢁀
C<reverse> => 񩌦
C<rewinddir> => 񥈸
C<richard> => 񰈣
C<right> => 񩉗
C<rindex()> => 񹀠
C<rindex> => 񣘄
C<rl> => 񩉙
C<rm -rf> => 񥜴
C<rm> => 񱜈
C<rmdir> => 񦍙
C<rmexit()> => 񣂓
C<rmtree> => 񥜵
C<roffitall> => 񹡃
C<rp> => 񡍳
C<rpcb_> => 򁆈
C<rpcb_gettime()> => 򁍴
C<rpcb_gettime(host, &timep)> => 򁍷
C<rpctest.pl> => 򁑔
C<rsignal(signo, handler)> => 񘅱
C<run_body> => 񩄤
C<runops_standard> => 񩀴
C<rv2cv> => 񸕀
C<rv> => 񨀄
C<rwxr-x---> => 񦌓
C<s!!!> => 񶍃
C<s'$lhs'$rhs'> => 񸤈
C<s'''> => 񶍆
C<s(){}> => 񱑹
C<s(foo)(bar)> => 񱍠
C<s*foo*bar*> => 񱘰
C<s/$regexp/$replacement/g> => 񶌰
C<s/(PAT1) PAT2/${1}REPL/x> => 񴡕
C<s/.$//s> => 񤉩
C<s///> => 򀀨
C<s///e> => 񶍀
C<s///eg> => 񱐶
C<s///g> => 񶌧
C<s///le> => 񱍨
C<s///r> => 񶌷
C<s//pos() = 5/e> => 񥔑
C<s/PAT1 \K PAT2/REPL/x> => 񴡔
C<s/RE/foo/> => 񱖇
C<s/bob/robert/g> => 񡘇
C<s/foo/bar> => 񹡗
C<s/n/t expression> => 񙁉
C<s/pattern/replacement/msixpogcedual> => 񵞈
C<s/regex/replacement/modifiers> => 񵝇
C<s/regexp/replacement/modifiers> => 񶌓
C<s1> => 񹍒
C<s2> => 񹍓
C<s> => 񹎕
C<sS> => 񳘲
C<sSlLqQ> => 񱦅
C<s`lhs`rhs`> => 񸤠
C<safe> => 񷄢
C<sarg> => 񨉱
C<sassign> => 񩅩
C<save_freeop> => 񠁳
C<save_item> => 񨉰
C<save_op> => 񠁴
C<save_pushi32ptr> => 񠁵
C<save_pushptrptr> => 񠁶
C<save_scalar> => 񨉵
C<save_svref> => 񨉹
C<saved_copy> => 񴙙
C<savepvn> => 񨁩
C<say LIST> => 񥝀
C<say()> => 񸍇
C<say> => 񣚀
C<says> => 񗘨
C<scalar @array> => 񤦗
C<scalar @matches> => 񶑳
C<scalar keys %hash> => 񤦘
C<scalar reverse()> => 񹁙
C<scalar(%hash)> => 񸎗
C<scalar(@array)> => 񸉣
C<scalar(keys(%hash))> => 񸎘
C<scalar(values(%hash)> => 񸎙
C<scalar> => 񸌠
C<scan_data_t> => 񵖁
C<schomp> => 񠅕
C<schop> => 񠅔
C<section> => 񲑣
C<seek()> => 򀔹
C<seek(FH, 0, 2)> => 񢠤
C<seek(GWFILE, 0, 1)> => 񢕓
C<seek> => 񲥡
C<seekdir> => 񦉕
C<seen_evals> => 񴙨
C<select FILEHANDLE> => 񳍳
C<select()> => 򁀃
C<select> => 򁀂
C<semctl> => 񣦉
C<semget> => 񣦐
C<semop> => 񣦑
C<send> => 񣠢
C<sendemail.smtppass> => 񦕱
C<sendmail> => 񣍆
C<set time> => 񣁖
C<setenv()> => 򁂈
C<setgrent> => 񣦒
C<setgroups()> => 򀂇
C<sethostent> => 񣦓
C<setitimer> => 񠍸
C<setjmp()> => 񩁙
C<setjmp> => 񣂅
C<setnetent> => 񣦔
C<setpgrp(0,0)> => 񥠦
C<setpgrp> => 񥠥
C<setpriority> => 񣦖
C<setprotoent> => 񣦗
C<setpwent> => 񣦘
C<setregid()> => 򀂗
C<setreuid()> => 򀅁
C<setservent> => 񣦙
C<setsockopt> => 񤀀
C<sfio> => 񦅙
C<sh -x> => 񶠙
C<sh(1)> => 񣅀
C<sh> => 񠤧
C<shift @_> => 񤈦
C<shift()> => 񷔶
C<shift(@f)> => 񣑹
C<shift> => 򀁉
C<shmctl> => 񤀁
C<shmget> => 񤀂
C<shmid_ds> => 񥡔
C<shmread()> => 񷅐
C<shmread> => 񤀃
C<shmwrite> => 񤀄
C<short> => 񲅁
C<shutdown> => 񣠤
C<sig('TERM', ...)> => 񣐲
C<sigaction()> => 򀉩
C<sigaction> => 񸕗
C<siginfo_t> => 񸕡
C<signal> => 񘅩
C<signalLevel> => 񘤳
C<simon@cpan.org> => 񰖂
C<simple_grep> => 񶑨
C<simple_replace> => 񶌦
C<sin> => 񰙀
C<site> => 񙔖
C<size regnode> => 񵒇
C<size> => 񘕐
C<size_t> => 񙌰
C<sizeof (foo_t)> => 񲅠
C<sizeof(char1) == sizeof(char2)> => 񵘂
C<sizeof(int)> => 񱦃
C<sizeof> => 񱤕
C<skud@cpan.org> => 񰖃
C<sleep()> => 񸆔
C<sleep> => 񥢂
C<sockaddr_in()> => 񳁧
C<socket> => 񤕷
C<socketpair> => 񥢔
C<some systems provide a BE<lt>chfnE<gt> for that> => 񲑈
C<some_function()> => 񷑈
C<sort LIST> => 񥤐
C<sort()> => 򀅔
C<sort> => 񳆘
C<sound> => 񗞉
C<source> => 񨌣
C<space> => 񶐶
C<speak> => 񗠐
C<splice @ISA> => 񠉱
C<splice()> => 񸠶
C<splice> => 񸊐
C<splint> => 񨡥
C<split " "> => 񴔣
C<split ' '> => 񸡈
C<split //> => 񴔰
C<split /\s+/> => 񸡉
C<split /regex/, string> => 񵝩
C<split /regexp/, string, limit> => 񶍉
C<split(' ')> => 񥥗
C<split(' ', $_)> => 񴔗
C<split()> => 񸡗
C<split(/ /)> => 񥥔
C<split(/,/)> => 񢁩
C<split> => 񸥗
C<sprintf "%u", -1> => 񰘔
C<sprintf "%u", ~0> => 񰘕
C<sprintf("%g", $zero) =~ /^-/> => 񙑗
C<sprintf("%hhd", 257)> => 񙌳
C<sprintf()> => 򀌤
C<sprintf(3)> => 񥥧
C<sprintf> => 񳆙
C<sqrt($int)> => 񙝖
C<sqrt(2)> => 񱝃
C<sqrt> => 񣘵
C<srand($seed)> => 񦀶
C<srand()> => 񸈕
C<srand(42)> => 񦁆
C<srand(42.1)> => 񦁇
C<srand> => 񦁈
C<ss> => 񵄕
C<st_dev> => 򁀄
C<st_ino> => 򁀅
C<start> => 񨑐
C<start_multipart_form()> => 񣉹
C<startform()> => 񣊀
C<stash> => 񧦗
C<stat _> => 񤂐
C<stat()> => 򀤩
C<stat> => 򀤶
C<state $a = 42> => 񠜑
C<state $x = 42> => 񷑹
C<state ($a) = 42> => 񠜐
C<state ($a) = foo();> => 񸘃
C<state (@a) = foo()> => 񠜒
C<state> => 񷑸
C<static> => 򁎅
C<stclass> => 񘕨
C<stderr> => 񱚓
C<stdin> => 񱚑
C<stdio> => 񩘖
C<stdout> => 񱚒
C<store> => 񢌗
C<story> => 򁁷
C<str_len> => 񵒉
C<strerror> => 񨁈
C<strftime()> => 񡥧
C<strict 'refs'> => 񢥦
C<strict 'vars'> => 򀆇
C<strict refs> => 񶥥
C<strict> => 񹌙
C<string> => 񶑙
C<stringify> => 񘥨
C<strlen> => 񧡨
C<struct gp> => 񸔳
C<struct magic> => 񸔴
C<struct netconfig> => 򁐠
C<struct refcounted_he *> => 񠄄
C<struct siginfo_t> => 񸕣
C<struct stat> => 򁀆
C<struct xpvhv> => 񙔹
C<struct> => 񲅉
C<study> => 񦂁
C<study_chunk()> => 񵖈
C<sub : ATTRLIST> => 񷜠
C<sub CLONE_SKIP { 1 }> => 񰍲
C<sub _> => 񰆗
C<sub foo : locked method> => 񦜶
C<sub myname ($)> => 񷝠
C<sub name> => 񷝖
C<sub {}> => 񵉕
C<sub1()> => 񸄨
C<sub2()> => 񸄩
C<sub> => 񷘇
C<subbeg> => 񴙗
C<sublen> => 񴙘
C<subname> => 񘑸
C<substr $_, $-[$#-], $+[$#-] - $-[$#-]> => 򀑗
C<substr $_, $-[0], $+[0] - $-[0]> => 򀑓
C<substr $_, $-[n], $+[n] - $-[n]> => 򀑕
C<substr($string, 0, -1)> => 񤉳
C<substr($var, $+[0])> => 򀑴
C<substr($var, $-[0], $+[0] - $-[0])> => 򀑲
C<substr($var, $-[1], $+[1] - $-[1])> => 򀑶
C<substr($var, $-[2], $+[2] - $-[2])> => 򀑸
C<substr($var, $-[3], $+[3] - $-[3])> => 򀒀
C<substr($var, 0, $-[0])> => 򀑰
C<substr()> => 񹘡
C<substr> => 񹠁
C<substrs> => 񴙖
C<subtract_off> => 򁌵
C<subversion> => 񲈁
C<sub{}> => 񷥈
C<surrogate> => 񙈒
C<sv> => 񴕐
C<sv_2mortal()> => 񰔅
C<sv_2mortal> => 񨈘
C<sv_2nv> => 񨡖
C<sv_any> => 񩎘
C<sv_cat*()> => 񨅕
C<sv_cat*_mg()> => 񨅒
C<sv_catpvf> => 񘅈
C<sv_catpvn> => 񩄹
C<sv_catsv_flags> => 񠍖
C<sv_chop> => 񧢐
C<sv_compile_2op> => 񠄢
C<sv_dump> => 񨑕
C<sv_gets()> => 񩐣
C<sv_gets> => 񘅂
C<sv_grow> => 񧡣
C<sv_len_utf8(sv)> => 񹍵
C<sv_magic> => 񨂗
C<sv_magicext> => 񨂔
C<sv_mortalcopy> => 񨀨
C<sv_newmortal> => 񨀘
C<sv_set*()> => 񨅇
C<sv_set*_mg()> => 񨅑
C<sv_set*v> => 񨁒
C<sv_setiv> => 񨒅
C<sv_setiv_mg> => 񨕑
C<sv_setpv> => 񨁔
C<sv_setpvf> => 񧡇
C<sv_setpvn> => 񴕒
C<sv_setsv> => 񴕑
C<sv_uni_display(dsv, ssv, pvlim, flags)> => 񹎘
C<sv_unmagic> => 񨄃
C<sv_unmagicext()> => 񠂄
C<sv_unmagicext> => 񨄇
C<sv_utf8_decode()> => 񹎀
C<sv_utf8_downgrade()> => 񹎄
C<sv_utf8_downgrade(sv)> => 񹍷
C<sv_utf8_encode()> => 񹎁
C<sv_utf8_encode(sv)> => 񹍸
C<sv_utf8_upgrade()> => 񹎃
C<sv_utf8_upgrade(sv)> => 񹍶
C<sv_vcatpvfn> => 񘅉
C<sv_vsetpvfn> => 񧡉
C<sva> => 񗦙
C<svb> => 񘀀
C<swap> => 񵘥
C<switch> => 񷥠
C<symlink> => 񲦔
C<sys$getuai> => 򀦁
C<sys$hash_password> => 򀥄
C<sys_errlist[]> => 񨁉
C<syscall(&SYS_pipe)> => 񦄥
C<syscall()> => 񣂕
C<syscall> => 񲅨
C<sysopen()> => 񱡠
C<sysopen(FH,...,O_APPEND|O_RDWR)> => 񳐂
C<sysopen> => 񳀓
C<sysread())> => 񦈱
C<sysread()> => 񹙦
C<sysread> => 򀕡
C<sysseek()> => 񹙧
C<sysseek(FH, 0, 1)> => 񦉒
C<sysseek> => 񦆔
C<systell> => 񦉑
C<system PROGRAM LIST> => 񦈓
C<system("cmd&")> => 񣀹
C<system("prog &")> => 񣁃
C<system('rm -rf *');> => 񶖄
C<system()> => 򁀧
C<system(1, ...)> => 񳐆
C<system(1, @args)> => 񳎉
C<system(@LIST)> => 񱠄
C<system> => 򁀘
C<syswrite> => 񸍀
C<s{}//> => 񶍅
C<s{}{}> => 񶍄
C<s|(.)|@a{ print($1), /./ }|g> => 񠆀
C<t/*/*> => 򀡰
C<t> => 񙂃
C<tail -f> => 񥝱
C<tail: 6144> => 񘘱
C<taint> => 񶘂
C<tainted()> => 񷅢
C<tar -xof yourmodule.tar> => 񰐂
C<tcgetattr> => 񣀤
C<tell()> => 򀔸
C<tell> => 񳌄
C<telldir> => 񦉖
C<term> => 񩈒
C<test> => 񸠑
C<text:> => 񢈦
C<text> => 񲑡
C<textsize> => 񡊃
C<the LE<lt>Foo::Bar|Foo::BarE<gt> documentation> => 񲕱
C<the LE<lt>fooE<gt> documentation> => 񲕰
C<thing> => 񲙶
C<this|that|other> => 񡀗
C<thousands_sep> => 񩤰
C<threads-E<gt>create()> => 񸄐
C<threads-E<gt>list()> => 񸆐
C<threads-E<gt>self()> => 񸆃
C<threads-E<gt>tid()> => 񸆅
C<threads::shared> => 񩜠
C<threads> => 񲈠
C<tid()> => 񸆄
C<tie $handle> => 񸌷
C<tie *$handle> => 񡅅
C<tie()> => 񢉡
C<tie> => 񸥒
C<tied> => 񤐢
C<time ^ $$> => 񦁐
C<time() + 86_400> => 񣕴
C<time()> => 񷘣
C<time+86_400> => 񣕳
C<time> => 򁀡
C<time_t*> => 򁍰
C<time_t> => 򁍱
C<timelocal> => 񡥵
C<timep> => 򁍩
C<times()> => 򁀤
C<times> => 򁀢
C<tkRunning> => 񘤱
C<tlen> => 񩅆
C<tolower()> => 񤦆
C<tr'''> => 񱔑
C<tr(+\-*/)/ABCD/> => 񱐗
C<tr)))> => 񱑵
C<tr///> => 򀀩
C<tr///CU> => 񹀐
C<tr///r> => 񡅧
C<tr/A-J/0-9/> => 񱐑
C<tr/ACEGIBDFHJ/0246813579/> => 񱐒
C<tr/a-y//> => 񠑖
C<tr/a-z-0//> => 񠑕
C<tr> => 񲈰
C<tr[A-Z][a-z]> => 񱐖
C<tr[]//> => 񱒀
C<tr\\\> => 񱑰
C<truncate> => 񤀓
C<tr|/.|./|;> => 񳈘
C<type> => 񱎕
C<typedef> => 򁐆
C<typemap> => 򁑒
C<typeof> => 񥙔
C<tzname> => 񨊒
C<u63> => 񠙹
C<u> => 񵁢
C<uc()> => 񹌱
C<uc(0x11_0000)> => 񹌓
C<uc> => 񴜸
C<ucfirst()> => 񹌲
C<ucfirst> => 񹉨
C<uf_index> => 񨄨
C<uf_set> => 񨄧
C<uf_val> => 񨄦
C<ufuncs> => 񨄲
C<ulimit -a> => 񠤈
C<ulimit -d n> => 񠤉
C<umask()> => 񸈃
C<umask> => 񳐃
C<uname -a> => 񳄁
C<undef $hash{$key}> => 񦍇
C<undef %Some::Package::> => 񠖑
C<undef %hash> => 񤥂
C<undef *Foo::> => 񠈴
C<undef *Foo::ISA> => 񠈹
C<undef *foo> => 񸢅
C<undef> => 򁎖
C<undefPrint> => 񙀁
C<ungetc()> => 񩔒
C<ungetc> => 񤔵
C<unicode_strings> => 񹌨
C<unimport Module LIST> => 񦐣
C<unimport> => 񷚙
C<union> => 񲄷
C<uniq> => 񢅇
C<unix> => 񷁸
C<unixify("[...]")> => 򀡔
C<unless> => 񸀘
C<unlink()> => 񲙴
C<unlink> => 򁀹
C<unlock()> => 񸅆
C<unpack( 'Z* Z* C')> => 񲂒
C<unpack("%2H", ...)> => 񠍁
C<unpack("%2u", ...)> => 񠍂
C<unpack("C")> => 񹁃
C<unpack("C*", ...> => 񹙹
C<unpack("U*", ...)> => 񹜵
C<unpack("U0..", ...)> => 񹚀
C<unpack("W")> => 񹀸
C<unpack("f", pack("f", $foo)> => 񥐨
C<unpack("l! a*")> => 񥄃
C<unpack()> => 񹀧
C<unpack> => 񹜳
C<unsafe> => 񷄡
C<unshift(@foo)> => 񡄖
C<unshift> => 򀁐
C<unsigned long> => 񱦈
C<untie $scalar> => 񙐦
C<untie *$scalar> => 񙐧
C<untie> => 񸎐
C<until> => 񷢖
C<up()> => 񸅲
C<upcase()> => 񷍵
C<upcase_in()> => 񷍲
C<upper> => 񶐷
C<uri_escape> => 񣊙
C<uri_unescape> => 񣌀
C<use "/my/perl_directory";> => 񰎘
C<use 5.012> => 񹜢
C<use 5.12.0> => 񠆙
C<use AutoLoader 'AUTOLOAD';> => 񡅀
C<use AutoLoader; @ISA = qw(AutoLoader);> => 񡄸
C<use AutoLoader;> => 񡄹
C<use Config> => 򁀱
C<use Devel::DProf> => 񙙢
C<use Devel::foo 'bar'> => 񙍃
C<use Encode> => 񹎂
C<use English> => 򀍤
C<use Filter::cpp> => 񣍴
C<use I<Module::Name>> => 񩎁
C<use I<VERSION>> => 񠐒
C<use L<re>> => 񱝤
C<use Module ()> => 񰍄
C<use Module n.n LIST> => 񡆀
C<use Net::Acme qw(&frob)> => 񰕗
C<use Net::Acme> => 񰕠
C<use O 'Deparse'> => 񘈠
C<use POSIX> => 񰍕
C<use Socket;> => 񣉒
C<use Socket> => 񥢈
C<use VERSION> => 򀝱
C<use attributes> => 񷜗
C<use attrs> => 񷜙
C<use base> => 񗙧
C<use bigrat> => 񙝗
C<use bytes> => 񹒑
C<use charnames> => 񴜆
C<use constant> => 񰉁
C<use customre> => 񴑄
C<use diagnostics> => 񷊁
C<use encoding> => 񹒒
C<use extension;> => 򁒈
C<use feature "state"> => 񦁶
C<use feature ':5.12'> => 񹑷
C<use feature ':5.12.0'> => 񠈂
C<use feature 'unicode_strings'> => 񹜡
C<use feature 'unicode_strings> => 񳘴
C<use filetest 'access'> => 񤁩
C<use filetest> => 񡀠
C<use integer; ~0> => 񱝉
C<use integer;> => 񳑉
C<use integer> => 񱝕
C<use lib "/my/perl_directory";> => 񰐃
C<use lib "/my/perl_directory/lib/site_perl";> => 񰎗
C<use lib> => 򀈣
C<use locale;> => 񢙑
C<use locale> => 񸥷
C<use module split(/,/,q{foo,bar})> => 񶤱
C<use mro 'foo'> => 񠝂
C<use myint;> => 񳑘
C<use open ':encoding(utf8)'> => 񹙩
C<use open> => 񹒔
C<use overload> => 񢤇
C<use re '/a'> => 񳙲
C<use re '/aa'> => 񳙳
C<use re '/flags'> => 񙠆
C<use re '/m'> => 񠝤
C<use re 'debug'> => 񢚄
C<use re 'eval';> => 񶖙
C<use re 'eval'> => 񶖆
C<use re;> => 񡄔
C<use re> => 񳥐
C<use sigtrap> => 񷊀
C<use strict 'refs'> => 񵑃
C<use strict 'vars'> => 򀈉
C<use strict refs> => 񗘥
C<use strict;> => 񸤵
C<use strict> => 򀈄
C<use subs> => 񹉤
C<use threads::shared> => 񥁄
C<use threads;> => 񸄇
C<use utf8;> => 񸥥
C<use utf8> => 񹖀
C<use vars> => 򀅉
C<use vmsish 'exit'> => 񳌗
C<use vmsish 'status'> => 򁄧
C<use warnings 'File::Find'> => 񡂐
C<use warnings 'unopened'> => 񠅙
C<use warnings 'untie'> => 񸎇
C<use warnings;> => 񩊃
C<use warnings> => 򀚑
C<use5005threads=define> => 񸂑
C<use64bitall> => 񙦇
C<use> => 򁒉
C<useithreads=define> => 񸂐
C<useperlio=> => 񥈇
C<useperlio=define> => 񹖕
C<useperlio> => 񥈈
C<users.perl5.git.perl.org> => 񦙇
C<utf-8-strict> => 񹔗
C<utf8.h> => 񨞖
C<utf8::ToSpecI<Foo>> => 񹑢
C<utf8::encode()> => 񹉗
C<utf8::is_utf8()> => 񹚃
C<utf8::upgrade($string)> => 񹒀
C<utf8::upgrade()> => 񹉡
C<utf8> => 񹔔
C<utf8_distance(a, b)> => 񹎒
C<utf8_hop()> => 񹎖
C<utf8_hop(s, off)> => 񹎓
C<utf8_hop> => 񨕰
C<utf8_length(start, end)> => 񹍴
C<utf8_to_bytes> => 񨖆
C<utf8_to_uv> => 񨖉
C<utf8_to_uvchr(buf, lenp)> => 񹍳
C<utf8n_to_uvuni> => 񠄒
C<utfebcdic.h> => 񨞗
C<utfebcdic> => 񹌠
C<utime> => 񤀖
C<uv> => 񨖒
C<uv_to_utf8> => 񨖔
C<uvchr_to_utf8(buf, chr)> => 񹍲
C<uvuni_to_utf8_flags> => 񠄑
C<v1.20.300.4000> => 񧠅
C<v10.20.30.40> => 񳁣
C<v194.128> => 񨕥
C<v194.191> => 񨕦
C<v195.128> => 񨕨
C<v196.172> => 񨕴
C<v65.66> => 񘍁
C<v65> => 񘍀
C<v> => 񲀈
C<val> => 񩉃
C<value> => 񴕗
C<values %orbits> => 񢆇
C<values @array> => 񦑉
C<values()> => 񩌂
C<values> => 򁂗
C<vbuf> => 񩔓
C<vec($read,$n,1)> => 񢅗
C<vec()> => 񹙸
C<vec> => 񦑴
C<vendor> => 񙔕
C<version::vxs::*> => 񙠈
C<version> => 򀌠
C<veryCompact> => 񘦇
C<vfork()> => 򀥵
C<vi> => 񘥑
C<vmsfopen> => 򀥂
C<void (*Perl_cpeep_t)(aTHX_ OP *o, OP *oldop)> => 񨘢
C<void *> => 񲅡
C<void bhk_eval(pTHX_ OP *const o)> => 񨐴
C<void bhk_post_end(pTHX_ OP **o)> => 񨐰
C<void bhk_pre_end(pTHX_ OP **o)> => 񨐨
C<void bhk_start(pTHX_ int full)> => 񨐘
C<void save_aptr(AV **aptr)> => 񨉷
C<void save_hptr(HV **hptr)> => 񨉸
C<void save_item(SV *item)> => 񨉢
C<void save_list(SV **sarg, I32 maxsarg)> => 񨉩
C<void> => 򁊕
C<vsprintf> => 񧡰
C<vtbl_sv> => 񨄓
C<w> => 񲁢
C<wait()> => 򀜦
C<wait(2)> => 򀙄
C<wait> => 򀙈
C<waitpid()> => 򀜤
C<waitpid> => 򁁄
C<wantarray()> => 񦒙
C<wantarray> => 񥜖
C<warn ""> => 񡆂
C<warn if DEBUG> => 񙕓
C<warn()> => 񸤩
C<warn> => 񲜕
C<warnLevel> => 񘤴
C<warnings.pl> => 񸖅
C<warnings::enabled> => 񩠦
C<warnings::register> => 񩠕
C<warnings::warn> => 񩠤
C<warnings::warnif> => 񩠥
C<warnings> => 򀚒
C<wc> => 񢎐
C<whatever(...)> => 񨔤
C<when (scalar) {...}> => 񠆓
C<when()> => 񸁃
C<when(1 == 1)> => 񸀅
C<when(EXPR)> => 񷥦
C<when> => 񸀵
C<which $scriptname> => 񙅁
C<while()> => 񸀹
C<while/if BLOCK BLOCK> => 񸠹
C<while> => 򀀷
C<who> => 񘌣
C<win32/win32.c> => 񸔨
C<win32/wince.c> => 񸔧
C<win32> => 񷁹
C<windowSize> => 񘥵
C<with eval> => 񘕸
C<word> => 񶐹
C<wordmatch> => 񲉆
C<world> => 񵢇
C<wraplen> => 񴙡
C<wrapped> => 񴙠
C<write()> => 򀖆
C<write(2)> => 񢒗
C<write> => 񷁰
C<www.W3.org> => 񲜦
C<x!N> => 񲅑
C<x![d]> => 񥊕
C<x+y> => 񘕵
C<x6> => 񱥢
C<x> => 񵥆
C<x[L]> => 񥊓
C<x_gettime()> => 򁍖
C<xdigit> => 񶐸
C<xhv_fill> => 񙔷
C<xop_class> => 񠁐
C<xop_peep> => 񠁒
C<xor> => 񢠸
C<xsubpp> => 򁑕
C<xterm> => 򀡷
C<y WITH DIAERESIS> => 񡒆
C<y'''> => 񱔒
C<y///> => 򀀰
C<y///r> => 񡅨
C<y> => 񱐔
C<yes-pattern> => 񴐶
C<yes-regexp> => 񶕀
C<yield()> => 񸆂
C<yylex> => 񩀦
C<yyparse> => 񩀢
C<z> => 񵕩
C<zh__big5han> => 񙡆
C<zh__gb2312han> => 񙡈
C<zh__pinyin> => 񙡒
C<zh__stroke> => 񙡔
C<{ ... }> => 񸐵
C<{ ITEMS }> => 񵍘
C<{ local $\ = "\n"; print LIST }> => 񥝁
C<{ package Foo; ... }> => 񙊀
C<{"foo"}> => 񵊓
C<{$reference}> => 񵍩
C<{$table{$country}}> => 񵐑
C<{,n}> => 񵠁
C<{...}> => 񵀆
C<{0,1}> => 񳜨
C<{0,5}> => 񴊘
C<{0,}> => 񳜦
C<{1,}> => 񳜧
C<{3}> => 񳖃
C<{5,}> => 񳖄
C<{;> => 񵉆
C<{> => 򀀓
C<{ARRAY}> => 񸉕
C<{ELEMSIZE}> => 񸉔
C<{LIST}> => 񸌕
C<{n,m}> => 񶈩
C<{n,m}?> => 񶑸
C<{n,}?> => 񶑹
C<{print $2}> => 񹡑
C<{}> => 򀔅
C<{}?> => 񶆉
C<|-> => 񳍨
C<|> => 򁌸
C<|dbcmd> => 񘤃
C<|visual_perl_db> => 񘥐
C<|| die $!> => 񱡐
C<||> => 񷝣
C<}> => 򁁒
C<~ | & ^> => 񱜲
C<~($x&$y) eq ~$x|~$y> => 񹁉
C<~($x|$y) eq ~$x&~$y> => 񹁈
C<~0> => 񱝈
C<~> => 񹙷
C<~pattern> => 񘞂
C<~~> => 񸘆
F<"rsh cat file |"> => 񥈤
F<"stuff"> => 񱎅
F<$(CCHOME)> => 񙥰
F<$(CCHOME)\mingw\include> => 񙥨
F<$Config{sitelib}/sitecustomize.pl> => 񶠷
F<*roff> => 񹡅
F<./.perldb> => 񘔇
F<./> => 񙜓
F<./perl> => 񨜲
F<.COM> => 񳅁
F<.Exe> => 򁀑
F<.al> => 񰍓
F<.c> => 񰑑
F<.com> => 򀢖
F<.cshrc> => 񡜑
F<.dir> => 򁄶
F<.exrc> => 񡠖
F<.foorc> => 񲤃
F<.gcov> => 񸑧
F<.git/config> => 񦘠
F<.h> => 񹢁
F<.ircrc> => 񡜒
F<.pag> => 񤍴
F<.perldb> => 񙂘
F<.ph> => 񹡹
F<.pl> => 򀢕
F<.pm> => 򀞗
F<.pmc> => 񥚐
F<.sdbm_dir> => 򁄴
F<.signature> => 񩘷
F<.so> => 񰍒
F<.tar.gz> => 񰑅
F<.xs> => 򀞓
F</> => 񥚂
F</bin/csh> => 񤠧
F</bin/sh> => 񶥨
F</cdrom/install> => 򀙂
F</dev/null> => 񩙆
F</dev/tty> => 񩙇
F</dev/ttyXX> => 񙁄
F</dev/urandom> => 񦀸
F</etc/motd> => 񷕩
F</etc/passwd> => 񳀈
F</etc/resolv.conf> => 񳀆
F</etc/sendmail.conf> => 񳀅
F</etc/termcap> => 񷢒
F</etc/utmp> => 񤜷
F</foo/test> => 񰝒
F</mydir/perl/lib/perl5> => 񣈱
F</proc/self/exe> => 򀍀
F</tmp/> => 񳀇
F</unicore/SpecialCasing.txt> => 񹉒
F</unicore/To/> => 񹉉
F</usr/bin/objformat> => 񙦄
F</usr/bin/perl> => 񶜥
F</usr/local/bin/perl> => 񶜦
F</usr/local/lib/perl> => 򀈠
F</usr/nls/locale> => 񡒕
F<02_mymeta.t> => 񠍳
F<0> => 񱜣
F<18_all_from.t> => 񠍴
F<19_authors.t> => 񠍵
F<20_authors_with_special_characters.t> => 񠍶
F<::> => 񥚁
F<< <sys/ioctl.h> >> => 񣔢
F<A.;5> => 񳅒
F<AUTHORS> => 񸐖
F<Artistic> => 񠎑
F<C:*.pl> => 񙜔
F<C:\MSYS\bin> => 񠀖
F<C:\dir\/file> => 񙜡
F<CPAN.pm> => 򁑤
F<Changes> => 񠎈
F<Config.pm> => 񨥄
F<Config> => 񸕶
F<Config_heavy.pl> => 񠀔
F<Configure> => 񸔇
F<Copying> => 񠎒
F<Cross/README> => 񷉲
F<Cross> => 񷉱
F<Crypt> => 񤍒
F<DCL$PATH> => 񶜕
F<Descrip.MMS> => 򀠗
F<Devel::DProf> => 񹢘
F<Dotfiles.pm> => 񸌈
F<ExtUtils-MakeMaker-6.57_05> => 񠍱
F<Foo/Bar.pm> => 񥚒
F<Foo::Bar> => 񥚆
F<INSTALL> => 򀉃
F<LNM$FILE_DEV> => 򁁩
F<MANIFEST> => 񷉵
F<META.json> => 񙝱
F<META.yml)> => 񙕧
F<META.yml> => 񙝴
F<META/MYMETA.json> => 񙘸
F<MYMETA.json> => 񙝲
F<MYMETA.yml> => 񙝵
F<Maintainers.pl> => 񷉡
F<Maintainers.pm> => 񷉢
F<Maintainers> => 񷉠
F<Makefile.PL> => 򁑦
F<Makefile.SH> => 񸔀
F<Makefile> => 򀠃
F<Miniperl.Exe> => 򀝸
F<Module-Install> => 񠍲
F<Module.pm> => 񷉕
F<Module.pod> => 񷉖
F<NamesList.txt> => 񶎐
F<PERL.C> => 򀡣
F<PERL.EXE> => 򀡤
F<PERL.H> => 򀡥
F<PERL.OBJ> => 򀡦
F<PERL_ENV_TABLES> => 򁂒
F<PGPLOT.Opt> => 򀠣
F<PGPLOT> => 򀠠
F<PGPLOTSHR.EXE> => 򀠡
F<Perl FAQ> => 񩜲
F<Perl.Exe> => 򀞃
F<PerlIO.pm> => 񩕳
F<PerlShr.Exe> => 򀠈
F<PerlShr> => 򀞂
F<Policy.sh> => 񙑶
F<Policy_sh.SH> => 񙑴
F<Porting/> => 񷉗
F<Porting/how_to_write_a_perldelta.pod> => 񸐦
F<Porting/pumpkin.pod> => 񨝄
F<Porting> => 񷉘
F<Purify> => 񘘗
F<README.aix> => 񙦀
F<README.amiga> => 񳉔
F<README.beos> => 񳉖
F<README.cygwin> => 񳄵
F<README.dos> => 񰐳
F<README.mpeix> => 񳉗
F<README.os390> => 񳈉
F<README.perl> => 񹐑
F<README.plan9> => 񳉡
F<README.vmesa> => 񳈑
F<README.vms> => 򀝷
F<README.vos> => 񳆃
F<README.win32> => 񠀘
F<README> => 򁑣
F<README_vms> => 񳅴
F<Rpcb1.xsh> => 򁌶
F<SYS$TIMEZONE_DIFFERENTIAL> => 񠢒
F<Some/Module.pm> => 񰌧
F<Sys$Library> => 򀡄
F<Sys$Share> => 򀡃
F<Test.pl> => 񳀐
F<Test::Harness> => 񹤃
F<Text/Soundex.pm> => 񰍐
F<VMS_AXP> => 򀠰
F<VMS_VAX> => 򀠩
F<XSUB.h> => 񨕅
F<[.> => 򀠉
F<[.Foo.Bar]> => 򀠖
F<[.Lib.Auto.> => 򀠴
F<[.lib.site_perl.auto> => 򀠤
F<[.pod]> => 򀝶
F<\lib> => 񙥩
F<]> => 򀠸
F<a.> => 񳅖
F<a2p> => 񹡇
F<a> => 񳅓
F<av.c> => 񩉀
F<awk> => 񹡐
F<base> => 񸐣
F<by-category> => 񰕳
F<by-module> => 񰕲
F<c2ph> => 񹢅
F<c89> => 񸒓
F<casey@geeknest.com> => 񸐅
F<cc.U> => 񸒐
F<cc> => 񸒑
F<chat2.pl> => 񣅦
F<check*> => 񷉙
F<cmd1> => 񱠡
F<cmd2> => 񱠤
F<cmd> => 񸐤
F<comp> => 񸐥
F<config.h> => 񨠅
F<config.sh> => 񙑵
F<constant.pm> => 񷙄
F<cpan/> => 񷉔
F<cpan/dist/ext> => 񙥴
F<cpan2dist> => 񹤧
F<cpan> => 񹤤
F<cpanp-run-perl> => 񙙅
F<cpanp> => 񹤣
F<cpp> => 񨠨
F<ctype.h> => 񘄦
F<deprecate.pm> => 񙒒
F<dist/> => 񷉓
F<dlsrc.U> => 񸒖
F<dosish.h> => 񶜐
F<dougm@covalent.net> => 񡙶
F<dougm@osf.org> => 񸐂
F<dprofpp> => 񹢙
F<dump.c> => 񸕖
F<dumpvar.pl> => 񰈢
F<embed.fnc> => 񸑂
F<embed.h> => 񨕀
F<embed.pl> => 񸑅
F<enc2xs> => 񹢒
F<errno.h> => 񣄄
F<ext/> => 񸑨
F<f1> => 񱠠
F<f2> => 񱠣
F<f3> => 񱠥
F<fastprof.out> => 񲉸
F<file-dir-perms> => 񢕵
F<file> => 񹙰
F<find2perl> => 񹡡
F<foo.c> => 񨥆
F<gcc> => 񸒒
F<gcov> => 񨤖
F<gdb> => 񨠩
F<git_version.h> => 񠀀
F<give> => 񩜢
F<globvar.sym> => 񨒘
F<gmon.out> => 񨤅
F<gmon.sum> => 񨤆
F<gv.c> => 񸔷
F<h2ph> => 񹢂
F<h2xs> => 񹢉
F<hello.pl> => 񳆑
F<hints/> => 񳂘
F<http://oreilly.com/catalog/9780596528126/> => 񵠵
F<inFile.txt> => 񢍥
F<installman> => 񸔣
F<interpvar.h> => 񸑃
F<intrpvar.h> => 񨝣
F<ioctl.h> => 񣄇
F<iperlsys.h> => 񸘠
F<jhi@iki.fi> => 񸈷
F<ld> => 񸒗
F<lib/> => 񸑑
F<lib/ExtUtils/ParseXS.pm> => 񸐴
F<lib/[a-z]*> => 񨚐
F<lib/deprecate.pm> => 񙔗
F<lib/strict.pm> => 񷈧
F<lib/strict.t> => 񷈨
F<lib/unicore> => 񹐐
F<libperl.so> => 񙦈
F<libperl> => 񙦉
F<link> => 񸔄
F<listing> => 񙁁
F<makedef.pl> => 񸑸
F<malloc.c> => 񩀖
F<man> => 񹠣
F<miniperl> => 񨚓
F<miniperlmain.c> => 񩀆
F<module-starter> => 񰔴
F<modules/by-module/Term> => 񙄄
F<modules> => 񩜳
F<mro.c> => 񰔘
F<mro/mro.xs> => 񰔖
F<mycode.pl> => 񙄠
F<nick@ing-simmons.net> => 񸐃
F<numeric.c> => 񘅡
F<nytprof.out> => 񲊕
F<nytprof/index.html> => 񲊙
F<objformat> => 񙦅
F<okamoto@corp.hp.com> => 򁘥
F<op.c> => 񩈢
F<op.h> => 񨘔
F<opcode.pl> => 񸖉
F<orwant@media.mit.edu> => 񡙵
F<perl.c> => 񩀠
F<perl.gcov> => 񨤈
F<perl.h> => 񨑸
F<perl5db.pl> => 񠡦
F<perl> => 񸔓
F<perlbs2000> => 񳈐
F<perlbug> => 񹡶
F<perlbug@perl.org> => 򁑗
F<perldb.pl> => 񰈃
F<perldoc> => 񹠙
F<perli18n.pod> => 񰅂
F<perlio.c> => 񩕨
F<perliol.h> => 񩕇
F<perlivp> => 񹡰
F<perlmain.c> => 񩀇
F<perlvars.h> => 񨒗
F<perly.c> => 񩀣
F<perly.y> => 񩆘
F<persistent.c> => 񡘶
F<pod.idx> => 񡊒
F<pod/> => 񹡄
F<pod/buildtoc> => 񸒈
F<pod/perldelta.pod> => 񨙙
F<pod/perlfunc.pod> => 񨦐
F<pod/roffitall> => 񸒇
F<pod2html> => 񹠧
F<pod2latex> => 񹠨
F<pod2man> => 񹠠
F<pod2text> => 񹠤
F<pod2usage> => 񹠴
F<podchecker> => 񹠸
F<podselect> => 񹠵
F<podtidy> => 񷉤
F<ports/> => 񳉑
F<pp*.c> => 񨍶
F<pp.c> => 񩁃
F<pp.c~> => 񨥘
F<pp> => 񨥕
F<pp_ctl.c> => 񩁀
F<pp_hot.c> => 񸔢
F<pp_pack.c> => 񨥡
F<pp_sys.c> => 񩀹
F<ppport.h> => 񨕕
F<prove> => 񹤂
F<psed> => 񹡘
F<pstruct> => 񹢆
F<ptar> => 񹤑
F<ptardiff> => 񹤓
F<ptargrep> => 񹤖
F<pwd.h> => 񤞒
F<random> => 񡥆
F<regcomp.c> => 񵔙
F<regcomp.h> => 񵘄
F<regcomp.pl> => 񵒒
F<regcomp.sym> => 񵒑
F<regexp.h> => 񵔒
F<regnodes.h> => 񵔓
F<roehrich@cray.com> => 򁑖
F<run.c> => 񩀵
F<s2p> => 񹡖
F<scope.h> => 񘅨
F<sed> => 񹡙
F<setjmp.h> => 񘅦
F<sitecustomize.pl> => 򀌳
F<skimo@dns.ufsia.ac.be> => 񸐁
F<smallprof.out> => 񲉨
F<socket.h> => 񣄆
F<sort> => 񢈉
F<splain> => 񹡀
F<stat.h> => 򀤷
F<statistical time-sampling> => 񨤃
F<stdio.h> => 񘄴
F<stdlib.h> => 񘅗
F<strict.pm> => 񦎗
F<sv.c.gcov> => 񨤑
F<sv.c> => 񩅀
F<sv.h> => 񧦕
F<sys/ioctl.ph> => 񤤖
F<syscall.h> => 񣄅
F<t/*> => 񨚉
F<t/> => 񸐢
F<t/TEST> => 񷈥
F<t/base/> => 񷈱
F<t/base> => 񨚔
F<t/cmd/> => 񷈴
F<t/cmd> => 񨚖
F<t/comp/> => 񷈷
F<t/comp> => 񨚕
F<t/harness> => 񨜦
F<t/io/> => 񷈸
F<t/io> => 񨚘
F<t/japh/abigail.t> => 񨜃
F<t/lib/> => 񷉈
F<t/lib/commonsense.t> => 񸐹
F<t/lib/posix.t> => 񩘃
F<t/mro/> => 񷈹
F<t/mro> => 񨜁
F<t/op/> => 񷉁
F<t/op/pack.t> => 񨦄
F<t/op/pack.t~> => 񨦅
F<t/op/ref.t> => 񵌳
F<t/op> => 񨚙
F<t/perl.supp> => 񨢗
F<t/porting/> => 񷉆
F<t/porting> => 񦘴
F<t/re/> => 񷉂
F<t/run/> => 񷉃
F<t/run> => 񨚗
F<t/test.pl> => 񸐡
F<t/uni/> => 񷉄
F<t/uni> => 񨜀
F<t/win32/> => 񷉅
F<t/x2p> => 񷉉
F<take> => 񩜡
F<tassilo.von.parseval@rwth-aachen.de> => 񸐄
F<tchrist@perl.com> => 񰅣
F<test.pl> => 񸐩
F<testfile.valgrind> => 񨢖
F<testname.valgrind> => 񨜂
F<tmon.out> => 񲉄
F<tmpfile> => 񱠢
F<toke.c> => 񩀧
F<typemap> => 򁐂
F<undump> => 񩀑
F<utf8.c> => 񹐇
F<utf8.h> => 񹐈
F<utf8_heavy.pl> => 񹐓
F<utils/> => 񗑂
F<utils/perldoc.PL> => 񦕲
F<utils/perldoc> => 񦕳
F<valgrind> => 񘘘
F<versus/csh.whynot> => 񣅃
F<vms/> => 񷉧
F<win32/> => 񷉦
F<win32/perlhost.h> => 񸘡
F<win32/perllib.c> => 񨔆
F<wordmatch-line.html> => 񲌁
F<xhtml-symbol.ent> => 񲝀
F<xlc> => 񸒔
F<xsubpp> => 񹢖
F<~/.gitconfig> => 񦘡
F<~/.perldb> => 񘔈
F<~/testcase.pl> => 񦖆
I<"Programming Perl"> => 񤄶
I<"Rounding to zero".> => 񰘉
I<"echo surprise"> => 񤘢
I<$PVers> => 򀠶
I<$foo Magazin> => 񡝂
I<$scalar> => 񩕵
I<';' isn't legal inside an expression - if you need multiple statements use a do {...} block> => 񸖘
I<'command'> => 񶚄
I<'module ...'> => 񶤉
I<'module...'> => 񶙴
I<-lperl> => 񡕄
I<.h> => 񧅣
I<.ph> => 񧅤
I<.pl> => 񧉠
I<.pm> => 񧍇
I<.rhosts> => 񦌶
I</bin/csh> => 񧘅
I</bin/ksh> => 񧘆
I</bin/sh> => 񧘄
I</dev/fd/3> => 񷈂
I</dev> => 񧀄
I</etc/passwd> => 񧒗
I</etc/services> => 񩚔
I</usr/bin/perl> => 񧐡
I</usr/local/lib/...> => 񡕃
I<0> => 񴜢
I<< you >> => 񲖕
I<?> => 񲝉
I<A with acute> => 񡐵
I<AFTER> => 񱀠
I<ALL> => 񣀐
I<ARGV> => 񱜄
I<AddSubtract> => 񗦕
I<Adder> => 񗦂
I<Algorithmen und Datenstrukturen.> => 񲡗
I<Algorithms + Data Structures =   Programs.> => 񲡘
I<Ambulation.pm> => 񙁘
I<And> => 񨍡
I<Arch> => 򀠵
I<As perl does not use it, it is not well tested.> => 񗑸
I<Automating System Administration with Perl> => 񗖀
I<B-regex> => 񵑖
I<Basic Multilingual Plane> => 񹕡
I<Beginning Perl> => 񗕳
I<Build.PL> => 񣈑
I<C<command>> => 񧠱
I<C> => 񴡑
I<CAN> => 񷊇
I<CMD.EXE> => 񳄅
I<COMMAND.COM> => 񳄄
I<CONTAINED> => 񰝁
I<CallSubPV> => 񘀤
I<CallSubSV> => 񘀣
I<Case Mappings/SpecialCasing> => 񹚑
I<Closure> => 񢡠
I<Code evaluation> => 񶕥
I<Corrigendum #8> => 񙡙
I<Data Munging with Perl> => 񗖐
I<Denial of Service> => 񷈉
I<E> => 񴝇
I<EXTERN.h> => 񡕆
I<Effective Perl Programming> => 񗕷
I<Extending and Embedding Perl> => 񗖒
I<Extname> => 򀠷
I<Extshortname> => 򀡆
I<FILE ...> => 񦕙
I<Foo> => 񹉐
I<FormatterClassName> => 񡈓
I<G> => 񴠹
I<GET> => 񱠰
I<G_DISCARD> => 񡕰
I<G_NOARGS> => 񡕩
I<Gulliver's Travels> => 񥐇
I<HH> => 񙢙
I<Heading Text> => 񲍸
I<Higher-Order Perl> => 񗖔
I<History of Middle Earth> => 񨝔
I<I told you not to do this!    Don't make me say it again!> => 񲜆
I<I told you not to do this!> => 񲜈
I<ID> => 񘘒
I<IMPORTANT!> => 񡡐
I<INSTALL> => 񣈓
I<ISO 8859-1 (Latin-1)> => 񹐧
I<Inc> => 񗦗
I<Independent subexpressions> => 񶔔
I<Intermediate Perl> => 񗕵
I<K> => 񴡖
I<L> => 񴝄
I<LIST> => 񸊖
I<Learning Perl> => 񗕴
I<LeftString> => 񗥰
I<Linux Magazine> => 񡠑
I<Ll> => 񵀣
I<Localizing C<$.> will not localize the filehandle's line count> => 򀝳
I<London Bridge> => 񧑃
I<Loss of information> => 񰘈
I<Lowercase_Letter> => 񵀢
I<Makefile.PL> => 񣈐
I<Mastering Perl/Tk> => 񗖑
I<Mastering Perl> => 񡠇
I<Mastering Regular Expressions> => 񶘢
I<Modification of a read-only value attempted> => 񷔕
I<Module::Name> => 񩍳
I<Module::bootstrap()> => 񡙤
I<More Programming Pearls> => 񗖗
I<N scalars leaked> => 񨤘
I<N. B.> => 򀡖
I<N.B.> => 򀠙
I<N> => 񴠅
I<NAME> => 񵂒
I<NBSP> => 񲝔
I<NNN> => 񙤂
I<NOT> => 񷥐
I<Native> => 񰘂
I<Network Programming with Perl> => 񗖇
I<No Parameters, Nothing Returned> => 񗥔
I<Normalization Form Composed> => 񹕉
I<Normalization Form Decomposed> => 񹕒
I<Note:> => 񲘕
I<ONLY> => 񗔧
I<OOO> => 񙤀
I<OPTIONAL-INFO> => 񘖓
I<Object Oriented Perl> => 񗠘
I<Operator associativity> => 񰠇
I<Operator precedence> => 񰠂
I<Oxford English Dictionary> => 񧉒
I<PATTERN> => 񱈸
I<POS1..POS2> => 񘕥
I<POS> => 񘕡
I<POST-STRING> => 񘘑
I<PRE-STRING> => 񘘐
I<PROCESS> => 񤥖
I<PVers> => 򀡀
I<Packages, References, Objects, and Modules> => 񗠙
I<Perl 5 Pocket Reference> => 񗕰
I<Perl Best Practices> => 񗖄
I<Perl Debugger Pocket Reference> => 񗕱
I<Perl Template Toolkit> => 񗖈
I<Perl Threads Are Not X Threads> => 񸂖
I<Perl's> => 񷦙
I<Perl-Zeitung> => 񡝃
I<PerlInterpreter> => 񡔵
I<PerlPower()> => 񡘡
I<Persistent Private Variables> => 񢡦
I<Plane 0> => 񹕠
I<PrintList> => 񘁘
I<PrintUID> => 񗤵
I<Pro Perl Debugging> => 񗖓
I<ProcessRead> => 񘂇
I<Programming Pearls> => 񡠰
I<Programming Perl> => 񣂐
I<Programming perl> => 񡜉
I<Programming the Perl DBI> => 񗖃
I<Q> => 񴝆
I<README> => 񣈒
I<REALLY> => 񷑢
I<Real World SQL Server Administration with Perl> => 񗖁
I<Regular Expression Pocket Reference> => 񗕲
I<Regular Expressions Cookbook> => 񗖂
I<Returning a List of Values> => 񘄅
I<Returning a Scalar> => 񗢂
I<Returning a list in a scalar context> => 񗡵
I<Returning a list of values> => 񗡹
I<S-regex> => 񵑕
I<SEE ALSO> => 񩢕
I<SHOULD> => 񷊅
I<SINGLE> => 񷠁
I<STRING-OFFSET> => 񘘉
I<STRING> => 񱈷
I<Socket> => 񩜤
I<Some> => 񲘨
I<Subtract> => 񘀆
I<SvIV()> => 񡖓
I<SvNV()> => 񡖕
I<SvPV()> => 񡖗
I<THING> => 񥁃
I<TPJ> => 񡝒
I<TRUE> => 񡊆
I<TYPE> => 񘘔
I<Tar> => 񰐗
I<The Adventures of Tom Bombadil> => 񨝕
I<The Art of Computer Programming> => 񢕷
I<The Hobbit> => 񨝑
I<The LAYER parameter of the binmode() function is described as "DISCIPLINE" in "Programming Perl, 3rd Edition".  However, since the publishing of this book, by many known as "Camel III", the consensus of the naming of this functionality has moved from "discipline" to "layer".  All documentation of this version of Perl therefore refers to "layers" rather than to "disciplines".  Now back to the regularly scheduled documentation...> => 񤅐
I<The Lays of Beleriand> => 񨝓
I<The Lord of the Rings> => 񨝙
I<The Perl Cookbook> => 񸙕
I<The Perl Journal> => 񵑈
I<The Perl Review> => 񡝄
I<The Silmarillion> => 񨝖
I<The Tale of the Children of Hurin> => 񨝘
I<The Unicode Standard, Version 3.0> => 񡑁
I<There's More Than One Way to Do It> => 񨙤
I<This is essentially a linear encoding of a nondeterministic finite-state machine (aka syntax charts or "railroad normal form" in parsing technology).> => 񵑠
I<U> => 񴝅
I<UTF-8> => 񹕰
I<Understand References Today> => 񵑉
I<Unfinished Tales> => 񨝗
I<Unicode Collation Algorithm> => 񹜃
I<Unicode> => 񶍹
I<Unix Network Programming, 2nd Edition, Volume 1> => 񩜧
I<Unix Review> => 񡠐
I<Using GIMME_V> => 񗤤
I<Using G_EVAL> => 񗤂
I<Using G_KEEPERR> => 񗤔
I<Using Perl to Dispose of Temporaries> => 񗥩
I<Using Perl to dispose of temporaries> => 񗢃
I<Using call_argv> => 񗡣
I<Using call_sv> => 񗤩
I<VAR> => 񠠧
I<VERSION> => 񠌤
I<What is CPAN?> => 񡝡
I<Writing Perl Modules for CPAN> => 񗖕
I<X> => 񴢂
I<Y> => 񡥕
I<Your_OS> => 񩙉
I<[linebreak]> => 񲝥
I<[space][space]> => 񲙕
I<\n> => 񴡥
I<_read> => 񩔙
I<a-> => 񦜲
I<a> => 񣌤
I<about> => 񘝑
I<above> => 񩎆
I<actual> => 񹔵
I<after> => 񦤹
I<all> => 񸤓
I<alphabetic> => 񲈆
I<already exist> => 񦐷
I<already-existing> => 񧡀
I<also> => 񤅀
I<alternation> => 񶀙
I<always> => 򁕴
I<anchor> => 񵤑
I<anchorname> => 񲠀
I<and never returns> => 񤘃
I<and> => 򀢔
I<another> => 񵈠
I<any subroutine called from within that block> => 񷔄
I<any> => 񶀉
I<anything> => 񩖃
I<application> => 񩎒
I<approximately> => 񨆆
I<ar, be, bg, de__phonebook, hu, hy, kk, mk, nso, om, tn, vi, hr, ig, ja, ko, ru, sq,  se, sr, to, uk, zh, zh__big5han, zh__gb2312han, zh__pinyin> => 񙡃
I<are> => 񘉒
I<aren't> => 񲡕
I<args> => 񩕅
I<argument> => 򁔅
I<argv[1]> => 񡕢
I<around> => 񲙓
I<as far as C<CODE:> section or C<PPCODE:> section> => 򁘦
I<as is> => 񸄅
I<as> => 񸐰
I<assigned> => 񹈂
I<at a given position> => 񴐸
I<at compile time> => 񰜂
I<at least> => 񱦄
I<at run time> => 񗑙
I<at the end> => 񲅙
I<autovivification> => 񵊕
I<b> => 񴡈
I<backreference> => 񴝸
I<backreferences> => 񶁵
I<backtracking> => 񶁅
I<bar> => 񲔃
I<base character> => 񹔶
I<base class> => 񸜶
I<base> => 񩕂
I<basic block profiling> => 񨤇
I<basic blocks> => 񨤀
I<basic-block counting> => 񨢙
I<before> => 񸎉
I<below> => 񩎇
I<best effort> => 񤈙
I<best> => 񴍡
I<better> => 񗜈
I<between> => 񵊖
I<big-endian> => 񥐅
I<binary> => 񹞘
I<blead> => 񦕖
I<bless> => 񸚃
I<block> => 񹅉
I<boot_Module> => 񡙢
I<boss> => 񸂔
I<both> => 񷦑
I<bother> => 񲘇
I<by default> => 򁒙
I<by name> => 񷔰
I<byte order marks> => 񹕲
I<bytes> => 񹠇
I<c> => 񴜄
I<call_*> => 񘁵
I<call_AddSubScalar> => 񗦖
I<call_AddSubtract> => 񗦉
I<call_LeftString> => 񗥁
I<call_Subtract> => 񘀃
I<call_argv> => 񡕷
I<call_method> => 񘁨
I<call_pv> => 񘀧
I<call_sv> => 񘀩
I<callback> => 񩕃
I<callbacks> => 񗠷
I<caller's scope> => 񨊃
I<camel> => 񦙆
I<camel_flea> => 񙁣
I<can't> => 񷈅
I<can> => 򁑧
I<cannot> => 񲅢
I<cat> => 񩙴
I<cc> => 񡕀
I<character class> => 񵤩
I<character encoding forms> => 񹕩
I<character escape> => 񴚁
I<character> => 񹔤
I<characters> => 񥠕
I<chatty> => 񲌗
I<class attributes> => 񸜴
I<class data> => 񸜳
I<class destructor> => 񸚙
I<class method> => 񸙸
I<class methods> => 񸝄
I<class> => 񵅃
I<code point> => 񴜖
I<code points> => 񹔨
I<code> => 򁔷
I<codeset> => 񩤄
I<combining character sequence> => 񹕀
I<commandline> => 񶠨
I<completely> => 񲕨
I<condition> => 񩌙
I<conditional expression> => 񶔩
I<configvar> => 񶦗
I<constant> => 񨐆
I<constructor method> => 񸚄
I<constructor> => 񸚀
I<contained> => 񸜐
I<copy> => 񡎀
I<correctly> => 񲆕
I<could> => 񸜖
I<couldn't> => 񰅘
I<count> => 񸉰
I<country> => 񩤁
I<cpp> => 񦠡
I<csh> => 񷤲
I<current package> => 񰚖
I<current> => 򁊆
I<d> => 񴝦
I<db.out> => 񙀖
I<debugger> => 񶙗
I<declaring> => 񸝇
I<decrypt.pm> => 񣎈
I<default> => 񩤈
I<defined-or> => 񠦉
I<defining> => 񸝈
I<definitely> => 񗐨
I<denotes> => 񲘘
I<dependent> => 񶔠
I<derived class> => 񸜹
I<description> => 򁅀
I<despite> => 񵉡
I<destination-filename> => 񡉤
I<destination_file> => 񡈑
I<destructor> => 񸚇
I<detached> => 񸆉
I<determined> => 񹈃
I<die> => 񘀅
I<digit> => 񸝵
I<digits> => 򀍱
I<dir> => 񶙹
I<directory> => 񷀡
I<disabled> => 񱡖
I<do> => 򁉒
I<dodad> => 񲙤
I<does not> => 񱤀
I<does> => 񲙥
I<doesn't> => 񲡙
I<don't use it> => 񣅧
I<dromedary> => 񦙈
I<dweomer> => 񱡡
I<e.g.> => 򀥦
I<e> => 񥁑
I<each> => 񶒒
I<echo> => 񤘠
I<egrep> => 񳚙
I<en masse> => 񩙧
I<encoded> => 񹕧
I<encodingname> => 񲙨
I<endianness> => 񲦀
I<enter basic block #nnnn> => 񨤂
I<entire> => 񴊀
I<errno> => 򀜄
I<escape sequences> => 񵢖
I<especially> => 񳂅
I<etc.> => 򀡐
I<eval { }> => 񗢒
I<eval_pv()> => 񡖘
I<eval_pv> => 񡖄
I<eval_sv()> => 񡖙
I<even if> => 򁅧
I<eventually> => 񸚉
I<ever> => 񲜥
I<every> => 񷙥
I<exactly> => 񵢒
I<except> => 񹍆
I<experimental> => 񷁵
I<expo()> => 񡘢
I<extended grapheme cluster> => 񹕂
I<extended patterns> => 񶑴
I<extension> => 񶡙
I<f> => 񩕄
I<failure> => 񩔸
I<false> => 񩑄
I<faux pas> => 񹁐
I<fd> => 񩒄
I<file> => 񘢈
I<filename> => 񘡆
I<first> => 񸤔
I<flags> => 񩔀
I<foo> => 񲒘
I<foo[=bar,baz]> => 񶞒
I<forcefully breaking the infinite loop> => 񴍓
I<forgiving> => 񠔅
I<formatname> => 񲐠
I<formatnames> => 񲐡
I<formatteroption:value> => 񡈔
I<fred> => 񘀨
I<from> => 򁖙
I<function template> => 񢡡
I<functionname> => 񩌨
I<g> => 񴠁
I<gcc> => 񡕁
I<generate> => 񶦑
I<generic class> => 񸜷
I<generic newline> => 񴡨
I<getgr*()> => 񤞙
I<gethost*()> => 񤠀
I<getpw*()> => 񤞑
I<grapheme cluster> => 񹕁
I<graphical> => 񵅦
I<greedy> => 񶅘
I<grep> => 񧄹
I<group> => 򀂘
I<grouping> => 񶀴
I<gzip> => 񱠩
I<h2ph> => 񢕅
I<h> => 񴝨
I<have> => 񰝉
I<hex char> => 񵄣
I<hex number> => 񱅣
I<hex> => 񳝖
I<hexadecimal number> => 񱄹
I<high surrogate> => 񹊔
I<high surrogates> => 񹊗
I<higher> => 񥒑
I<highlander classes> => 񸙠
I<his> => 񩙕
I<host> => 򁊂
I<hot spots> => 񲈀
I<hot> => 񸔠
I<html> => 񲌀
I<i'th> => 񡎘
I<i.e.> => 򁄳
I<iconv> => 񡑇
I<id> => 񘖑
I<identifier> => 񲡒
I<if and only if there is whitespace right after the opening delimiter and whitespace right before the closing delimiter!> => 񲕃
I<if> => 񷠄
I<illguts> => 񨜹
I<immediately> => 򀚘
I<imode> => 񩑧
I<implementation> => 񸜀
I<implicit> => 񶝡
I<in bytes> => 񦉉
I<in> => 񢅕
I<including the case> => 񳥆
I<including> => 񲜣
I<indentlevel> => 񲠩
I<independent subexpression> => 񶉑
I<indirect filehandle> => 񩚗
I<input> => 񶑩
I<inside> => 񶂇
I<instance data> => 񸜱
I<instance methods> => 񸜰
I<instance> => 񸜩
I<instrumenting> => 񨤁
I<intention> => 񱕗
I<interface> => 񸜁
I<interp.c> => 񡕠
I<interp> => 񡕡
I<interrupted> => 񴍖
I<is not> => 񴅲
I<is> => 򀀁
I<isn't> => 񵌒
I<it depends> => 񸄧
I<it> => 񷈁
I<italic> => 񲍠
I<ithreads> => 񸆘
I<its> => 񸜄
I<just> => 񣌥
I<key> => 񸉹
I<kflags> => 񰒗
I<killall> => 񙌧
I<know> => 񨀢
I<lack> => 񲡃
I<language code> => 񡊕
I<language> => 񩤀
I<language_code> => 񡊔
I<language_territory> => 񩢖
I<languages> => 񰁕
I<last successful match> => 񶊀
I<last> => 񴊄
I<layer> => 񩕰
I<layers> => 񩑓
I<left> => 򀁸
I<leftmost> => 񶅔
I<length-item> => 񥍹
I<length> => 񸊔
I<less time> => 񲈄
I<letters> => 񶠀
I<level> => 񰔁
I<lib> => 񡔴
I<libc.so> => 񡠱
I<line> => 񲊇
I<list> => 񳎔
I<little-endian> => 񥐆
I<little> => 񸜓
I<load> => 񙂄
I<local> => 񗥈
I<lock> => 񸅢
I<logical> => 񹔴
I<login:> => 񡝇
I<login> => 񧅷
I<looks> => 񣕨
I<loses> => 񦁄
I<low surrogate> => 񹊕
I<low surrogates> => 񹊙
I<ls> => 񧐨
I<lwp-request> => 񩜂
I<magic> => 񥈥
I<make them> => 񗑰
I<man> => 񧌖
I<manext> => 񲢗
I<manpage> => 񘤉
I<manpath> => 񘤔
I<match()> => 񡘀
I<match.c> => 񡘔
I<matched with zero-length> => 񴍦
I<matches()> => 񡘂
I<matches> => 񡘓
I<maximal match> => 񶅗
I<may> => 񲡠
I<meaningless> => 򀜀
I<merely advisory> => 񢒅
I<message catalogs> => 񸖁
I<metacharacter> => 񴌄
I<metacharacters> => 񵢓
I<methods> => 񸚂
I<might> => 񴌀
I<minimal match> => 񶆄
I<minimal> => 񶆃
I<miniperlmain.c> => 񡕓
I<mmap> => 񙦐
I<mobile home> => 񧑂
I<mode> => 񩑘
I<modifier> => 񵤷
I<modifiers> => 񹔸
I<module-name> => 񡉳
I<module=arg[,arg]...> => 񶤒
I<module> => 񶤡
I<monadic classes> => 񸙘
I<much> => 񩜆
I<must never> => 񲜤
I<must not> => 񲜶
I<must> => 򁐵
I<mv> => 񥙧
I<my_escapes> => 񲝄
I<myperlprogram> => 񘈕
I<n> => 򀜆
I<name> => 򁁥
I<named character sequences> => 񙈂
I<named character> => 񶎇
I<named> => 񡅸
I<nargs> => 񩒇
I<necessarily> => 񤎔
I<need> => 񳤨
I<negated character class> => 񵥙
I<neither> => 񢠠
I<netstat -a> => 񳁙
I<network order> => 񲀃
I<never> => 񘁶
I<new> => 򁘔
I<next-id> => 񘖔
I<nice> => 񲘆
I<nn> => 񴌣
I<nnn> => 񴌠
I<no characters at all> => 񲘖
I<node> => 񘘇
I<nodes> => 񘖉
I<non-breaking space> => 񡐶
I<non-greedy> => 񶆅
I<normalization forms> => 񹕇
I<normally> => 񤈧
I<not> => 򁒘
I<nothing other than this substring> => 񴅃
I<nroff-replacement> => 񡈖
I<number/list> => 񶝇
I<number> => 񶠅
I<numeric> => 񲈈
I<o> => 񴜣
I<object attributes> => 񸜲
I<object factory> => 񸝆
I<object method> => 񸙹
I<object methods> => 񸝅
I<object reference> => 򀅨
I<octal/hexadecimal> => 񶜱
I<octal> => 񶙤
I<octnum> => 񶢑
I<off> => 񷁇
I<offset> => 񸊕
I<old> => 񩒀
I<oldop> => 񨘥
I<on your local system> => 񨘳
I<once> => 񠤑
I<one> => 񷦕
I<only works on global variables> => 񢥢
I<only> => 񸚐
I<opening> => 񵠓
I<operations> => 񰘅
I<optimized away> => 񨍥
I<option:value> => 񡉸
I<option> => 񡊀
I<or> => 񤎗
I<ordinal> => 񹔩
I<original> => 񰈨
I<output-formatname> => 񡉧
I<outside> => 񶂄
I<overridable> => 񥕁
I<p> => 񴝷
I<package qualifier> => 񹦅
I<paragraph> => 񲐲
I<param> => 񩒙
I<patch> => 񧐖
I<pattern code expression> => 񶖇
I<pattern> => 񶡐
I<per se> => 񦂓
I<perl -Dxxx> => 񘑓
I<perl -d -V> => 񘕄
I<perl library> => 񡔲
I<perl.h> => 񡕇
I<perl5-porters@perl.org> => 񸐔
I<perl5.git.perl.org> => 񨘹
I<perl> => 񧐴
I<perlXXX> => 񘤖
I<perl_destruct()> => 񡙄
I<perl_parse()> => 񡙥
I<perl_run> => 񡕴
I<perldelta> => 񧌥
I<perldoc> => 񡈲
I<perlfaq-search-regexp> => 񡉕
I<perlfunc> => 񡉑
I<perlio.c> => 񩑃
I<perlmain.c> => 񡙙
I<perlop> => 񧌤
I<perlvar> => 񡉙
I<perly.y> => 񧠤
I<perm> => 񩑨
I<pl2bat.bat> => 񳄔
I<pl2cmd> => 񳄕
I<plain> => 񱡳
I<pod2man> => 񘈐
I<polymorphism> => 񸜃
I<portable filename characters> => 񳀢
I<possessive quantifiers> => 񶈶
I<possible> => 񤥔
I<potatoes> => 񲚓
I<potentially> => 񤍡
I<pow()> => 񡘘
I<power.c> => 񡘠
I<power.pl> => 񡘙
I<precomposed> => 񹕃
I<printable> => 񲝙
I<private> => 񢡤
I<program> => 񩙩
I<programfile> => 񶚆
I<properties> => 񹔳
I<provided> => 񰄗
I<ps> => 񙌥
I<pseudo-block> => 񨉦
I<quadratic> => 񥤗
I<quantifier> => 񶄨
I<read> => 񩘓
I<readline> => 񙄃
I<really> => 񸚁
I<references> => 񡍡
I<refers to> => 񵍒
I<report> => 񘈖
I<require> => 񲘉
I<required> => 񷡘
I<reverse> => 񗦒
I<right before> => 񘝐
I<right> => 򀂙
I<rm> => 񱠧
I<s> => 񴝧
I<same> => 򁑐
I<scalar> => 񳎖
I<script> => 񹅆
I<scripts> => 񹕣
I<search and replace> => 񶌑
I<second best> => 񴍣
I<section> => 񲠤
I<sed> => 񱕹
I<send to> => 񥠓
I<sendmail> => 񤙄
I<sequence-item> => 񥍨
I<serialised> => 񹕨
I<set[re][ug]id()> => 򀂔
I<should> => 򁆁
I<showtime.c> => 񡕧
I<showtime.pl> => 񡕳
I<showtime> => 񡕲
I<single line> => 񴦙
I<singletons> => 񸙙
I<soft reference> => 񵑁
I<sol> => 񲔅
I<solved> => 񦖗
I<some-formatter> => 񡌈
I<somebody> => 񲤖
I<someone> => 񸚆
I<something> => 񲡧
I<sometimes> => 񢥡
I<somewhere> => 񳘕
I<source filters> => 񣍦
I<source stream> => 񣍩
I<specific class> => 񸝀
I<specific> => 񱥲
I<stable> => 񥤖
I<standalone> => 񴅁
I<start> => 񲙡
I<static data members> => 񸜵
I<static methods> => 񸝂
I<statistical time-sampling> => 񨢘
I<stdio.h> => 񗔱
I<stepping off> => 񘥖
I<storage> => 񰘄
I<string.c> => 񡖒
I<string> => 񱘷
I<strongly> => 񷅅
I<stuff...> => 񲎔
I<stuff> => 񲎓
I<subclass> => 񸝁
I<subname> => 񘡀
I<subroutine> => 񲊉
I<substitute()> => 񡘁
I<successfully> => 񵞄
I<super> => 񗜨
I<superclass> => 񸜸
I<surrogates> => 񹕱
I<sv> => 񡖉
I<symbolic reference> => 񵑂
I<symmetric difference> => 񢅡
I<syntactically> => 񲜵
I<sys/ioctl.ph> => 񢕄
I<taint checks> => 񷅆
I<taint mode> => 񷅃
I<taints> => 񶖅
I<target> => 񨍢
I<telnet> => 񩜃
I<text...> => 񲠶
I<text> => 񹞙
I<the address, not the string!> => 񨀂
I<then> => 񢑣
I<this> => 񸊃
I<to> => 򁘁
I<tomos> => 񦜳
I<too> => 񧀙
I<top> => 񙌦
I<total number of bytes> => 񗕔
I<translucent attributes> => 񸙢
I<trial.gz> => 񣍲
I<true> => 񰜘
I<truly> => 򁅩
I<two-dimensional slice> => 񰅙
I<typeglob> => 񘐈
I<undef> => 򀅰
I<unless> => 򀊒
I<until> => 񷠡
I<url> => 񲠉
I<use Module> => 񡙡
I<use()> => 񡙖
I<use> => 񡍥
I<useful programs are slow> => 񲌨
I<v> => 񴝩
I<value> => 򁕗
I<vars> => 񘞐
I<ver> => 񲔂
I<very same place> => 񡍲
I<very simple> => 񵤃
I<very> => 򁒄
I<via pointers> => 򁉅
I<virtual methods> => 񸝃
I<w> => 񴝥
I<wait> => 񧙩
I<wantarray> => 񗤕
I<wanted> => 񸚓
I<was> => 񸜑
I<webget> => 񩜁
I<were> => 񗝷
I<what it does> => 񨙓
I<what> => 񱡸
I<whatever falls between C<\Q> and C<\E>> => 񱝣
I<whatever> => 񲜲
I<when> => 񷠈
I<where> => 񵤐
I<which is visible in other functions called from that subroutine> => 񢢕
I<while> => 񷠙
I<whole class> => 񵤨
I<why> => 񨙒
I<will> => 񶝴
I<within> => 񸜅
I<without> => 򁕳
I<word anchor> => 񵥶
I<word> => 񴝐
I<worker> => 񸂕
I<would> => 񤖑
I<write code faster> => 񡙴
I<write faster code> => 񡙳
I<write> => 񩙣
I<writing> => 񩙅
I<x> => 򁅡
I<xs_init> => 񡙧
I<xsubpp> => 񡙣
I<yacc> => 񨎙
I<you must never reference class data directly from an object method> => 񸚖
I<you> => 񲙱
I<yourself> => 񦌷
I<zero-width assertions> => 񶔂
I<zh__stroke> => 񙡄
L<"Backtracking"> => 񴍹
L<"Basic BLOCKs"> => 񷢙
L<"Configurable Options"> => 񘡳
L<"DELEGATION"> => 񗠧
L<"Default UNIVERSAL methods"> => 񰙲
L<"Dispelling the Dweomer"> => 񱞆
L<"ENVIRONMENT"> => 񩤴
L<"EXAMPLE 1"> => 򁔴
L<"EXAMPLE 2"> => 򁕅
L<"EXAMPLE 3"> => 򁔶
L<"EXAMPLE 4"> => 򁔳
L<"FUNCTION IMPLEMENTATIONS"> => 񲤸
L<"General Regular Expression Traps using s///, etc."> => 񸡴
L<"Getting the fat out of XSUBs"> => 򁕥
L<"How can I capture STDERR from an external command?"> => 񣅇
L<"ISSUES"> => 񲤶
L<"Initializing Function Parameters"> => 򁈤
L<"Lengths and Widths"> => 񲀅
L<"NOTES"> => 񩡁
L<"Newlines"> => 񳈄
L<"Numeric operators and numeric conversions"> => 񰘆
L<"PLATFORMS"> => 񳂉
L<"PORTABILITY"> => 񰐠
L<"Packing and Unpacking C Structures"> => 񲀗
L<"Pragmas and debugging"> => 񶕴
L<"Private Variables via my()"> => 񷍢
L<"REGEXP Functions" in perlapi|perlapi/REGEXP Functions> => 񴖗
L<"Returning Undef And Empty Lists"> => 򁌐
L<"SECURITY"> => 񩥤
L<"Temporary Values via local()"> => 񷍣
L<"Terms and List Operators (Leftward)"> => 񰥓
L<"The & Unary Operator"> => 򁅕
L<"The ALIAS: Keyword"> => 򁍇
L<"The Eponymous Meta-Object"> => 񸙓
L<"The INCLUDE_COMMAND: Keyword"> => 򁍂
L<"The NO_OUTPUT Keyword"> => 򁌉
L<"The RETVAL Variable"> => 򁊉
L<"The Typemap"> => 򁅘
L<"Variable-length Parameter Lists"> => 򁍉
L<"WARNINGS"> => 񣑳
L<"What's a closure?"> => 񢤀
L<"eval BLOCK"> => 񤑧
L<"open pragma"|open> => 񷁄
L<"pack"> => 񦑠
L<"section" in name|name/section> => 񲞇
L<"section"|/section> => 񲞅
L<"tied VARIABLE"> => 񦊂
L</"$?"> => 򀥣
L</"/x"> => 񳕉
L</"About =over...=back Regions"> => 񲙣
L</"About LE<lt>...E<gt> Codes"> => 񲚖
L</"Avoiding Pipe Deadlocks"> => 񩙖
L</"Basic semaphores"> => 񸂙
L</"Bidirectional Character Types"> => 񹁱
L</"Byte and Character Semantics"> => 񸥲
L</"Extend PerlIO and PerlIO::Scalar"> => 񸘣
L</"Further Resources"> => 񹖙
L</"Hexadecimal Notation"> => 񹔱
L</"I/O Operators"> => 񱎖
L</"Naming fixes in Policy_sh.SH may invalidate Policy.sh"> => 񙥧
L</"Perl source code is read in text mode on Windows"> => 񠀃
L</"Regexp Quote-Like Operators"> => 񰡸
L</"Repeated Patterns Matching a Zero-length Substring"> => 񳞐
L</"SEE ALSO"> => 񵞀
L</"Smart matching in detail"> => 񷥩
L</"Switch statements"> => 񷠕
L</"The .i Targets"> => 񨠦
L</"The Cross-Referencing Back End"> => 񘈥
L</"The Decompiling Back End"> => 񘈡
L</"The Lint Back End"> => 񘈣
L</"Thread-Safety of System Libraries"> => 񸄀
L</"Unicode Character Properties"> => 񹀁
L</"Use of qw(...) as parentheses"> => 񙥑
L</"User-Defined Character Properties"> => 񹊄
L</"Virtualize operating system access"> => 񸕸
L</"When Unicode Does Not Happen"> => 񹍠
L</"fork() emulation will not wait for signalled children"> => 񠀂
L</"gdb macro support"> => 񨠥
L</"parsing regular expressions"> => 񱔂
L</$!> => 򀜙
L</%SIG> => 򀝐
L</@-> => 򀐁
L</ARGV> => 񦚙
L</AV> => 񦝖
L</Absolute referencing> => 񴜥
L</Autoloaded Functions> => 񲝠
L</BLOCK> => 񦞐
L</BUGS> => 񸦅
L</Boolean context> => 񧕖
L</Boolean> => 񦚅
L</C API Changes> => 񙍲
L</C preprocessor> => 񧑓
L</CPAN> => 񦠓
L</CV> => 񦥓
L</Capture groups> => 񳝐
L</Character set modifiers> => 񳕠
L</Committing to blead> => 񦙂
L</Compile pass 2: context propagation> => 񨎖
L</Core Enhancements> => 񠉖
L</Deferred Signals (Safe Signals)> => 񩚂
L</Deprecated C APIs> => 񙒁
L</Deprecations> => 񙐷
L</Disambiguation rules between old-style octal escapes and backreferences> => 񴜙
L</Documentation> => 񙞑
L</Extended Patterns> => 񳝑
L</FAQ> => 񧄈
L</FIFO> => 񧉢
L</Further Resources> => 񹔣
L</GV> => 񧅂
L</HV> => 񧆁
L</IO> => 񧆖
L</IP> => 񦥤
L</IV> => 񧕂
L</Improved IPv6 support> => 񙠓
L</Internal Changes> => 񙍩
L</Internal Functions> => 񨑲
L</Inverted bracketed character classes and multi-character folds> => 񙆕
L</LIFO> => 񧘴
L</LIST> => 񧉸
L</Magic variables outside the main package> => 񠊀
L</Makefile> => 񧌕
L</Modifiers> => 񴑉
L</NV> => 񧕃
L</Non-character code points> => 񹊐
L</Notes on Implementing Pod Processors> => 񲜀
L</Object Attributes> => 񲝳
L</Optimization> => 񩅳
L</PATH> => 񧐢
L</PERL_DESTRUCT_LEVEL> => 񨢉
L</PERL_HASH_SEED> => 񷄇
L</PERL_HASH_SEED_DEBUG> => 񷄅
L</POSIX Character Classes> => 񵂖
L</Putting a C value on Perl stack> => 񨊘
L</REFERENCES> => 񵑗
L</Reference Counts and Mortality> => 񨊑
L</Running> => 񩅣
L</STDERR> => 񧠈
L</STDIN> => 񧙈
L</STDOUT> => 񧙑
L</SV> => 񧆂
L</Selected Bug Fixes> => 񠄙
L</TCP> => 񦥦
L</The "Unicode Bug"> => 񹐘
L</The 13 variant characters> => 񡐹
L</The REGEXP structure> => 񴒑
L</The dot> => 񵀀
L</Titlecase> => 񵠘
L</UDP> => 񦥣
L</Unicode Character Properties> => 񹊃
L</Unicode Version 6.0 is now supported (mostly)> => 񙔃
L</Unicode and UTF-8> => 񩠲
L</Unicode> => 񧕶
L</Using Fill Mode> => 񣑣
L</Warning on \1 Instead of $1> => 񳡠
L</Which character set modifier is in effect?> => 񳙴
L</Why do regex character classes sometimes match only in the ASCII range?> => 񹒉
L</XS> => 񧠣
L</XSUBs and the Argument Stack> => 񨍄
L</[8]> => 񱅇
L</actual arguments> => 񧞖
L</alias> => 񦠦
L</anonymous> => 񦡤
L</architecture> => 񧎃
L</argument> => 񧜆
L</array> => 񧚇
L</assertion> => 񧠥
L</assignment> => 񧕅
L</associative array> => 񦥧
L</atom> => 񧒈
L</attribute> => 񧈕
L</awk> => 񦝉
L</backreference> => 񦠹
L</base class> => 񧚔
L</big-endian> => 񧊒
L</binmode> => 񦉃
L</bit shift> => 񧔩
L</block buffering> => 񦢐
L</block> => 񧕨
L</bucket> => 񧅡
L</buffer> => 񧉦
L</byte> => 񧍰
L</call by reference> => 񦠲
L</call by value> => 񦠧
L</callback> => 񧅐
L</character class> => 񦡃
L</character property> => 񧑙
L</character> => 񧠑
L</chomp> => 񤉴
L</chop> => 񤉔
L</chr> => 񥉄
L</class method> => 񧙡
L</class> => 񧝨
L</client> => 񦤙
L</cloister> => 񧔇
L</cluster> => 񦡢
L</code generator> => 񧑖
L</code point> => 񧎔
L</collating sequence> => 񧔘
L</command buffering> => 񦞔
L</command> => 񧙓
L</comp> => 񴙱
L</compile phase> => 񧔰
L</compile time> => 񧔹
L</compiler> => 񧜒
L</composer> => 񦤧
L</concatenation> => 񦥙
L</conditional> => 񧙕
L</connection> => 񧐰
L</constructor> => 񦤢
L</context> => 񧙷
L</continue> => 񥙆
L</cracker> => 񧕷
L</data structure> => 񧚀
L</data type> => 񧝥
L</datagram> => 񦠃
L</declaration> => 񧙔
L</delete> => 񤘳
L</derived class> => 񧚁
L</device> => 񧔐
L</directory> => 񧠔
L</dweomer> => 񧀓
L</dwimmer> => 񧀒
L</dynamic scoping> => 񧕥
L</each> => 񦑅
L</element> => 񧚈
L</endian> => 񦠖
L</exception> => 񧁥
L</exec> => 񦈤
L</execute> => 񧘔
L</exists> => 񤐘
L</exit> => 񤐷
L</exp> => 񥁓
L</export> => 񧍅
L</expression> => 񧠀
L</extension> => 񧝸
L</false> => 񦥸
L</fatal error> => 񧁄
L</file descriptor> => 񦦓
L</file> => 񧞁
L</fileglob> => 񧄧
L</filehandle> => 񧙐
L</filename> => 񧜠
L</filesystem> => 񧍖
L</flush> => 񧙄
L</fork> => 񧝒
L</formal arguments> => 񦠩
L</freely available> => 񧒁
L</freely redistributable> => 񧒂
L</function> => 񧞕
L</garbage collection> => 񧄴
L</gmtime> => 񳍤
L</greedy> => 񧉆
L</grep> => 񥁦
L</group> => 񧖔
L</hacker> => 񧕸
L</handler> => 񧝘
L</hard reference> => 񦝓
L</hash table> => 񧜖
L</hash> => 񧜁
L</here document> => 񧀷
L</hexadecimal> => 񧍱
L</hubris> => 񧉂
L</iCOW> => 񸘸
L</identifier> => 񧠒
L</impatience> => 񧉁
L</implementation> => 񧙵
L</import> => 񧁕
L</increment> => 񧌒
L</indirect object> => 񧈨
L</indirection> => 񧒘
L</inheritance> => 񧘘
L</instance variable> => 񧑘
L</instance> => 񧍳
L</interface> => 񧙴
L</interpolation> => 񧞔
L</interpreter> => 񧘁
L</invocand> => 񦡗
L</iteration> => 񧊗
L</key> => 񧒕
L</label> => 񦢃
L</laziness> => 񧆄
L</lc> => 񦌑
L</lexical scoping> => 񧙢
L</lexical variable> => 񧝧
L</library> => 񧌙
L</line> => 񧒖
L</list context> => 񧕓
L</list value> => 񧍡
L</list> => 񧘣
L</literal> => 񧑶
L</little-endian> => 񧀨
L</loop> => 񧙖
L</lvaluable> => 񧌂
L</lvalue modifier> => 񧍂
L</lvalue> => 񧕆
L</make HTML install work> => 񸐲
L</manpage> => 񧘵
L</map> => 񤡸
L</memory> => 񧞘
L</metacharacter> => 񧌴
L</metasymbol> => 񧜐
L</method> => 񧙠
L</mode> => 񧐦
L</module> => 񧘱
L</multiple inheritance> => 񧘙
L</my> => 񥜒
L</named pipe> => 񧂃
L</namespace> => 񧜘
L</network address> => 񧘩
L</newline> => 񧉧
L</null character> => 񧍤
L</null string> => 񧠦
L</numeric context> => 񧙸
L</object> => 񧑀
L</oct> => 񦍀
L</offset> => 񧚓
L</open source software> => 񧄙
L</open> => 񦉄
L</operand> => 񧞅
L</operating system> => 񧠕
L</operator overloading> => 񧅉
L</operator> => 񧝙
L</ord> => 񤊈
L</overloading> => 񧎖
L</overriding> => 񦠐
L</owner> => 񧖕
L</pack> => 񦍴
L</package> => 񧜗
L</pathname> => 񧜣
L</pattern matching> => 񧐣
L</pattern> => 񧉅
L</perlhack and perlrepository revamp> => 񙢒
L</permission bits> => 񧞃
L</pipe> => 񧖈
L</platform> => 񧑄
L</pod> => 񧀅
L</port> => 񧍙
L</pragma> => 񧎑
L</precedence> => 񧎀
L</preprocessing> => 񧘲
L</printf> => 񤢆
L</process> => 񧠗
L</program generator> => 񦡲
L</pumpkin> => 񧒃
L</qualified> => 񧆃
L</quantifier> => 񧄷
L</record> => 񧁶
L</ref> => 񤐕
L</reference> => 񧕈
L</referent> => 񧚗
L</regex> => 񦝙
L</regular expression modifier> => 񧎓
L</regular expression> => 񧚂
L</repack the optree> => 񸘴
L</require> => 񦎐
L</reserved words> => 񧈹
L</root> => 񧚖
L</run phase> => 񦤁
L</run time> => 񧔱
L</scalar context> => 񧞙
L</scalar value> => 񦞘
L</scalar> => 񧕡
L</scope> => 񦡦
L</scratchpad> => 񧐑
L</script kiddie> => 񦥄
L</section> => 񲞄
L</seek> => 񥈳
L</select> => 񥔡
L</separator> => 񦦂
L</server> => 񦤠
L</service> => 񧖐
L</setgid> => 񧜵
L</setuid> => 񧜴
L</shell> => 񧌱
L</side effects> => 񧠂
L</signal handler> => 񧁒
L</signal> => 񧅈
L</single inheritance> => 񧍓
L</socket> => 񧔒
L</split> => 񤤰
L</sprintf> => 񤢇
L</stack> => 񧉣
L</standard error> => 񧙱
L</standard input> => 񧙲
L</standard output> => 񧙳
L</statement modifier> => 񧍀
L</statement> => 񧙗
L</static scoping> => 񧉔
L</status> => 񧁓
L</stream> => 񧜷
L</string context> => 񧕔
L</string> => 񧠃
L</struct> => 񧜀
L</subpattern> => 񧄶
L</subroutine> => 񧠢
L</subscript> => 񦜆
L</substring> => 񦠸
L</switch cluster> => 񦠔
L</switch statement> => 񧜃
L</switch> => 񧄀
L</symbol table> => 񧜑
L</symbol> => 񦜂
L</symbolic link> => 񧔓
L</symbolic reference> => 񧘰
L</syntax tree> => 񧜸
L</syscall> => 񧀸
L</terminator> => 񦦃
L</ternary> => 񧝡
L</token> => 񧜉
L</tokener> => 񧘳
L</tokenizing> => 񧉑
L</trigger> => 񦠴
L</trinary> => 񧝉
L</true> => 񧔖
L</type> => 񦡉
L</typeglob> => 񧆔
L</ucfirst> => 񦌄
L</undef> => 񤐓
L</unpack> => 񤢈
L</use> => 񥜂
L</value> => 񧠁
L</values> => 񤤷
L</variable interpolation> => 񧚐
L</variable> => 񧙘
L</vector> => 񦚘
L</virtual> => 񧌨
L</void context> => 񦤵
L</wantarray> => 񤕣
L</warn> => 񤕲
L</whitespace> => 񦥀
L</working directory> => 񦥇
L</zero width> => 񦜱
L</zombie> => 񧒐
L<< C<SvPVX>E<sol>C<SvCUR>|perlapi >> => 񷌰
L<< threads/"$thr->join()" >> => 񸂀
L<AUTOLOAD> => 񙚓
L<AUTOLOAD|perlsub/Autoloading> => 񦝄
L<AVs, HVs and undefined values> => 񧡹
L<Addfile> => 񙙵
L<Adding a Perl interpreter to your C program> => 񡔸
L<Ambiguous use of %c resolved as operator %c|perldiag/"Ambiguous use of %c resolved as operator %c"> => 񙤉
L<Ambiguous use of %c{%s[...]} resolved to %c%s[...]|perldiag/"Ambiguous use of %c{%s[...]} resolved to %c%s[...]"> => 񙤑
L<Ambiguous use of %c{%s{...}} resolved to %c%s{...}|perldiag/"Ambiguous use of %c{%s{...}} resolved to %c%s{...}"> => 񙤒
L<Ambiguous use of %c{%s} resolved to %c%s|perldiag/"Ambiguous use of %c{%s} resolved to %c%s"> => 񙤐
L<Ambiguous use of -%s resolved as -&%s()|perldiag/"Ambiguous use of -%s resolved as -&%s()"> => 񙤓
L<Anatomy of .xs file> => 򁕇
L<AnyDBM_File> => 񳁨
L<Archive::Extract> => 񙖔
L<Archive::Tar> => 񙖘
L<Attribute::Handlers> => 񷜢
L<AutoLoader> => 򁕦
L<AutoSplit> => 񷜑
L<B::Concise> => 񨎗
L<B::Concise|B::Concise> => 񩅥
L<B::Debug> => 񙘓
L<B::Debug|B::Debug> => 񩅦
L<B::Deparse> => 񨚑
L<B::Lint> => 񙘣
L<B::Terse|B::Terse> => 񩅤
L<B> => 񠁑
L<BLOCKs|/BLOCK> => 񦞉
L<Backward Compatibility> => 񩝩
L<Backward compatibility> => 񩠹
L<Benchmark> => 񙘥
L<Bitwise String Operators> => 񱝅
L<Block buffering|/block buffering> => 񦠅
L<ByteLoader> => 񙒀
L<B|B> => 񨘐
L<C<S<use encoding>>|encoding> => 񱝥
L<C<mg_findext()>|perlapi/mg_findext> => 񠐈
L<C<parse_arithexpr()>|perlapi/parse_arithexpr> => 񠐇
L<C<parse_fullexpr()>|perlapi/parse_fullexpr> => 񠐄
L<C<parse_listexpr()>|perlapi/parse_listexpr> => 񠐅
L<C<parse_termexpr()>|perlapi/parse_termexpr> => 񠐆
L<C<readline>|perlfunc/readline> => 񸐉
L<C<sv_unmagicext()>|perlapi/sv_unmagicext> => 񠐉
L<CGI> => 񙘲
L<CLASS CONTEXT AND THE OBJECT> => 񗠨
L<CORE> => 񹉣
L<CPAN::Meta::History> => 񙕩
L<CPAN::Meta::Spec> => 񙝳
L<CPAN::Meta::YAML> => 񙞕
L<CPAN::Meta> => 񙕥
L<CPAN> => 񹤡
L<CPANPLUS::Dist::Build> => 񙙓
L<CPANPLUS> => 񙙐
L<Calling Perl Routines from within C Programs> => 񨅧
L<Carp::Assert> => 񰒒
L<Carp> => 񰖉
L<Carp|Carp> => 񰕈
L<Category LC_COLLATE: Collation> => 񩡷
L<Class::ISA> => 񙡵
L<Combining RE Pieces> => 񴉲
L<Command buffering|/command buffering> => 񦠇
L<Compress::Raw::Bzip2> => 񙘳
L<Compress::Raw::Zlib> => 񙘵
L<Config> => 򀉉
L<Corrigendum #8|http://www.unicode.org/versions/corrigendum8.html> => 񙅷
L<DB> => 񙄶
L<DBIx::Profile> => 񲊃
L<DBM_Filter> => 񙙙
L<DB_File/"In Memory Databases"> => 񢉣
L<DB_File> => 񸎑
L<Data Members as Variables> => 񸚑
L<Data::Dumper> => 񙙔
L<Data::Float> => 񙑘
L<Data::Types> => 񢌃
L<DateTime> => 񦊒
L<Devel::DProf> => 񹥐
L<Devel::NYTProf> => 񲈵
L<Devel::Peek> => 񶠔
L<Devel::Peek|Devel::Peek> => 񩄦
L<Devel::SawAmpersand> => 񵠈
L<Devel::SelfStubber> => 񙙨
L<Digest::MD5> => 񙙰
L<Digest::SHA> => 񙙱
L<Digest> => 񤍠
L<DirHandle> => 񙙶
L<Dumpvalue> => 񙙷
L<Dumpxs> => 񙙖
L<DynaLoader> => 񨢔
L<Encode/"Handling Malformed Data"> => 񹔘
L<Encode::Guess> => 񹜱
L<Encode::PerlIO> => 񹘶
L<Encode::Supported> => 񹙢
L<Encode> => 񹠒
L<English|English> => 򀉄
L<Env> => 񙚂
L<Errno> => 򀜘
L<Exporter> => 񰖐
L<Exporter|Exporter> => 񰕖
L<ExtUtils::CBuilder> => 񙚐
L<ExtUtils::Command> => 񙚑
L<ExtUtils::Constant::ProxySubs> => 񙜂
L<ExtUtils::Constant> => 񙚒
L<ExtUtils::Install> => 񙜄
L<ExtUtils::MakeMaker> => 񹢕
L<ExtUtils::Manifest> => 񙜆
L<ExtUtils::ParseXS> => 񙜇
L<FLAG VALUES> => 񗡅
L<Fatal> => 򀘷
L<Fcntl> => 񙜈
L<Fiddling with the Perl stack from your C program> => 񡕸
L<File::Basename> => 񙜉
L<File::CheckTree> => 񙜐
L<File::Copy::Recursive> => 񢖘
L<File::Copy> => 񥙰
L<File::Copy|File::Copy> => 񰔥
L<File::DosGlob> => 񙜒
L<File::Fetch> => 񙜕
L<File::Find> => 񙜠
L<File::Find|File::Find> => 񹥃
L<File::Glob> => 񳍖
L<File::Path> => 񥜶
L<File::Spec::VMS> => 񙜤
L<File::Spec> => 񨚄
L<File::stat> => 񦁣
L<Filter::Simple> => 񙜨
L<Finding locales> => 񩤤
L<Foo::Bar> => 񲝩
L<Formatting Codes|/"Formatting Codes"> => 񲎖
L<GDBM_File> => 񙜩
L<HTTP::Lite> => 񙜖
L<HTTP::Tiny> => 񙙀
L<Hash::Util::FieldHash> => 񙜲
L<Hash::Util::Fieldhash/Guts> => 񨄹
L<Hash::Util> => 񷄑
L<How can I make my Perl program run faster?> => 񡠸
L<How do I add a directory to my include path (@INC) at runtime?> => 񣈲
L<I18N::Collate> => 񙜳
L<I18N::LangTags> => 񙜶
L<I18N::Langinfo> => 񰄢
L<INHERITING A CONSTRUCTOR> => 񗠤
L<INSTALL> => 񸑡
L<IO::File> => 񙍡
L<IO::Handle> => 򀕸
L<IO::Select> => 񙝂
L<IO::Uncompress::Unlzma> => 񙖖
L<IO> => 񙜹
L<IPC::Cmd> => 񙝃
L<IPC::Open2> => 񥒇
L<IPC::Open3> => 񥒈
L<IPC::SysV> => 񙝇
L<Instance variables|/instance variable> => 񧂁
L<Integer Arithmetic> => 񰦃
L<Invalid strict version format (%s)|perldiag/"Invalid strict version format (%s)"> => 񙤔
L<Invalid version format (%s)|perldiag/"Invalid version format (%s)"> => 񙤕
L<Invalid version object|perldiag/"Invalid version object"> => 񙤖
L<JSON::PP> => 񙞖
L<LC_NUMERIC|/Category LC_NUMERIC: Numeric Formatting> => 񩡠
L<LINKLIST|perlapi/LINKLIST> => 񠁲
L<LOCALE CATEGORIES> => 񩢒
L<Line buffering|/line buffering> => 񦠆
L<Lingua::KO::Hangul::Util> => 񙡠
L<List::Util> => 񷈓
L<Locale::Maketext> => 񸖀
L<Location of Perl> => 񶚑
L<Log::Message::Simple> => 񙝔
L<Log::Message> => 񙝓
L<MIME::Base64> => 񙝡
L<Magic Virtual Tables> => 񨁹
L<Mail::Send|Mail::Send> => 񰔣
L<MakeMaker> => 񙦂
L<Math::BigInt::FastCalc> => 񙝘
L<Math::BigInt> => 񠞁
L<Math::BigRat> => 񙝙
L<Math::Random::MT::Perl> => 񥕷
L<Math::Random::Secure> => 񥕶
L<Math::TrulyRandom> => 񥕸
L<Memoize> => 񙝠
L<Module::Build::ModuleInfo> => 񙝦
L<Module::Build::Version> => 񙝣
L<Module::Build::YAML> => 񙝨
L<Module::Build> => 񰖕
L<Module::CoreList> => 񙝸
L<Module::Load::Conditional> => 񙞁
L<Module::Load> => 񙞀
L<Module::Metadata> => 񙝧
L<Module::Starter> => 񰖖
L<Module::Starter|Module::Starter> => 񰔶
L<NDBM_File> => 񙞃
L<NEXT> => 񙞅
L<Named Unary Operators> => 񰠣
L<Net::Ping> => 񙞄
L<Net::SMTP> => 񣍐
L<Net::SMTP|Net::SMTP> => 񰔢
L<Number::Format> => 񢑒
L<Numerical Traps> => 񸤘
L<O> => 񦤓
L<OBJECT RELATIONSHIPS> => 񗠥
L<ODBM_File> => 񙞇
L<Object::Accessor> => 񙞆
L<Objects|/object> => 񦥠
L<Opcode> => 񙞈
L<POD2::FR> => 񡊙
L<POD2::IT> => 񡊘
L<POSIX/FUNCTIONS> => 񡄇
L<POSIX/isalnum> => 񰄦
L<POSIX/isalpha> => 񰄧
L<POSIX/isdigit> => 񰄨
L<POSIX/isgraph> => 񰄩
L<POSIX/islower> => 񰄰
L<POSIX/isprint> => 񰄱
L<POSIX/ispunct> => 񰄲
L<POSIX/isspace> => 񰄳
L<POSIX/isupper> => 񰄴
L<POSIX/isxdigit> => 񰄵
L<POSIX/localeconv> => 񰄶
L<POSIX/setlocale> => 񰄷
L<POSIX/strcoll> => 񰄸
L<POSIX/strftime> => 񰄹
L<POSIX/strtod> => 񰅀
L<POSIX/strxfrm> => 񰅁
L<POSIX> => 򀙡
L<Params::Check> => 񙞒
L<Parse::CPAN::Meta> => 񙞔
L<Pass by Reference> => 񷍸
L<Pattern matching|/pattern matching> => 񧑗
L<Peep-hole Optimisation and Analysis> => 񵖉
L<Perl Unicode tutorial, perlunitut|perlunitut> => 񸥘
L<Perl.org|http://www.perl.org/> => 񲝵
L<Perl::OSType> => 񙖀
L<PerlIO/"Querying the layers of filehandles"> => 񩕈
L<PerlIO::encoding> => 񹘵
L<PerlIO::scalar> => 񙞘
L<PerlIO::via> => 񷎘
L<PerlIO> => 񹘳
L<Perlport's section on NL's|perlport/Newlines> => 񲝰
L<Permanently fixing your system's locale configuration> => 񩤢
L<Pod::Escapes|Pod::Escapes> => 񲝅
L<Pod::HTML2Pod|Pod::HTML2Pod> => 񲕦
L<Pod::Html> => 񙠀
L<Pod::LaTeX> => 񙠁
L<Pod::Man> => 񲤅
L<Pod::PXML|Pod::PXML> => 񲕧
L<Pod::Perldoc> => 񡍀
L<Pod::Plainer> => 񙡶
L<Pod::Simple> => 񙠃
L<Pod::Usage> => 񲢅
L<Profile Perl - am I hot or not?> => 񸔦
L<Prototypes> => 񷎒
L<Quote and Quote-like Operators> => 񰠨
L<RT #55964|http://rt.cpan.org/Public/Bug/Display.html?id=55964> => 񙙆
L<RT #57106|http://rt.cpan.org/Public/Bug/Display.html?id=57106> => 񙙇
L<Range Operators> => 񱁤
L<Reference Counts and Mortality> => 񧢈
L<SDBM_File> => 񠡤
L<Safe> => 񡁣
L<Scalar::Util> => 񢌁
L<Scratchpads and recursion> => 񨌰
L<SelfLoader> => 񷜒
L<Shell> => 񙡹
L<Socket> => 񙠒
L<Stashes and Globs> => 񧦘
L<Storable/FORWARD COMPATIBILITY> => 񙠙
L<Storable> => 񙠖
L<String::Scanf> => 񢌑
L<SvUTF8()|perlapi/SvUTF8> => 񴔓
L<Switch> => 񠍰
L<Sys::Hostname> => 񙠠
L<TAP::Harness> => 񨜢
L<THINKING OF CODE REUSE> => 񗠩
L<Term::ANSIColor> => 񙠡
L<Term::ReadLine> => 񘥢
L<Term::UI> => 񙠢
L<Terms and List Operators (Leftward)> => 񱁱
L<Test Anything Protocol|TAP> => 񨙰
L<Test::Harness> => 񨜔
L<Test::Inline> => 񰒑
L<Test::MockObject> => 񰒔
L<Test::More> => 񰖓
L<Test::More|Test::More> => 񰕱
L<Test::Simple> => 񰖒
L<Test::Simple|Test::Simple> => 񰕰
L<Text::Autoformat> => 񢁤
L<Text::Tabs|Text::Tabs> => 񰔤
L<Text::Unidecode|Text::Unidecode> => 񲝆
L<The & Unary Operator> => 򁉧
L<The C<untie> Gotcha> => 񸐑
L<The INPUT: Keyword> => 򁅙
L<The OUTPUT: Keyword> => 򁉩
L<The RETVAL Variable> => 򁆗
L<The localeconv function> => 񩥱
L<The setlocale function> => 񰂇
L<The use locale pragma> => 񰂐
L<Thread::Queue> => 񙠰
L<Thread::Semaphore> => 񙠧
L<Threads> => 񸂇
L<Tie::Array> => 񸎔
L<Tie::Handle> => 񸎖
L<Tie::Hash::NamedCapture> => 򀒆
L<Tie::Hash> => 񸎕
L<Tie::RefHash> => 񙠶
L<Tie::Scalar> => 񸎓
L<Time::HiRes> => 񦊉
L<Time::Local> => 񙠸
L<Time::Piece> => 񙥀
L<Time::gmtime> => 񥀹
L<Time::localtime> => 񥁀
L<UNIVERSAL> => 񢌥
L<UNIVERSAL|UNIVERSAL> => 񰙳
L<USING LOCALES> => 񩤸
L<USING RELATIONSHIP WITH SDBM> => 񗠦
L<Understanding the Magic of Tied Hashes and Arrays> => 񧥖
L<Unicode Normalization Forms|http://www.unicode.org/unicode/reports/tr15> => 񹚉
L<Unicode Security Considerations|http://www.unicode.org/reports/tr36> => 񹌔
L<Unicode Standard|http://www.unicode.org/reports/tr44> => 񹅖
L<Unicode Standard|http://www.unicode.org> => 񹚐
L<Unicode::Casing> => 񹉶
L<Unicode::Collate::CJK::Big5> => 񙡅
L<Unicode::Collate::CJK::GB2312> => 񙡇
L<Unicode::Collate::CJK::JISX0208> => 񙡉
L<Unicode::Collate::CJK::Korean> => 񙡐
L<Unicode::Collate::CJK::Pinyin> => 񙡑
L<Unicode::Collate::CJK::Stroke> => 񙡓
L<Unicode::Collate::Locale> => 񙡂
L<Unicode::Collate> => 񹝸
L<Unicode::Normalize> => 񹝹
L<Unicode::Semantics> => 񹒁
L<Unicode::UCD/num()> => 񹜕
L<Unicode::UCD/num> => 񙡘
L<Unicode::UCD> => 񹞀
L<User-Defined Case-Mappings|/"User-Defined Case Mappings (for serious hackers only)"> => 񹁘
L<Using call_method> => 񗡗
L<VMS::DCLsym> => 񙡰
L<VMS::Filespec> => 񙝹
L<Version 8 Regular Expressions> => 񳚘
L<Version::Requirements> => 񙖐
L<Win32> => 򀉕
L<XS::Typemap> => 񙡴
L<XSLoader> => 񙡩
L<a2p|a2p> => 񹥀
L<arguments|/argument> => 񧚃
L<attributes> => 񷜡
L<autodie> => 񦈐
L<base classes|/base class> => 񧍔
L<base> => 񙘤
L<bignum> => 񙘦
L<bits|/bit> => 񧙨
L<buffered|/buffer> => 񧙂
L<bytes> => 񹝵
L<bzip2(1)> => 񙙁
L<c2ph|c2ph> => 񹥇
L<calendar|"Calendar of Perl Events"> => 񘆒
L<caller()|perlfunc/"caller EXPR"> => 񠊉
L<capture group|/capture buffer, capture group> => 񦡀
L<captured substring|/capturing> => 񦠵
L<captured|/capturing> => 񦝘
L<characters|/character> => 񧠧
L<charnames> => 񹊈
L<chcp> => 񡒒
L<chdir|perlfunc/chdir> => 񧠖
L<chomp|perlfunc/chomp> => 񧝄
L<classes|/class> => 񧘠
L<clients|/client> => 񧖑
L<commands|/command> => 񧌗
L<command|/"Command Paragraph"> => 񲍗
L<compiled|/compiler> => 񧕵
L<compilers|/compiler> => 񧈙
L<comp|/comp> => 񴘔
L<config_data|config_data> => 񹡧
L<constant> => 񠘦
L<constructs|/construct> => 񧜦
L<corelist> => 񹥙
L<cpan2dist> => 񹥕
L<cpan> => 񹥓
L<cpanp> => 񹥔
L<crackers|/cracker> => 񧅄
L<crontab(5)/"DESCRIPTION"> => 񲝲
L<crypt|/crypt> => 񤍙
L<curl(1)> => 񙕳
L<datagrams|/datagram> => 񧞀
L<delete> => 񦍈
L<delete|perlfunc/delete> => 񧔡
L<delimiters|/delimiter> => 񧝅
L<deprecate> => 񨙣
L<dereferencing|/dereference> => 񧜤
L<derived classes|/derived class> => 񧈐
L<destroying|/destroy> => 񦦘
L<devices|/device> => 񧎂
L<diagnostics> => 񙙩
L<die|perlfunc/die> => 񧙀
L<directories|/directory> => 񧐗
L<do|perlfunc/do> => 񧔴
L<dprofpp> => 񙄸
L<dprofpp|dprofpp> => 񹥉
L<dynamic scope|/dynamic scoping> => 񧊓
L<each|perlfunc/each> => 񧈴
L<elements|/element> => 񧘢
L<enc2xs> => 񹥑
L<encoding::warnings> => 񸦆
L<encoding> => 񸦗
L<environment variables|/environment variable> => 񧐙
L<eval|perlfunc/eval> => 񧔶
L<executed|/execute> => 񧕴
L<execution|/execute> => 񧜙
L<feature/"the 'unicode_strings' feature"> => 񙆔
L<feature> => 񹖄
L<fetch(1)> => 񙜗
L<fields> => 񥉨
L<filehandles|/filehandle> => 񧜔
L<filenames|/filename> => 񧂑
L<files|/file> => 񧌣
L<find2perl|find2perl> => 񹥂
L<fork|perlfunc/fork> => 񧠰
L<format|perlfunc/format> => 񧠘
L<ftp://hobbes.nmsu.edu/pub/os2/dev/emx/> => 񳄨
L<functions|/function> => 񧌠
L<gcc(1)> => 񙚅
L<getservent|perlfunc/getservent> => 񧖒
L<glob|perlfunc/glob> => 񧂒
L<grep|perlfunc/grep> => 񧊂
L<h2ph|h2ph> => 񹥆
L<h2xs> => 򁐦
L<h2xs|h2xs> => 񹥈
L<hard references|/hard reference> => 񧔀
L<http://Casbah.org/> => 񲁣
L<http://annocpan.org/?mode=search&field=Module&name=threads%3A%3Ashared> => 񸈢
L<http://annocpan.org/?mode=search&field=Module&name=threads> => 񸈘
L<http://anubis.dkuug.dk/i18n/charmaps> => 񡔃
L<http://archive.develooper.com/perl5-porters@perl.org/> => 񨘷
L<http://as400.rochester.ibm.com/> => 񳈓
L<http://bugs.activestate.com/show_bug.cgi?id=74552> => 񸔩
L<http://catb.org/~esr/jargon/> => 񦙗
L<http://conferences.oreillynet.com/> => 񘆖
L<http://en.wikipedia.org/wiki/.hex> => 񲄔
L<http://en.wikipedia.org/wiki/C0_and_C1_control_codes> => 񡑂
L<http://en.wikipedia.org/wiki/SREC_(file_format)> => 񲄕
L<http://foldoc.doc.ic.ac.uk/foldoc/index.html> => 񦙖
L<http://ftp.stratus.com/pub/vos/posix/posix.html> => 񳆅
L<http://github.com/mirrors/perl> => 񨙃
L<http://joelonsoftware.com/articles/Unicode.html> => 񹞁
L<http://juerd.nl/site.plp/perlcheat> => 񘄤
L<http://lists.cpan.org/showlist.cgi?name=iThreads> => 񸈥
L<http://lists.perl.org/list/perl5-changes.html> => 񨘸
L<http://lists.perl.org> => 񘅸
L<http://mingw64.org> => 񠀇
L<http://nntp.perl.org/> => 񘅹
L<http://perl.com/> => 񘆆
L<http://perl.org> => 񘅵
L<http://perl.plover.com/Rx/paper/> => 񵘸
L<http://perl5.git.perl.org/metaconfig.git/> => 񷉰
L<http://perl5.git.perl.org/perl.git/blob_plain/HEAD:/pod/perltodo.pod> => 񸐓
L<http://perl5.git.perl.org/perl.git> => 񨙂
L<http://perlmonks.org/?node_id=216602> => 񘄢
L<http://perlmonks.org/?node_id=238031> => 񘄣
L<http://rt.perl.org/> => 񨘵
L<http://rt.perl.org/rt3/Public/Bug/Display.html?id=67694> => 񠍩
L<http://rt.perl.org/rt3/Public/Bug/Display.html?id=77810> => 񙑁
L<http://search.cpan.org/> => 񨙕
L<http://search.cpan.org/dist/CPAN-Reporter/> => 񨝈
L<http://search.cpan.org/dist/CPANPLUS-YACSmoke/> => 񨝆
L<http://search.cpan.org/dist/PGPLOT> => 񢌩
L<http://search.cpan.org/dist/Test-Smoke/> => 񨝅
L<http://search.cpan.org/dist/illguts/> => 񨝀
L<http://search.cpan.org/dist/minismokebox/> => 񨝇
L<http://search.cpan.org/search?module=threads%3A%3Ashared> => 񸈤
L<http://search.cpan.org/search?module=threads> => 񸈠
L<http://search.cpan.org> => 񰔨
L<http://unicode.org/reports/tr31> => 񴥠
L<http://unicode.org/reports/tr36> => 񴥙
L<http://unicode.org/resources/readinglist.html> => 񹝙
L<http://unicode.org/versions/Unicode6.0.0/> => 񙅸
L<http://use.perl.org/> => 񘆈
L<http://web.cse.msu.edu/~cse320/Documents/FloatingPoint.pdf> => 񡡷
L<http://www.activestate.com/> => 񳄴
L<http://www.alanwood.net/unicode/> => 񹝡
L<http://www.bixby.org/mark/porting.html> => 񳉘
L<http://www.bobbemer.com/P-BIT.HTM> => 񡔒
L<http://www.cl.cam.ac.uk/~mgk25/unicode.html> => 񹝢
L<http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz> => 񡥇
L<http://www.cpan.org/modules/00modlist.long.html#ID5_Networking_> => 񩜰
L<http://www.cpan.org/modules/by-module/Roman> => 񡥂
L<http://www.cpan.org/ports/> => 񳐑
L<http://www.cpan.org/ports/index.html> => 񳐓
L<http://www.cpan.org/src/> => 񳐐
L<http://www.cpan.org/src> => 񳐉
L<http://www.cpantesters.org/> => 񳂒
L<http://www.cs.rice.edu/~scrosby/hash/> => 񷈕
L<http://www.cygwin.com/> => 񳄷
L<http://www.czyborra.com/> => 񹝣
L<http://www.delorie.com/djgpp/> => 񳄦
L<http://www.eki.ee/letter/> => 񹝤
L<http://www.irc.perl.org> => 񘆃
L<http://www.mail-archive.com/perl5-changes@perl.org/msg17328.html> => 񴘑
L<http://www.nntp.perl.org/group/perl.perl5.porters/2007/12/msg131975.html> => 񸘥
L<http://www.novell.com/> => 񳉙
L<http://www.nr.com/> => 񡥑
L<http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html> => 񳌂
L<http://www.opensource.org/osd.html> => 񧍶
L<http://www.osdc.com.au/> => 񘆘
L<http://www.osdc.fr/> => 񘈀
L<http://www.osdc.org.il> => 񘆙
L<http://www.perl.com/pub/a/2002/06/11/threads.html> => 񸈧
L<http://www.perl.org/> => 񲝴
L<http://www.perl.org/events.html> => 񘈃
L<http://www.perlfoundation.org/> => 񘅶
L<http://www.perlmonks.org/> => 񘆉
L<http://www.pm.org/> => 񘆐
L<http://www.research.att.com/sw/tools/uwin/> => 񳄸
L<http://www.serpentine.com/~bos/threads-faq/> => 񸈦
L<http://www.sidhe.org/vmsperl/index.html> => 񳅶
L<http://www.swig.org/> => 򁅈
L<http://www.theperlreview.com/community_calendar> => 񘈂
L<http://www.theperlreview.com> => 񘈁
L<http://www.tishler.net/jason/software/rebase/rebase-2.4.2.README> => 񙦃
L<http://www.unicode.org/> => 񹝖
L<http://www.unicode.org/Public/UNIDATA/> => 񶎑
L<http://www.unicode.org/Public/zipped/6.0.0/> => 񙈖
L<http://www.unicode.org/glossary/> => 񹝘
L<http://www.unicode.org/notes/tn21> => 񴥄
L<http://www.unicode.org/reports/tr18> => 񹅕
L<http://www.unicode.org/reports/tr24> => 񹄸
L<http://www.unicode.org/reports/tr44> => 񹐸
L<http://www.unicode.org/unicode/faq/> => 񹝗
L<http://www.unicode.org/unicode/onlinedat/resources.html> => 񹝠
L<http://www.unicode.org/unicode/reports/tr10/> => 񹜄
L<http://www.unicode.org/unicode/reports/tr16/> => 񡔅
L<http://www.unicode.org> => 񹐉
L<http://www.wikipedia.org/> => 񦙘
L<http://www.wps.com/projects/codes/> => 񡔆
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2002-04/msg02380.html> => 񸔘
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-01/msg00400.html> => 񸘕
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-03/msg00481.html> => 񸘈
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2007-09/msg00793.html> => 񸘤
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2008-03/msg00305.html> => 񸕩
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2008-09/msg00573.html> => 񸖙
L<http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/> => 񸐕
L<http://www.yapc.org> => 񘈄
L<http://www.yapceurope.org/> => 񘆓
L<hyperlinks|perlfaq> => 񲍢
L<if> => 񦐠
L<importing|/import> => 񦚀
L<index|perlfunc/index> => 񧆐
L<instance variables|/instance variable> => 񦙡
L<instances|/instance> => 񦡓
L<instmodsh> => 񹥖
L<integer> => 񱝁
L<integers|/integer> => 񧄆
L<inverted|/Negation> => 񵁦
L<irc://irc.freenode.net/#perl6> => 񘆅
L<irc://irc.freenode.net/#perl> => 񘆄
L<irc://irc.perl.org/#perl> => 񘆕
L<irc://irc.perl.org> => 񘆁
L<isSPACE|perlapi/isSPACE> => 񴔉
L<is_utf8_string_loclen|perlapi/is_utf8_string_loclen> => 񴕧
L<join|perlfunc/join> => 񧊁
L<keys()|perlfunc/"keys HASH"> => 񠌗
L<keys|/key> => 񧐷
L<kill|perlfunc/kill> => 񧘕
L<labels|/label> => 񧔢
L<lex_stuff_pvn|perlapi/lex_stuff_pvn> => 񠝳
L<lexical scope|/lexical scoping> => 񦥆
L<lexical variables|/lexical variable> => 񦡥
L<lib> => 񠕱
L<libnetcfg|libnetcfg> => 񹡨
L<lines|/line> => 񧘂
L<literals|/literal> => 񧁗
L<local::lib> => 񙘹
L<locale> => 񡒔
L<localtime> => 񤡂
L<local|perlfunc/local> => 񧕦
L<lvalues|/lvalue> => 񦝒
L<man(5)> => 񲤆
L<man(7)> => 񲤇
L<map|perlfunc/map> => 񦙲
L<md5sum(1)> => 񙙴
L<methods|/method> => 񧀧
L<modules|/module> => 񧉡
L<mro> => 񸜒
L<my|perlfunc/my> => 񧕱
L<name/section> => 񲞆
L<name> => 񲞂
L<named or numbered character |/Named or numbered characters and character sequences> => 񴡤
L<name|name> => 񲞃
L<objects|/object> => 񧎉
L<oct|perlfunc/oct> => 񧍵
L<op_append_elem|perlapi/op_append_elem> => 񠁧
L<op_append_list|perlapi/op_append_list> => 񠁨
L<op_prepend_elem|perlapi/op_prepend_elem> => 񠁩
L<open> => 򁁁
L<opendir|perlfunc/opendir> => 񧀈
L<open|perlfunc/open> => 񧠙
L<operands|/operand> => 񧝠
L<operating systems|/operating system> => 񧀇
L<operators|/operator> => 񧎈
L<ordinary|/"Ordinary Paragraph"> => 񲍕
L<ord|perlfunc/ord> => 񦡵
L<our|perlfunc/our> => 񧌆
L<overload/Copy Constructor> => 񠘩
L<overload/Fallback> => 򁌤
L<overload> => 񸝔
L<pack()|perlfunc/"pack"> => 񢐗
L<packages|/package> => 񦙹
L<parent> => 񙞓
L<parse_barestmt()|perlapi/parse_barestmt> => 񠀤
L<parse_block()|perlapi/parse_block> => 񠀥
L<parse_fullstmt()|perlapi/parse_fullstmt> => 񠀣
L<parse_label()|perlapi/parse_label> => 񠀦
L<parse_stmtseq()|perlapi/parse_stmtseq> => 񠀢
L<passwd> => 񣁒
L<pax> => 񙘂
L<perl/Internals and C Language Interface> => 񩉦
L<perl5-porters@perl.org|mailto:perl5-porters@perl.org> => 񦕤
L<perl5120delta> => 񠎁
L<perl5121delta> => 񙢃
L<perl5122delta> => 񙢄
L<perl5123delta> => 񙢅
L<perl58delta/"Localising Tied Arrays and Hashes Is Broken"> => 񷔘
L<perl58delta> => 񨜳
L<perl5db.pl> => 񙥣
L<perl> => 򀡳
L<perlaix> => 񳐔
L<perlamiga> => 񳐕
L<perlapi/Custom Operators> => 񠁕
L<perlapi/PL_keyword_plugin> => 񷡹
L<perlapi/call_argv> => 񡘧
L<perlapi/cv_set_call_checker> => 񠁄
L<perlapi/eval_pv> => 񡖀
L<perlapi/eval_sv> => 񡕹
L<perlapi> => 򁘡
L<perlapio> => 񩎃
L<perlapollo> => 񳐖
L<perlartistic> => 񰒀
L<perlbeos> => 񳐗
L<perlbook> => 񡝀
L<perlboot> => 񸝕
L<perlbot> => 񸝒
L<perlbs2000> => 񳐘
L<perlbug(1)> => 񙥖
L<perlbug> => 񨑶
L<perlbug@perl.org|mailto:perlbug@perl.org> => 񦕣
L<perlbug|perlbug> => 񹥅
L<perlcall/"Returning a Scalar"> => 񨆕
L<perlcall/G_KEEPERR> => 񠜈
L<perlcall> => 񩉐
L<perlce> => 񳐙
L<perlclib> => 񨤶
L<perlcygwin> => 񳐠
L<perldata/"Typeglobs and Filehandles"> => 񷕘
L<perldata/Typeglobs and Filehandles> => 񧝷
L<perldata> => 񸠗
L<perldebguts/"Debugger Internals"> => 񙁅
L<perldebguts/"Debugging Perl Memory Usage"> => 񙄱
L<perldebguts/"Debugging Regular Expressions"> => 񶘒
L<perldebguts/"Frame Listing Output Examples"> => 񘠲
L<perldebguts> => 򀉣
L<perldebtut> => 񡜷
L<perldebug/"Configurable Options"> => 񘔘
L<perldebug/"Debugging Regular Expressions"> => 񵠩
L<perldebug> => 񶠡
L<perldelta> => 񸝤
L<perldgux> => 񳐡
L<perldiag> => 򀝑
L<perldoc> => 񲕶
L<perldoc|perldoc> => 񹤰
L<perldos> => 񳐢
L<perldsc> => 񵑆
L<perlebcdic/OPERATOR DIFFERENCES> => 񴚕
L<perlebcdic/OS ISSUES> => 񡒉
L<perlebcdic> => 񹌡
L<perlembed> => 񷜥
L<perlepoc> => 񳐣
L<perlfaq1> => 񩉶
L<perlfaq2> => 񷈔
L<perlfaq3> => 񡠷
L<perlfaq4> => 񲌱
L<perlfaq5/Why does Perl let me delete read-only files?  Why does -i clobber protected files?  Isn't this a bug in Perl?> => 񶡰
L<perlfaq5> => 񱠓
L<perlfaq6> => 񵠥
L<perlfaq7> => 񡜁
L<perlfaq8/"How can I capture STDERR from an external command?"> => 񱠁
L<perlfaq8/"How do I keep my own module/library directory?"> => 񡜙
L<perlfaq8/"How do I read and write the serial port?"> => 񱢂
L<perlfaq8/"How do I start a process in the background?"> => 񣆒
L<perlfaq8> => 񦊑
L<perlfaq9> => 񢘂
L<perlfaq> => 񩍴
L<perlfork> => 򀥸
L<perlform> => 򀖐
L<perlfreebsd> => 񳐥
L<perlfunc/"binmode"> => 񢊘
L<perlfunc/"bless"> => 񦞃
L<perlfunc/"fork"> => 񣑁
L<perlfunc/"formline PICTURE,LIST"> => 򀖑
L<perlfunc/"kill"> => 񣅲
L<perlfunc/"open FILEHANDLE"> => 񣔃
L<perlfunc/"open"> => 񣀸
L<perlfunc/"select"> => 񣁣
L<perlfunc/"sysopen"> => 񣀉
L<perlfunc/-X> => 򀀦
L<perlfunc/accept> => 񠑆
L<perlfunc/alarm> => 񣀙
L<perlfunc/bind> => 񠔕
L<perlfunc/binmode> => 񹙈
L<perlfunc/chomp> => 񡂔
L<perlfunc/connect> => 񠘕
L<perlfunc/crypt> => 񣀀
L<perlfunc/defined> => 񦥹
L<perlfunc/die> => 򀊘
L<perlfunc/do> => 񷠧
L<perlfunc/dump> => 񠙓
L<perlfunc/eof> => 򀕈
L<perlfunc/eval> => 򀌀
L<perlfunc/getc> => 򀕶
L<perlfunc/getsockopt> => 񠚄
L<perlfunc/goto> => 񠚕
L<perlfunc/grep> => 񠒆
L<perlfunc/hex> => 񧅴
L<perlfunc/import> => 񠡘
L<perlfunc/ioctl> => 񠥁
L<perlfunc/last> => 񠝰
L<perlfunc/lc> => 񹍖
L<perlfunc/listen> => 񠝴
L<perlfunc/map> => 񸡳
L<perlfunc/my> => 񡘱
L<perlfunc/next> => 񠖀
L<perlfunc/oct> => 񘌔
L<perlfunc/open> => 񶥂
L<perlfunc/opendir> => 񵉳
L<perlfunc/our> => 񧄳
L<perlfunc/pack> => 񱥇
L<perlfunc/pos> => 񴑕
L<perlfunc/prototype> => 񷙴
L<perlfunc/rand> => 񢆉
L<perlfunc/readline> => 񱜀
L<perlfunc/redo> => 񠖇
L<perlfunc/ref> => 񵊙
L<perlfunc/require> => 򀈲
L<perlfunc/reverse> => 񢁁
L<perlfunc/select> => 򀕷
L<perlfunc/setsockopt> => 񡀃
L<perlfunc/socket> => 񵉱
L<perlfunc/socketpair> => 񵉲
L<perlfunc/sort> => 򀅆
L<perlfunc/splice> => 񡀈
L<perlfunc/split> => 񶘠
L<perlfunc/sprintf> => 񠜸
L<perlfunc/substr> => 񡀖
L<perlfunc/syscall> => 񣁵
L<perlfunc/system> => 񧙰
L<perlfunc/tie> => 񧝔
L<perlfunc/uc> => 񱐤
L<perlfunc/unpack> => 񠞒
L<perlfunc/use> => 񧆇
L<perlfunc/utime> => 񢔕
L<perlfunc/vec> => 񲀳
L<perlfunc/waitpid> => 񩙙
L<perlfunc/wantarray> => 񘉩
L<perlfunc/warn> => 򀊙
L<perlfunc/write> => 񣒃
L<perlfunc> => 򁀗
L<perlgit> => 񨥓
L<perlgpl> => 񰑹
L<perlguts/"Background and PERL_IMPLICIT_CONTEXT"> => 񨝨
L<perlguts/"Compile-time scope hooks"> => 񠁙
L<perlguts/"How multiple interpreters and concurrency are supported"> => 񨝢
L<perlguts/"Localizing Changes"> => 񩉔
L<perlguts/"Unicode Support"> => 񹍢
L<perlguts/"XSUBs and the Argument Stack"> => 񗥠
L<perlguts/Background and PERL_IMPLICIT_CONTEXT> => 񩉤
L<perlguts/Compiled code> => 񨦙
L<perlguts/Custom Operators> => 񠁔
L<perlguts/Internal Functions> => 񨡀
L<perlguts/Magic Variables> => 񩥂
L<perlguts> => 򁘠
L<perlhack/Commit message> => 񦘲
L<perlhack/TESTING> => 񸐘
L<perlhack> => 񨦖
L<perlhacktips/PERL_DESTRUCT_LEVEL> => 񷂕
L<perlhacktips/PERL_MEM_LOG> => 񘘙
L<perlhacktips> => 񨥉
L<perlhacktut> => 񨝡
L<perlhist> => 񧀑
L<perlhpux> => 񳐧
L<perlhurd> => 񳐦
L<perlintern> => 񨘰
L<perlinterp> => 񷈗
L<perliol> => 񥆘
L<perlipc/"Bidirectional Communication with Another Process"> => 񱠃
L<perlipc/"Bidirectional Communication with Yourself"> => 񣄣
L<perlipc/"Deferred Signals (Safe Signals)"> => 񷄣
L<perlipc/"Named Pipes"> => 񱢀
L<perlipc/"Safe Pipe Opens"> => 񱠐
L<perlipc/"Signals"> => 񤥗
L<perlipc/"Sockets: Client/Server Communication"> => 񱢇
L<perlipc/"SysV IPC"> => 񥡣
L<perlipc/"UDP: Message Passing"> => 񥠔
L<perlipc/"Unix-Domain TCP Clients and Servers"> => 񱢁
L<perlipc/"Using open() for IPC"> => 񥅳
L<perlipc/Signals> => 񧘗
L<perlipc> => 򀉰
L<perlirix> => 񳐨
L<perlivp> => 񹡩
L<perllexwarn(1)> => 񙡨
L<perllexwarn> => 񸝡
L<perllocale/SECURITY> => 񷅲
L<perllocale/Unicode and UTF-8> => 񹐗
L<perllocale> => 񹜉
L<perllol> => 򀄱
L<perlmacos> => 񳐩
L<perlmacosx> => 񳐰
L<perlmod/"BEGIN, UNITCHECK, CHECK, INIT and END"> => 񷒆
L<perlmod/"Packages"> => 񷍤
L<perlmod/"Perl Modules"> => 񤅹
L<perlmod/"Symbol Tables"> => 񘐦
L<perlmod/Packages> => 񘈹
L<perlmod> => 򁘣
L<perlmodinstall> => 񰖆
L<perlmodlib/"Modules: Creation, Use, and Abuse"> => 񰙥
L<perlmodlib/CPAN> => 񤜴
L<perlmodlib> => 񸐀
L<perlmodstyle> => 񢡈
L<perlmpeix> => 񳐱
L<perlmroapi> => 񠝇
L<perlnetware> => 񳐲
L<perlnewmod> => 񲕵
L<perlnumber> => 񡡸
L<perlobj/"Method Invocation"> => 񢥂
L<perlobj/"Two-Phased Garbage Collection"> => 񵈇
L<perlobj> => 񸝑
L<perlop/"Bitwise String Operators"> => 񦑹
L<perlop/"Floating Point Arithmetic"> => 񡢁
L<perlop/"Gory details of parsing quoted constructs"> => 񴑓
L<perlop/"I/O Operators"> => 񥘩
L<perlop/"Quote and Quote-like Operators"> => 񦔶
L<perlop/"Quote-Like Operators"> => 񥕐
L<perlop/"Regexp Quote-Like Operators"> => 񶘘
L<perlop/"`STRING`"> => 񦈣
L<perlop/Bitwise String Operators> => 񸡷
L<perlop/Gory details of parsing quoted constructs> => 񴙸
L<perlop/Quote and Quote-like Operators> => 񳝁
L<perlop/Terms and List Operators (Leftward)> => 񠜵
L<perlop> => 񸠙
L<perlopentut/"File Locking"> => 񢒆
L<perlopentut> => 񱚔
L<perlos2> => 񳐳
L<perlos390> => 񳐴
L<perlos400> => 񳐵
L<perlpacktut> => 񦍦
L<perlperf> => 񙄤
L<perlplan9> => 񳐶
L<perlpod/"Command Paragraph"> => 񲙙
L<perlpod/"Formatting Codes"> => 񲚙
L<perlpod> => 򁘤
L<perlpodspec> => 񲕳
L<perlpodstyle> => 񙢆
L<perlpod|perlpod> => 񲝨
L<perlpolicy> => 񦘶
L<perlport/"Files and Filesystems"> => 񸘘
L<perlport/"Newlines"> => 򀕢
L<perlport/"Supported Platforms"> => 񗐩
L<perlport/Newlines> => 񲝱
L<perlport/PLATFORMS> => 򀉇
L<perlport/exit> => 򁄠
L<perlport/gmtime> => 񤡄
L<perlport/localtime> => 񥀸
L<perlport> => 򀉖
L<perlport|perlport> => 񲜐
L<perlpragma> => 򀈓
L<perlqnx> => 񳐷
L<perlre/"Capture groups"> => 񦝥
L<perlre/"Repeated Patterns Matching a Zero-length Substring"> => 񥔔
L<perlre/"Special Backtracking Control Verbs"> => 񶖔
L<perlre/(??{ code })> => 񢀴
L<perlre/(?{ code })> => 񠙱
L<perlre/Backtracking> => 񦝧
L<perlre/Capture groups> => 񙉡
L<perlre/Character set modifiers> => 񹌕
L<perlre/Extended Patterns> => 񙈥
L<perlre/Modifiers> => 񱉅
L<perlre/Which character set modifier is in effect?> => 񵆐
L<perlre> => 򀒔
L<perlreapi> => 񵘵
L<perlrebackslash/Misc> => 񳝉
L<perlrebackslash/Octal escapes> => 񱅈
L<perlrebackslash> => 񵠦
L<perlrecharclass/Backslash sequences> => 񵚄
L<perlrecharclass/Bracketed Character Classes> => 񳝆
L<perlrecharclass/Negation> => 񳕆
L<perlrecharclass/POSIX Character Classes> => 񹈕
L<perlrecharclass/Unicode Properties> => 񙐄
L<perlrecharclass> => 񶑅
L<perlref/"Function Templates"> => 񷜣
L<perlref/Making References> => 񦤖
L<perlref> => 񸝐
L<perlreftut> => 񵈆
L<perlreguts/Base Structures> => 񴘲
L<perlreguts> => 񴙲
L<perlrequick> => 񵠠
L<perlreref> => 񢝧
L<perlretut/"Using regular expressions in Perl"> => 񳕕
L<perlretut> => 񹝶
L<perlrun/"Command Switches"> => 񱙖
L<perlrun/PERLIO> => 񩎉
L<perlrun/PERL_HASH_SEED> => 񷈐
L<perlrun/PERL_SIGNALS> => 񠤩
L<perlrun> => 򀢐
L<perlrun|perlrun/"Command Switches"> => 򀌶
L<perlsec/"Algorithmic Complexity Attacks"> => 񷄉
L<perlsec/"Laundering and Detecting Tainted Data"> => 񢡘
L<perlsec> => 񶦂
L<perlsolaris> => 񳐸
L<perlsource> => 񨥈
L<perlstyle> => 񰒄
L<perlsub/"Autoloading"> => 񢤱
L<perlsub/"Constant Functions"> => 񠘨
L<perlsub/"Localized deletion of elements of composite types"> => 񥀒
L<perlsub/"Lvalue subroutines"> => 񠞂
L<perlsub/"Overriding Built-in Functions"> => 񢤄
L<perlsub/"Pass by Reference"> => 񢡷
L<perlsub/"Persistent Private Variables"> => 񢢒
L<perlsub/"Private Variables via my()"> => 񥉧
L<perlsub/"Subroutine Attributes"> => 񠑑
L<perlsub/"Temporary Values via local()"> => 񥀐
L<perlsub/Overriding Built-in Functions> => 񧎙
L<perlsub/Prototypes> => 򁌙
L<perlsub> => 򀁑
L<perlsyn/"Compound Statements"> => 񳡷
L<perlsyn/"Loop Control"> => 񸞕
L<perlsyn/"PODs: Embedded Documentation"> => 񲡩
L<perlsyn/"Plain Old Comments (Not!)"> => 񷀢
L<perlsyn/"Simple Statements"> => 񷑂
L<perlsyn/"Smart matching in detail"> => 񰥦
L<perlsyn/"Switch statements"> => 񸞗
L<perlsyn/Return value> => 񙑒
L<perlsyn> => 񩌣
L<perlthanks|perlthanks> => 񹡵
L<perlthrtut> => 񲌵
L<perltie> => 񸝓
L<perltoc> => 񩉱
L<perltooc> => 񸝖
L<perltoot/"AUTOLOAD: Proxy Methods"> => 񢤲
L<perltoot/"Overridden Methods"> => 񢤉
L<perltoot> => 񸙨
L<perltrap> => 񷜹
L<perltru64> => 񳐹
L<perlunicode/"Security Implications of Unicode"> => 񷈈
L<perlunicode/"User-Defined Case Mappings (for serious hackers only)"> => 񤦁
L<perlunicode/"User-Defined Character Properties"> => 񡁄
L<perlunicode/"When Unicode Does Not Happen"> => 񸘢
L<perlunicode/Non-character code points> => 񠄘
L<perlunicode/Scripts> => 񹕦
L<perlunicode/The "Unicode Bug"> => 񹖂
L<perlunicode/Unicode Character Properties> => 񵁉
L<perlunicode/User-Defined Case Mappings (for serious hackers only)> => 񡅱
L<perlunicode/User-Defined Character Properties> => 񵁒
L<perlunicode/When Unicode Does Not Happen> => 񹜣
L<perlunicode> => 񹠐
L<perlunifaq> => 񹠉
L<perluniintro> => 񹠑
L<perluniprops/Properties accessible through \p{} and \P{}> => 񵞙
L<perluniprops> => 񹜔
L<perlunitut> => 񹝰
L<perlvar/"$."> => 񤑀
L<perlvar/"$/"> => 񥘅
L<perlvar/"$["> => 񡄠
L<perlvar/"${^GLOBAL_PHASE}"> => 񙌶
L<perlvar/"${^UNICODE}"> => 񹐷
L<perlvar/"The Syntax of Variable Names"> => 񰆙
L<perlvar/$[> => 񡀩
L<perlvar/$\> => 񠥇
L<perlvar/$^F> => 񥢒
L<perlvar/$^P> => 񘑠
L<perlvar/$^S> => 񤑩
L<perlvar/%INC> => 񥜁
L<perlvar/%SIG> => 񸌰
L<perlvar/@INC> => 񤒅
L<perlvar> => 򁁆
L<perlvmesa> => 񳑁
L<perlvms/"exec LIST"> => 񠜳
L<perlvms/$?> => 򀝁
L<perlvms> => 񷄘
L<perlvos> => 񳑃
L<perlwin32> => 񳑄
L<perlxs/"The PROTOTYPES: Keyword"> => 򁑵
L<perlxs/Thread-aware system interfaces> => 񡙒
L<perlxs> => 򁘢
L<perlxstut> => 򁅇
L<piconv> => 񹥗
L<pipes|/pipe> => 񧐳
L<pl2pm|pl2pm> => 񹥄
L<plain old documentation|perlpod> => 񰕤
L<pod2html> => 񲕷
L<pod2html|pod2html> => 񹤳
L<pod2latex|pod2latex> => 񹠦
L<pod2man(1)> => 񙢇
L<pod2man> => 񲕸
L<pod2man|pod2man> => 񹤱
L<pod2text|pod2text> => 񹠘
L<pod2usage|pod2usage> => 񹤴
L<podchecker> => 񲡰
L<podchecker|podchecker> => 񹤶
L<podselect|podselect> => 񹤵
L<pos()|perlfunc/"index STR,SUBSTR,POSITION"> => 񠌖
L<prctl(2)> => 񙌣
L<print|perlfunc/print> => 񧘑
L<processes|/process> => 񧘨
L<program|/executable file> => 񧁉
L<protocols|/protocol> => 񧌢
L<prove> => 񹥘
L<psed> => 񹡓
L<pstruct|pstruct> => 񹢄
L<ptar(1)> => 񙘀
L<ptar> => 񹥠
L<ptardiff> => 񹥡
L<ptargrep(1)> => 񙘁
L<ptargrep> => 񹤕
L<pwd_mkdb> => 񣁔
L<qualifying|/qualified> => 񦠑
L<quantifier|/Quantifiers> => 񳖂
L<quantifier|perlre/Quantifiers> => 񵁣
L<quotemeta|perlfunc/quotemeta> => 񹕴
L<re/"'/flags' mode"> => 񳥑
L<re/'debug' mode> => 񶠕
L<re> => 򀒗
L<readline|perlfunc/"readline EXPR"> => 񠉷
L<readline|perlfunc/readline> => 񧝃
L<references|/reference> => 񧍉
L<ref|perlfunc/ref> => 񦡰
L<require|perlfunc/require> => 񧔳
L<roffitall|roffitall> => 񹤹
L<s2p|s2p> => 񹥁
L<scalar values|/scalar value> => 񧞗
L<scalar|perlfunc/scalar> => 񧑥
L<script kiddies|/script kiddie> => 񧅅
L<seek|/"seek FILEHANDLE,POSITION,WHENCE"> => 񦊙
L<select|perlfunc/select> => 񦥉
L<sendmail> => 񣍉
L<separators|/separator> => 񧝆
L<setlocale() function|perllocale/The setlocale function> => 񳘇
L<setlocale()|/The setlocale function> => 񩡘
L<sha1sum(1)> => 񙙳
L<shasum> => 񹥢
L<shells|/shell> => 񧅧
L<sigtrap> => 񙠑
L<somedoc/About the C<-M> Operator> => 񲡵
L<sort|perlfunc/sort> => 񦙶
L<splain|splain> => 񹤷
L<split|perlfunc/split> => 񴔘
L<split|perlfunc> => 񴔨
L<stat()|perlfunc/"stat FILEHANDLE"> => 񠀁
L<stat> => 񧌷
L<statements|/statement> => 񦞆
L<stat|perlfunc/stat> => 񧐧
L<strict> => 򀝧
L<strict|strict> => 񰕄
L<strings|/string> => 񧌲
L<subroutines|/subroutine> => 񧜕
L<substr()|perlfunc/"substr EXPR,OFFSET,LENGTH,REPLACEMENT"> => 񠌕
L<substr()|perlfunc/"substr"> => 񢐙
L<switches|/switch> => 񧎒
L<symbolic references|/symbolic reference> => 񧒙
L<symbols|/symbol> => 񧐐
L<syntax trees|/syntax tree> => 񧈠
L<syscalls|/syscall> => 񧌘
L<syscall|perlfunc/syscall> => 񧜲
L<sysopen|perlfunc/sysopen> => 񧄅
L<system|perlfunc/system> => 񧜳
L<tar(1)> => 񙖙
L<terminators|/terminator> => 񧖅
L<the Camel Book|perlbook> => 񘆇
L<the beginning of this section|/Whitespace> => 񴦖
L<the docs on C<$.>|perlvar/"$."> => 񲡶
L<the sort pragma|sort> => 񥤘
L<threads/"THREAD CONTEXT"> => 񸄘
L<threads/"THREAD SIGNALLING> => 񸈇
L<threads::shared> => 񸈣
L<threads> => 񸈙
L<threads|/thread> => 񧕹
L<tie|perlfunc/tie> => 񦥩
L<tokens|/token> => 񧝗
L<triggers|/trigger> => 񧀀
L<true|/"Truth and Falsehood"> => 񷡰
L<truncate|perlfunc/truncate> => 񧝤
L<tty> => 񣅳
L<typeglobs|/typeglob> => 񦚁
L<types|/type> => 񧎅
L<umask|perlfunc/umask> => 񧞄
L<unlink|perlfunc/unlink> => 񧊄
L<unpack()|perlfunc/"unpack"> => 񢐘
L<unpack|perlfunc/unpack> => 񧂀
L<unzip(1)> => 񙖗
L<use 5.012|perlfunc/use VERSION> => 񳚅
L<use bytes|bytes> => 񸥵
L<use feature 'unicode_strings'|feature> => 񸥳
L<use feature 'unicode_strings|feature> => 񳚄
L<use locale|perllocale> => 񳚇
L<use strict 'refs'|strict/strict refs> => 񧜥
L<use strict 'subs'|strict/strict subs> => 񦝨
L<use|perlfunc/use> => 񧍈
L<utf8> => 񹝴
L<values|/value> => 񦢓
L<variables|/variable> => 񧜓
L<vec()|perlfunc/"vec EXPR,OFFSET,BITS"> => 񠌘
L<verbatim|/"Verbatim Paragraph"> => 񲍖
L<version string|perldata/"Version Strings"> => 񥙙
L<version> => 񥒁
L<waitpid|perlfunc/waitpid> => 񧠩
L<wait|perlfunc/wait> => 񧠨
L<warnings::register> => 񙡧
L<warnings> => 򀚈
L<warnings|warnings> => 񰕅
L<warn|perlfunc/warn> => 񧙁
L<websites|"Websites"> => 񘆑
L<wget(1)> => 񙕴
L<workshops|"Workshops"> => 񘆔
L<write|perlfunc/write> => 񧘐
L<xsubpp> => 񹥒
S<" \n-"> => 򀘄
S<20 questions> => 񡀤
S<< <> as >> => 񙅩
S<B<-M> I<manpath>> => 񙅐
S<B<word anchor> > => 񵝶
S<BeOS> => 񳐄
S<C< (?{$c = $c + 1;})>> => 񶙃
S<C< (?{local $c = $c + 1;})>> => 񶙂
S<C<"Hello World">> => 񶘤
S<C<"abc  ">> => 񶘰
S<C<"abc  def ">> => 񶘱
S<C<"fred\n \nstuff\n\n">> => 񢖙
S<C<$ENV{'System$Dir'} . 'Modules'>> => 񳑆
S<C<$_ =~>> => 񶘵
S<C<$kwds =~ /\b($command\w*)/g>> => 񶘹
S<C<$regexp = shift;>> => 񶘥
S<C<$string =~ /(abd|abc)(df|d|de)/;>> => 񶘨
S<C<$string eq 'bert'>> => 񶘧
S<C<$time =~ /(\d\d):(\d\d):(\d\d)/>> => 񶘩
S<C<$x ? $y     :  $z>> => 񲡳
S<C<' '>> => 񦕀
S<C<'\ '>> => 񶘲
S<C<'if () {} else {}'>> => 񶙁
S<C<'if () {}'>> => 񶙀
S<C<'o W'>> => 񶘣
S<C<A + COMBINING RING>> => 񶘷
S<C<COMBINING RING>> => 񶘸
S<C<GTT GAA>> => 񶘴
S<C<SE<lt>$x ? $y : $zE<gt>>> => 񲖓
S<C<[ ]>> => 񶘳
S<C<no locale>> => 񰅇
S<C<no warnings 'all'>> => 񦔸
S<C<print if /$regexp/;>> => 񶘦
S<C<split(' ')>> => 񦕃
S<C<split(' ', $_)>> => 񦕄
S<C<split(/ /)>> => 񦕂
S<C<system('rm -rf *');>> => 񶙄
S<C<use locale>> => 񰅑
S<C<use re 'eval';>> => 񶙆
S<C<use re 'eval'>> => 񶙅
S<Irix 5> => 񳌹
S<L</Autoloaded Functions>> => 񲡴
S<Mac OS X> => 񳎂
S<Mac OS> => 񳎇
S<Part 2> => 񶍕
S<Plan 9> => 񳍹
S<RISC OS> => 񳐈
S<Win32> => 񳉧
S<[ B<-C [I<number/list>] >]> => 񷅂
S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<module> ] [ B<-M>[B<->]I<'module...'> ] [ B<-f> ]> => 񷄵
S<[ B<-S> ]> => 񷄷
S<[ B<-cw> ] [ B<-d>[B<t>][:I<debugger>] ] [ B<-D>[I<number/list>] ]> => 񷄳
S<[ B<-hv> ] [ B<-V>[:I<configvar>] ]> => 񷄲
S<[ B<-i>[I<extension>] ]> => 񷄹
S<[ B<-pna> ] [ B<-F>I<pattern> ] [ B<-l>[I<octal>] ] [ B<-0>[I<octal/hexadecimal>] ]> => 񷄴
S<[ B<-sTtuUWX> ]> => 񷄱
S<[ B<-x>[I<dir>] ]> => 񷄸
S<[ [B<-e>|B<-E>] I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]...> => 񷅀
S<[ \f\n\r\t]> => 񹆃
S<git add --interactive> => 񦕠
S<git add I<FILE ...>> => 񦙑
S<sizeof(struct msqid_ds *)> => 񠒖
S<sizeof(struct semid_ds *)> => 񠒗
S<sizeof(struct shmid_ds *)> => 񠒘
S<use encoding> => 񱅥
X<!=> => 񰥡
X<!> => 񷞁
X<!~> => 񰡵
X<""> => 񱍹
X<"> => 񱍸
X<#!> => 񶜆
X<#> => 񸁴
X<$!> => 򀚓
X<$"> => 򀁒
X<$#> => 򀝒
X<$$> => 򀁕
X<$%> => 򀖕
X<$&> => 򀍵
X<$'> => 򀐅
X<$(> => 򀁤
X<$)> => 򀁹
X<$*> => 򀝗
X<$+> => 򀐐
X<$+{name}> => 񳠙
X<$,> => 򀔨
X<$-> => 򀖙
X<$.> => 򀔲
X<$/, regexes in> => 񢙂
X<$/> => 򀕉
X<$0> => 򀄀
X<$1> => 򀍲
X<$2> => 򀍳
X<$3> => 򀍴
X<$4> => 񳢆
X<$5> => 񳢇
X<$6> => 񳢈
X<$7> => 񳢉
X<$8> => 񳢐
X<$9> => 񳢑
X<$:> => 򀘁
X<$;> => 򀄦
X<$=> => 򀘅
X<$> => 񳜒
X<$?> => 򀜠
X<$@> => 򀝄
X<$ACCUMULATOR> => 򀖁
X<$ARG> => 򀀠
X<$ARGV> => 򀔑
X<$ARRAY_BASE> => 򀝣
X<$BASETIME> => 򀌃
X<$CHILD_ERROR> => 򀜡
X<$COMPILING> => 򀅖
X<$DEBUGGING> => 򀅣
X<$EFFECTIVE_GROUP_ID> => 򀂁
X<$EFFECTIVE_USER_ID> => 򀄸
X<$EGID> => 򀂀
X<$ERRNO> => 򀚔
X<$EUID> => 򀄷
X<$EVAL_ERROR> => 򀝅
X<$EXCEPTIONS_BEING_CAUGHT> => 򀚂
X<$EXECUTABLE_NAME> => 򀌸
X<$EXTENDED_OS_ERROR> => 򀙥
X<$FORMAT_FORMFEED> => 򀖓
X<$FORMAT_LINES_LEFT> => 򀘀
X<$FORMAT_LINES_PER_PAGE> => 򀘆
X<$FORMAT_NAME> => 򀘓
X<$FORMAT_PAGE_NUMBER> => 򀖖
X<$FORMAT_TOP_NAME> => 򀘈
X<$GID> => 򀁥
X<$INPLACE_EDIT> => 򀈶
X<$INPUT_LINE_NUMBER> => 򀔴
X<$INPUT_RECORD_SEPARATOR, regexes in> => 񢙃
X<$INPUT_RECORD_SEPARATOR> => 򀕑
X<$LAST_PAREN_MATCH> => 򀐑
X<$LAST_REGEXP_CODE_RESULT> => 򀒒
X<$LAST_SUBMATCH_RESULT> => 򀐓
X<$LIST_SEPARATOR> => 򀁓
X<$MATCH> => 򀍶
X<$NR> => 򀔳
X<$OFMT> => 򀝓
X<$OFS> => 򀔩
X<$OLD_PERL_VERSION> => 򀝩
X<$ORS> => 򀕥
X<$OSNAME> => 򀉆
X<$OS_ERROR> => 򀚕
X<$OUTPUT_AUTOFLUSH> => 򀕳
X<$OUTPUT_FIELD_SEPARATOR> => 򀔰
X<$OUTPUT_RECORD_SEPARATOR> => 򀕦
X<$PERLDB> => 򀉠
X<$PERL_VERSION> => 򀌙
X<$PID> => 򀁖
X<$POSTMATCH> => 򀐆
X<$PREMATCH> => 򀎆
X<$PROCESS_ID> => 򀁗
X<$PROGRAM_NAME> => 򀄁
X<$REAL_GROUP_ID> => 򀁦
X<$REAL_USER_ID> => 򀄳
X<$RS, regexes in> => 񢙄
X<$RS> => 򀕐
X<$SUBSEP> => 򀄧
X<$SYSTEM_FD_MAX> => 򀅶
X<$UID> => 򀄲
X<$WARNING> => 򀚆
X<$[> => 򀝢
X<$\> => 򀕤
X<$]> => 򀝨
X<$^> => 򀘇
X<$^A> => 򀖀
X<$^C> => 򀅕
X<$^CHILD_ERROR_NATIVE> => 򀙖
X<$^D> => 򀅢
X<$^E> => 򀙤
X<$^F> => 򀅵
X<$^H> => 򀈁
X<$^I> => 򀈵
X<$^L> => 򀖒
X<$^M> => 򀈹
X<$^N> => 򀐒
X<$^O> => 򀉅
X<$^P> => 򀉙
X<$^R> => 򀒑
X<$^S> => 򀚁
X<$^T> => 򀌂
X<$^V> => 򀌘
X<$^W> => 򀚅
X<$^X> => 򀌷
X<$_> => 򀀙
X<$`> => 򀎒
X<$a> => 򀅃
X<$b> => 򀅄
X<${^ENCODING}> => 򀅧
X<${^GLOBAL_PHASE}> => 򀆈
X<${^MATCH}> => 򀎁
X<${^OPEN}> => 򀉗
X<${^POSTMATCH}> => 򀐄
X<${^PREMATCH}> => 򀎓
X<${^RE_DEBUG_FLAGS}> => 򀒕
X<${^RE_TRIE_MAXBUF}> => 򀒘
X<${^TAINT}> => 򀌇
X<${^UNICODE}> => 򀌑
X<${^UTF8CACHE}> => 򀌔
X<${^UTF8LOCALE}> => 򀌕
X<${^WARNING_BITS}> => 򀚐
X<${^WIN32_SLOPPY_STAT}> => 򀌩
X<$|> => 򀕰
X<$~> => 򀘒
X<%!> => 򀜈
X<%+> => 򀐱
X<%-> => 򀒁
X<%::> => 񰈓
X<%=> => 񱁑
X<%> => 񰤗
X<%ENV> => 򀅱
X<%ERRNO> => 򀜐
X<%INC> => 򀈦
X<%LAST_MATCH_START> => 򀒂
X<%LAST_PAREN_MATCH> => 򀐲
X<%OS_ERROR> => 򀜉
X<%SIG> => 򀉤
X<%^H> => 򀈐
X<%main::> => 񰈔
X<&&=> => 񱁄
X<&&> => 񰦅
X<&=> => 񱁃
X<&> => 񷘧
X<''> => 񱍵
X<'> => 񱍴
X<()> => 񳜇
X<(*ACCEPT)> => 񴉗
X<(*COMMIT)> => 񴉃
X<(*F)> => 񴉐
X<(*FAIL)> => 񴉉
X<(*MARK)> => 񴈘
X<(*PRUNE)> => 񴆕
X<(*PRUNE:NAME)> => 񴆖
X<(*SKIP)> => 񴈅
X<(> => 񳜆
X<(?!)> => 񴀀
X<(?#)> => 񳤴
X<(?&NAME)> => 񴄠
X<(?'NAME')> => 񴀙
X<(?()> => 񴄤
X<(?)> => 񳥁
X<(?+1)> => 񴄃
X<(?+PARNO)> => 񴄅
X<(?-1)> => 񴄂
X<(?-PARNO)> => 񴄄
X<(?0)> => 񴄁
X<(?1)> => 񴂙
X<(?:)> => 񳥲
X<(?=)> => 񳦔
X<(??{})> => 񴁶
X<(?PARNO)> => 񴂘
X<(?R)> => 񴄀
X<(?^)> => 񳥂
X<(?^:)> => 񳥵
X<(?{})> => 񴀷
X<(?|)> => 񳦆
X<(TYPE)> => 񱂆
X<**=> => 񱁀
X<**> => 񰡐
X<*=> => 񱁂
X<*> => 񷕐
X<*?> => 񳜳
X<*foo{THING}> => 񵉧
X<++> => 񰡀
X<+=> => 񱁁
X<+> => 񳜠
X<+?> => 񳜴
X<,> => 񱁖
X<--> => 񰡃
X<-0> => 񶜲
X<-=> => 񱁅
X<-> => 񰤥
X<-A> => 񤁅
X<-B> => 񤁃
X<-C> => 񶝈
X<-D> => 񶠁
X<-DDEBUGGING> => 񶠃
X<-E> => 񶠩
X<-F> => 񶡑
X<-I> => 񶡷
X<-M> => 񶤃
X<-O> => 񤀧
X<-R> => 񤀤
X<-S> => 񶥧
X<-T> => 񶦁
X<-U> => 񶦈
X<-V> => 񶦕
X<-W> => 񷀉
X<-X> => 񷀔
X<-a> => 񶝀
X<-b> => 񤀶
X<-c> => 񶝳
X<-d> => 񶞉
X<-dt> => 񶞐
X<-e> => 񶠤
X<-f> => 񶠳
X<-g> => 񤁀
X<-h> => 񶡗
X<-i> => 񶡠
X<-k> => 񤁁
X<-l> => 񶢃
X<-m> => 񶤂
X<-n> => 񶤸
X<-o> => 񤀣
X<-p> => 񶥑
X<-r> => 񤀠
X<-s> => 񶥠
X<-t> => 񶥵
X<-u> => 񶦄
X<-v> => 񶦓
X<-w> => 񶦙
X<-x> => 񷀙
X<-z> => 񤀩
X<... operator> => 񱁙
X<...> => 񱁘
X<..> => 񱀔
X<.=> => 񱁐
X<.> => 񳜕
X<//=> => 񱁉
X<//> => 񱄁
X</=> => 񱁆
X</> => 񰢃
X</a> => 񳙵
X</aa> => 񳙶
X</c> => 񳕔
X</d> => 񳕗
X</e> => 񱍉
X</etc/passwd> => 񣡐
X</g> => 񳕓
X</i> => 񳔸
X</l> => 񳘓
X</m> => 񳞂
X</o, regular expressions> => 񢙲
X</o> => 񱍆
X</p> => 񳤙
X</r> => 񱍐
X</s> => 񳜖
X</u> => 񳘶
X</x> => 񳖔
X<0> => 񷞄
X<::> => 񰆃
X<:bytes> => 񷁆
X<:crlf> => 񷁑
X<:mmap> => 񷁓
X<:perlio> => 񷁕
X<:pop> => 񷁗
X<:raw> => 񷁘
X<:stdio> => 񷁤
X<:unix> => 񷁨
X<:utf8> => 񷁲
X<:win32> => 񷁴
X<;> => 񷝴
X<< $< >> => 񹥦
X<< $> >> => 񹥨
X<< (?<NAME>) >> => 񳒃
X<< -> >> => 񰝠
X<< < >> => 񰝥
X<< <= >> => 񰝧
X<< <=> >> => 񰝳
X<< <> >> => 񷜰
X<< > >> => 񰝦
X<< >= >> => 񰝨
X<< BZ<><> >> => 񲌹
X<< CZ<><> >> => 񲍀
X<< EZ<><> >> => 񲍂
X<< FZ<><> >> => 񲍃
X<< IZ<><> >> => 񲌸
X<< LZ<><> >> => 񲍁
X<< SZ<><> >> => 񲍄
X<< XZ<><> >> => 񲍅
X<< ZZ<><> >> => 񲍆
X<< \k<name> >> => 񳑷
X<< debugger command, < >> => 񘜶
X<< debugger command, << >> => 񘜷
X<< debugger command, > >> => 񘝀
X<< ge >> => 񰝲
X<< gt >> => 񰝰
X<< le >> => 񰝱
X<< lt >> => 񰝩
X<< | >> => 񣑄
X<<< << >>> => 񰞃
X<<< <<= >>> => 񰝴
X<<< >> >>> => 񰝣
X<<< >>= >>> => 񰝵
X<<< debugger command, >> => 񘝁
X<==> => 񰥠
X<=> => 񱀹
X<=back> => 񲎄
X<=begin> => 񲐆
X<=cut> => 񲎙
X<=encoding> => 񲐦
X<=end> => 񲐇
X<=for> => 񲐈
X<=head1> => 񲍨
X<=head2> => 񲍩
X<=head3> => 񲍰
X<=head4> => 񲍱
X<=item> => 񲎃
X<=over> => 񲎂
X<=pod> => 񲐂
X<=~> => 񰡴
X<?:> => 񱀶
X<?> => 񳜲
X<??> => 񳜵
X<@*> => 񣑦
X<@+> => 򀐙
X<@-> => 򀑄
X<@> => 񣑒
X<@ARG> => 򀁄
X<@ARGV> => 򀔒
X<@F> => 򀆃
X<@INC> => 򀈔
X<@ISA> => 񰙨
X<@LAST_MATCH_END> => 򀐠
X<@LAST_MATCH_START> => 򀑅
X<@_> => 򀁃
X<ARGV> => 򀔘
X<ARGVOUT> => 򀔣
X<ASCII> => 񤊂
X<AUTOLOAD> => 񷚔
X<Algorithm::Loops> => 񢆒
X<AoA, debugging> => 񡐇
X<AoA> => 񡐘
X<AoH, debugging> => 񡐉
X<AoH> => 񡐢
X<Array::Iterator::Circular> => 񢅵
X<B> => 񲑄
X<BEGIN> => 񰉉
X<BSD::Itimer> => 񣁨
X<BSD::Resource> => 񣆅
X<Branch reset> => 񳦇
X<C<chmod> and C<unlink()> Under Different Operating Systems> => 񲡱
X<C> => 񲑒
X<CGI.pm> => 񣊐
X<CGI> => 񣊑
X<CHECK> => 񰉑
X<CLEAR> => 񸌓
X<CLONE> => 񰍠
X<CLONE_SKIP> => 񰍡
X<CLOSE> => 񸍴
X<CORE::GLOBAL> => 񷙉
X<CORE> => 񷙈
X<CPU> => 񣆇
X<CamelBones> => 񡠨
X<DATA> => 񘍇
X<DEBUGGING> => 񶠂
X<DELETE> => 񸌒
X<DESTROY> => 񸍹
X<DFA> => 񢝸
X<DOES> => 񰜖
X<DOS> => 񤄱
X<Date::Calc> => 񡦆
X<DateTime> => 񡦅
X<E> => 񲒕
X<END> => 񰉓
X<EOF> => 񸍤
X<EXISTS> => 񸌔
X<EXTEND> => 񸉩
X<F> => 񲔙
X<FETCH> => 񸌐
X<FETCHSIZE> => 񸉡
X<FIRSTKEY> => 񸌖
X<FORMAT_LINE_BREAK_CHARACTERS> => 򀘂
X<File::Copy> => 񢐇
X<File::Tail> => 񢕑
X<Fischer-Krause> => 񢆕
X<GC> => 񰝃
X<GETC> => 񸍢
X<GUI> => 񡠢
X<Greenwich> => 񤡁
X<Gtk2> => 񡠧
X<Gtk> => 񡠦
X<HOME> => 񷀧
X<HTML> => 񢘳
X<HoA, debugging> => 񡐈
X<HoA> => 񡐠
X<HoH, debugging> => 񡐐
X<HoH> => 񡐤
X<I/O> => 񣙠
X<I> => 񲐸
X<INIT> => 񰉒
X<INPUT_RECORD_SEPARATOR> => 񤉐
X<IO::Handle> => 񢕐
X<IO::String> => 񢑈
X<IP> => 񣡨
X<IPC> => 񣠧
X<InStr> => 񤢘
X<Knuth> => 񢆓
X<L> => 񲑘
X<LOGDIR> => 񷀨
X<List::Permutor> => 񢆐
X<NEXTKEY> => 񸌗
X<NFA> => 񢝹
X<OOP> => 񰙔
X<O_CREAT> => 񦅄
X<O_EXCL> => 񦅐
X<O_RDONLY> => 񦄵
X<O_RDWR> => 񦄶
X<O_TRUNC> => 񦅔
X<O_WRONLY> => 񦄷
X<PARNO> => 񢚒
X<PATH> => 񷀩
X<PERL5DB> => 񷂃
X<PERL5DB_THREADED> => 񷂅
X<PERL5LIB> => 񷀱
X<PERL5OPT> => 񷀵
X<PERL5SHELL> => 񷂆
X<PERLIO> => 񷀹
X<PERLIO_DEBUG> => 񷂀
X<PERLLIB> => 񷂂
X<PERL_ALLOW_NON_IFS_LSP> => 񷂐
X<PERL_DEBUG_MSTATS> => 񷂑
X<PERL_DESTRUCT_LEVEL> => 񷂓
X<PERL_DL_NONLAZY> => 񷂖
X<PERL_ENCODING> => 񷂘
X<PERL_HASH_SEED> => 񷄀
X<PERL_HASH_SEED_DEBUG> => 񷄆
X<PERL_MEM_LOG> => 񷄒
X<PERL_ROOT> => 񷄗
X<PERL_SIGNALS> => 񷄠
X<PERL_UNICODE> => 񷄤
X<POD, command> => 񲍦
X<POD, embedding> => 񲕢
X<POD, formatting code, bold> => 񲑅
X<POD, formatting code, code> => 񲑓
X<POD, formatting code, escape> => 񲒖
X<POD, formatting code, escaping with multiple brackets> => 񲕅
X<POD, formatting code, filename> => 񲔠
X<POD, formatting code, hyperlink> => 񲑙
X<POD, formatting code, index entry> => 񲔱
X<POD, formatting code, italic> => 񲐹
X<POD, formatting code, non-breaking space> => 񲔥
X<POD, formatting code, null> => 񲔶
X<POD, formatting code> => 񲐳
X<POD, intent of> => 񲕐
X<POD, interior sequence> => 񲐵
X<POD, ordinary paragraph> => 񲍘
X<POD, validating> => 񲕤
X<POD, verbatim paragraph> => 񲍤
X<POD> => 񸁧
X<POP> => 񸊆
X<POSIX> => 񢞀
X<PRINT> => 񸍁
X<PRINTF> => 񸍉
X<PUSH> => 񸊄
X<Qt> => 񡠩
X<READ> => 񸍑
X<READLINE> => 񸍔
X<RFC 2396> => 񣊓
X<Regexp::Common> => 񢚔
X<S> => 񲔤
X<SCALAR> => 񸌘
X<SHIFT> => 񸊇
X<SIGALRM> => 񤄁
X<SPLICE> => 񸊉
X<STDERR> => 񦔈
X<STORE> => 񸌑
X<STORESIZE> => 񸉤
X<SUBSCRIPT_SEPARATOR> => 򀄨
X<SUPER> => 񰚘
X<SYS$LOGIN> => 񷄩
X<System V> => 񣠨
X<TIEARRAY> => 񸉒
X<TIEHANDLE> => 񸌸
X<TIEHASH> => 񸌉
X<TIESCALAR> => 񸈸
X<Text::Autoformat> => 񢁗
X<Text::Balanced> => 񢚓
X<The Art of Computer Programming> => 񢆔
X<Tie::Cycle> => 񢅴
X<Time::HiRes> => 񣁧
X<Time::Local> => 񡦇
X<Tk> => 񡠣
X<Today_and_Now> => 񡦐
X<UNITCHECK> => 񰉐
X<UNIVERSAL> => 񰜐
X<UNSHIFT> => 񸊈
X<UNTIE> => 񸎀
X<URI::Escape> => 񣊒
X<URI> => 񣊉
X<UTC> => 񤡀
X<Unicode> => 񤊃
X<Unix> => 񣤵
X<VERSION> => 񰜥
X<WRITE> => 񸌹
X<Windows> => 񤄲
X<Wx> => 񡠤
X<WxWidgets> => 񡠥
X<X> => 񲔰
X<XML> => 񢘲
X<Z> => 񲔵
X<[> => 񵈣
X<[]> => 񵈤
X<\0> => 񱄡
X<\> => 񵈘
X<\A> => 񳝹
X<\B> => 񳝤
X<\D> => 񴤑
X<\E, regex> => 񢠀
X<\E> => 񱅶
X<\G> => 񳞒
X<\H> => 񴤘
X<\K> => 񴀉
X<\L> => 񱅴
X<\N> => 񴤔
X<\N{}> => 񱄤
X<\P> => 񴤓
X<\Q, regex> => 񢞙
X<\Q> => 񱅷
X<\R> => 񴡦
X<\S> => 񴤉
X<\U> => 񱅵
X<\V> => 񴤖
X<\W> => 񴤇
X<\X> => 񴡹
X<\Z> => 񳞀
X<\a> => 񱄘
X<\b> => 񳝸
X<\c> => 񱄢
X<\d> => 񴤐
X<\e> => 񱄙
X<\f> => 񱄖
X<\g> => 񳝂
X<\g{-1}> => 񳠐
X<\g{1}> => 񳠉
X<\g{name}> => 񳠑
X<\h> => 񴤗
X<\k> => 񳝃
X<\l> => 񱅲
X<\n> => 񱈃
X<\o{}> => 񱄥
X<\p> => 񵄦
X<\p{}> => 񵄧
X<\r> => 񱈄
X<\r\n> => 񱈅
X<\s> => 񴤈
X<\t> => 񱄓
X<\u> => 񱅳
X<\v> => 񴤕
X<\w> => 񴤆
X<\x> => 񱄠
X<\z> => 񳞁
X<^*> => 񣑧
X<^=> => 񱁒
X<^> => 񳜑
X<^D> => 񘍐
X<^Z> => 񘍑
X<__DATA__> => 񘍅
X<__END__> => 񘍄
X<__FILE__> => 񘍔
X<__LINE__> => 񘍕
X<__PACKAGE__> => 񘍖
X<`> => 񱙵
X<``> => 񱙶
X<abort> => 񤘹
X<abs> => 񤂔
X<absolute> => 񤂕
X<accept> => 񤂗
X<acos> => 񤌸
X<address> => 񣡩
X<alarm> => 񤄀
X<alias> => 񷤷
X<alnum> => 񵄩
X<alpha> => 񵄨
X<and> => 񱁵
X<antilog> => 񤙖
X<antilogarithm> => 񤙗
X<append> => 񢒑
X<arccosine> => 񤌹
X<arcsine> => 񥡴
X<arctangent> => 񤄡
X<argument list too long> => 񢑧
X<argument> => 񷍒
X<array of arrays, debugging> => 񡐑
X<array of arrays> => 񡐗
X<array of hashes, debugging> => 񡐓
X<array of hashes> => 񡐡
X<array reference> => 񵈨
X<array, anonymous> => 񵈢
X<array, interpolation> => 񘍱
X<array, iterator> => 񤔓
X<array, length> => 񘊕
X<array, multidimensional> => 񡍣
X<array, slice> => 񘐂
X<array, tying> => 񸉆
X<array> => 񣘷
X<arrayref> => 񵈧
X<arrow> => 񰠰
X<ascii> => 񵄰
X<asin> => 񥡳
X<assertion> => 񳝙
X<assignment> => 񱀷
X<associativity> => 񰠁
X<atan2> => 񤄠
X<atomic> => 񴄹
X<attribute> => 񷜔
X<attributes, my> => 񷐒
X<attrs> => 񷜖
X<auto-decrement> => 񰡂
X<auto-increment> => 񰠹
X<autoflush> => 򀕱
X<autoloading> => 񷚓
X<autosplit> => 񶝁
X<autovivification> => 񵉦
X<back> => 񲎇
X<backreference> => 񳠈
X<backslash> => 񵈙
X<backtick> => 񱙷
X<backtrace> => 񙁑
X<backtrack> => 񴉰
X<backtracking> => 񴉱
X<bareword> => 񘍧
X<base class> => 񰙵
X<base> => 񥁐
X<begin> => 񲐉
X<bin> => 񥅄
X<binary> => 񥅃
X<bind> => 񤄦
X<binding> => 񰡲
X<binmode> => 񤄨
X<bit vector> => 񦑗
X<bit> => 񦑖
X<bitwise and> => 񰥱
X<bitwise or> => 񰥶
X<bitwise shift> => 񰤶
X<bitwise xor> => 񰥹
X<blank> => 񵄱
X<bless> => 񰙙
X<block> => 񷥅
X<bold> => 񲑆
X<bool> => 񘉵
X<boolean> => 񘉴
X<brace> => 񷡈
X<bracket, curly> => 񷡆
X<bracket, square> => 񵈦
X<break> => 񤥙
X<breakpoint> => 񘡒
X<bucket> => 񘌅
X<buffer> => 񢌶
X<built-in> => 񷙆
X<call stack> => 񤆄
X<call-by-reference> => 񷍰
X<call-by-value> => 񷍱
X<call> => 񷌸
X<caller> => 񤆃
X<can> => 񰜡
X<capitalize> => 񢁘
X<capture> => 񴀡
X<case, sentence> => 񢁠
X<case, title> => 񢁙
X<case> => 񷥔
X<cat> => 񰤨
X<catch> => 񤕓
X<cd> => 񤈳
X<character class, negation> => 񵆈
X<character class> => 񵄥
X<character> => 񤜩
X<chart> => 񣑈
X<chdir> => 񤈲
X<child> => 񤚒
X<chmod> => 񤉀
X<chomp> => 񤉉
X<chop> => 񤉨
X<chown> => 񤉵
X<chr> => 񤊀
X<chroot> => 񤊐
X<circular reference> => 񰝄
X<circular> => 񢅲
X<class, base> => 񰙶
X<class, creation> => 񢡒
X<class> => 񰙦
X<clearerr> => 񢕒
X<clobber> => 񢑘
X<clobbering> => 񢑠
X<close> => 񤊕
X<closedir> => 񤌈
X<closure> => 񷑰
X<cmp> => 񰥥
X<cntrl> => 񵄲
X<code> => 񲑔
X<comma> => 񱁔
X<command switches> => 񶜩
X<comment> => 񸁲
X<compile, regular expressions> => 񢙳
X<complex data structure, debugging> => 񡐆
X<complex data structure> => 񡍉
X<concat> => 񰤩
X<concatenate> => 񰤰
X<concatenation> => 񰤧
X<connect> => 񤌐
X<constant folding> => 񱜥
X<constant> => 񷙀
X<constructor> => 񵉢
X<context> => 񦒗
X<continue> => 񷢅
X<control flow> => 񣜨
X<copy> => 񢐅
X<core> => 񤔀
X<cos> => 񤌶
X<cosine> => 񤌷
X<counter> => 񢒉
X<crypt> => 񤍂
X<cryptography> => 񤍉
X<ctime> => 񦁓
X<curly bracket> => 񷡇
X<cut> => 񲐀
X<cycle> => 񢅶
X<data structure, debugging> => 񡐅
X<data structure> => 񵈃
X<data type> => 񘈳
X<data> => 񘍉
X<date> => 񣢐
X<day> => 񡦉
X<daylight saving time> => 񡦈
X<dbm> => 񤍦
X<dbmclose> => 񤍣
X<dbmopen> => 񤍥
X<debug> => 񘝃
X<debugger command, !!> => 񘢃
X<debugger command, !> => 񘢁
X<debugger command, -> => 񘠔
X<debugger command, .> => 񘠖
X<debugger command, => => 񘤅
X<debugger command, A> => 񘡗
X<debugger command, B> => 񘡓
X<debugger command, H> => 񘢐
X<debugger command, L> => 񘠦
X<debugger command, M> => 񘤇
X<debugger command, R> => 񘢖
X<debugger command, S> => 񘠧
X<debugger command, T> => 񘞕
X<debugger command, V> => 񘝹
X<debugger command, W> => 񘡠
X<debugger command, X> => 񘞅
X<debugger command, ^D> => 񘢓
X<debugger command, a> => 񘡔
X<debugger command, b> => 񘡈
X<debugger command, c> => 񘠅
X<debugger command, f> => 񘠗
X<debugger command, h> => 񘝠
X<debugger command, l> => 񘠆
X<debugger command, m> => 񘤆
X<debugger command, man> => 񘤈
X<debugger command, n> => 񘠀
X<debugger command, o> => 񘡥
X<debugger command, p> => 񘝤
X<debugger command, q> => 񘢒
X<debugger command, r> => 񘠁
X<debugger command, s> => 񘞘
X<debugger command, source> => 񘢆
X<debugger command, t> => 񘠰
X<debugger command, v> => 񘠕
X<debugger command, w> => 񘡘
X<debugger command, x> => 񘝰
X<debugger command, y> => 񘞇
X<debugger command, {> => 񘡷
X<debugger command, {{> => 񘡸
X<debugger command, |> => 񘤁
X<debugger command, ||> => 񘤂
X<debugger option, AutoTrace> => 񘥅
X<debugger option, DumpDBFiles> => 񘦔
X<debugger option, DumpPackages> => 񘦖
X<debugger option, DumpReused> => 񘦘
X<debugger option, HighBit> => 񙀃
X<debugger option, LineInfo> => 񘥉
X<debugger option, NonStop> => 񙀵
X<debugger option, PrintRet> => 񘥘
X<debugger option, ReadLine> => 񙀳
X<debugger option, ShellBang> => 񘤥
X<debugger option, TTY> => 񙀠
X<debugger option, UsageOnly> => 񙀐
X<debugger option, arrayDepth> => 񘦂
X<debugger option, compactDump> => 񘦈
X<debugger option, dieLevel> => 񘤸
X<debugger option, dumpDepth> => 񘦅
X<debugger option, frame> => 񘥤
X<debugger option, globPrint> => 񘦒
X<debugger option, hashDepth> => 񘦃
X<debugger option, inhibit_exit> => 񘥕
X<debugger option, maxTraceLen> => 񘥳
X<debugger option, noTTY> => 񙀢
X<debugger option, ornaments> => 񘥡
X<debugger option, pager> => 񘤨
X<debugger option, quote> => 񙀂
X<debugger option, recallCommand> => 񘤤
X<debugger option, signalLevel> => 񘤶
X<debugger option, tkRunning> => 񘤲
X<debugger option, undefPrint> => 񙀄
X<debugger option, veryCompact> => 񘦉
X<debugger option, warnLevel> => 񘤷
X<debugger option, windowSize> => 񘥶
X<debugger> => 񘝄
X<declaration> => 񷝀
X<decrement> => 񰡁
X<decrypt> => 񤍈
X<default> => 񷥗
X<defined> => 񤎄
X<del> => 񦍓
X<delete> => 񷔸
X<dereference, precedence> => 񡎐
X<dereference> => 񵊃
X<dereferencing, precedence> => 񡎑
X<dereferencing> => 񵊂
X<destructor> => 񰝇
X<die> => 񤐥
X<digest> => 񤍃
X<digit> => 񵄳
X<directory, change> => 񤈴
X<directory, create> => 񥂂
X<directory, remove> => 񥜱
X<directory> => 񣜂
X<do> => 񤒂
X<documentation> => 񸁨
X<dump> => 񤒙
X<dup> => 񢕗
X<dynamic scope> => 񷒔
X<e> => 񥁈
X<each> => 񤔑
X<emacs> => 񡠗
X<encoding, Martian> => 񢞇
X<encoding> => 񲐧
X<encrypt> => 񤍑
X<end of file> => 񷤔
X<end of line> => 񱈂
X<end-of-file> => 񷤓
X<end> => 񲐐
X<endgrent> => 񤞅
X<endhostent> => 񤞆
X<endnetent> => 񤞇
X<endprotoent> => 񤞈
X<endpwent> => 񤞄
X<endservent> => 񤞉
X<eof> => 񷤒
X<eol> => 񱈁
X<epoch> => 񦊆
X<eq> => 񰥣
X<equal> => 񰥗
X<equality> => 񰥖
X<equals> => 񰥘
X<error, handling> => 񤕗
X<error> => 򀘗
X<escape sequence> => 񱄄
X<escape> => 񲒗
X<eval, scope of> => 񷐵
X<eval> => 񸁶
X<evaluate> => 񤕔
X<exception, handling> => 񤕘
X<exception> => 򀘘
X<exec> => 񤘀
X<execute> => 񤘁
X<exists> => 񤘱
X<exit> => 񤘷
X<exp> => 񤙔
X<expand> => 񤠦
X<exponential> => 񤙕
X<exponentiation> => 񰡑
X<expression> => 񷝳
X<false> => 񷞀
X<falsehood> => 񷝸
X<fcntl> => 񤙡
X<fgets> => 񥘁
X<file, append> => 񢒒
X<file, binary patch> => 񢔁
X<file, closing file descriptors> => 񢕙
X<file, copy> => 񢐆
X<file, counter> => 񢒐
X<file, counting lines> => 񢎂
X<file, editing> => 񢍓
X<file, fixed-length records> => 񢐖
X<file, lock> => 񢒀
X<file, open> => 񥅒
X<file, read> => 񥖀
X<file, reading by paragraphs> => 񢔰
X<file, reading one character at a time> => 񢔹
X<file, rename> => 񢑶
X<file, selecting a random line> => 񢕶
X<file, slurping> => 񢔙
X<file, status> => 񦁒
X<file, temporary> => 񢐐
X<file, timestamp> => 񢔔
X<file> => 񣜀
X<filehandle, default> => 񥝹
X<filehandle, indirect> => 񢐥
X<filehandle, local> => 񢐡
X<filehandle, passing> => 񢐢
X<filehandle, position> => 񥝑
X<filehandle, reference> => 񢐣
X<filehandle, tying> => 񸌦
X<filehandle> => 񱙥
X<filename, DOS issues> => 񢕨
X<filename, expansion> => 񤠥
X<filename, special characters> => 񢑲
X<filename> => 񲔡
X<fileno> => 񤙳
X<filetest> => 񰥑
X<fixed-length> => 񢐕
X<float> => 񱝓
X<floating point> => 񱝒
X<floating-point> => 񱝑
X<flock> => 񤙶
X<floor> => 񤤇
X<flush> => 򀕲
X<folding> => 񱜦
X<footer> => 񣔁
X<fopen> => 񥅓
X<for> => 񷤙
X<foreach> => 񷤠
X<fork> => 񤚑
X<formal parameter> => 񷍥
X<format variables> => 񣒆
X<format, fill mode> => 񣑴
X<format, footer> => 񣔀
X<format, internals> => 񣔄
X<format, numeric field> => 񣑥
X<format, picture line> => 񣑑
X<format, repeating lines> => 񣑸
X<format, specifying values> => 񣑩
X<format, suppressing lines> => 񣑷
X<format, text field> => 񣑢
X<format, top of form> => 񣒀
X<format, variables> => 񣒇
X<format> => 񤜅
X<formatting code> => 񲐴
X<formline> => 񤜈
X<frustration> => 񢘵
X<fseek> => 񥝐
X<function> => 񷌲
X<garbage collection> => 񰝂
X<gdbm> => 񤍩
X<getc> => 񤜧
X<getchar> => 񤜨
X<getgrent> => 񤝳
X<getgrgid> => 񤝦
X<getgrnam> => 񤝡
X<gethostbyaddr> => 񤝨
X<gethostbyname> => 񤝢
X<gethostent> => 񤝴
X<getlogin> => 񤜵
X<getnetbyaddr> => 񤝩
X<getnetbyname> => 񤝣
X<getnetent> => 񤝵
X<getpeername> => 񤝁
X<getpgrp> => 񤝃
X<getppid> => 񤝈
X<getpriority> => 񤝖
X<getprotobyname> => 񤝤
X<getprotobynumber> => 񤝰
X<getprotoent> => 񤝶
X<getpwent> => 񤝲
X<getpwnam> => 񤝠
X<getpwuid> => 񤝥
X<gets> => 񥘀
X<getservbyname> => 񤝧
X<getservbyport> => 񤝱
X<getservent> => 񤝷
X<getsockname> => 񤠔
X<getsockopt> => 񤠕
X<gid> => 񣡈
X<given> => 񷥕
X<glob> => 񷔡
X<global variable> => 񰅧
X<global> => 񰅨
X<gmtime> => 񤠹
X<goto> => 񸁄
X<graph> => 񵄴
X<greediness> => 񳜱
X<greedy> => 񳜰
X<grep> => 񷘲
X<group> => 񥠢
X<hard reference> => 񵈕
X<hash of arrays, debugging> => 񡐒
X<hash of arrays> => 񡐙
X<hash of hashes, debugging> => 񡐔
X<hash of hashes> => 񡐣
X<hash reference> => 񵉁
X<hash tie sort DB_File Tie::IxHash> => 񢉙
X<hash, anonymous> => 񵈴
X<hash, bucket> => 񘌄
X<hash, iterator> => 񤔒
X<hash, scalar context> => 񘌃
X<hash, slice> => 񘐃
X<hash, tying> => 񸌁
X<hash> => 񤍄
X<hashbang> => 񶜅
X<hashref> => 񵉀
X<head1> => 񲍲
X<head2> => 񲍳
X<head3> => 񲍴
X<head4> => 񲍵
X<header> => 񣒂
X<here-doc> => 񱐱
X<here-document> => 񱐳
X<heredoc> => 񱐲
X<hex> => 񥅁
X<hexadecimal> => 񥅂
X<host> => 񣡦
X<hostname, domainname, IP address, host, domain, hostfqdn, inet_ntoa, gethostbyname, Socket, Net::Domain, Sys::Hostname> => 񣍕
X<hostname> => 񣡧
X<hyperlink> => 񲑠
X<identifier, case sensitivity> => 񘉖
X<identifier> => 񘉁
X<if> => 񷡑
X<import> => 񷌶
X<in-place> => 񶡡
X<increment> => 񰠸
X<index entry> => 񲔲
X<index> => 񤢖
X<indexOf> => 񤢗
X<indirect object syntax> => 񰚙
X<indirect> => 񰜁
X<inheritance, data> => 񰚀
X<inheritance, method> => 񰙹
X<inheritance> => 񰙩
X<input> => 񣙡
X<int> => 񤤃
X<integer> => 񱝀
X<interior sequence> => 񲐶
X<interpolation, array> => 񘍲
X<interpolation> => 񱒗
X<invert> => 񥜠
X<invocation, indirect> => 񰜀
X<invocation> => 񰚄
X<io> => 񱙣
X<ioctl> => 񤤕
X<isa> => 񰜒
X<italic> => 񲑀
X<item> => 񲎆
X<ithread> => 񰍤
X<jmp> => 񤡇
X<join> => 񤤧
X<jump> => 񤡆
X<key> => 񤤲
X<keys> => 񤤱
X<kill> => 񤥑
X<last> => 񷢃
X<lc> => 񤥲
X<lcfirst> => 񤦇
X<left shift> => 񰤵
X<left> => 񦄁
X<length> => 񤦒
X<lexical scope> => 񷐑
X<lexical variable> => 񷐉
X<lexical> => 񷐈
X<limit> => 񣆆
X<line number> => 򀔵
X<line terminator> => 񱈀
X<line> => 񸁳
X<lines> => 񢎑
X<link, symbolic> => 񦄐
X<link> => 񦄈
X<list context> => 񘉤
X<list operator> => 񱁰
X<list> => 񣙆
X<listen> => 񥀄
X<ln> => 񥁉
X<local, array element> => 񷕀
X<local, composite type element> => 񷔹
X<local, context> => 񷔐
X<local, glob> => 񷔠
X<local, hash element> => 񷕁
X<local, special variable> => 񷔔
X<local, tie> => 񷔙
X<local> => 񷤧
X<localtime> => 񥀓
X<lock, lockfile race condition> => 񢒇
X<lock> => 񥁂
X<locking> => 񤙸
X<log> => 񥁆
X<logarithm> => 񥁇
X<logical and> => 񰦆
X<login> => 񤜶
X<look-ahead, negative> => 񴀁
X<look-ahead, positive> => 񳦕
X<look-around assertion> => 񳦈
X<look-around> => 񳦐
X<look-behind, negative> => 񴀖
X<look-behind, positive> => 񴀇
X<lookahead, negative> => 񴀂
X<lookahead, positive> => 񳦖
X<lookaround assertion> => 񳦉
X<lookaround> => 񳦑
X<lookbehind, negative> => 񴀗
X<lookbehind, positive> => 񴀈
X<loop control> => 񷢀
X<loop, control> => 񷢁
X<lower> => 񵄵
X<lowercase> => 񤦈
X<lseek> => 񦅸
X<lstat> => 񥁔
X<lvalue> => 񷕆
X<m> => 񱉇
X<map> => 񥁡
X<martian> => 񢞆
X<match, approximate> => 񢜘
X<match, position> => 񥔂
X<matching, approximate> => 񢜙
X<md> => 񥂁
X<memory usage> => 񙄰
X<memory> => 񣠱
X<merge> => 񢈸
X<mergesort> => 񥤀
X<message> => 񣠲
X<metacharacter> => 񳜩
X<method> => 񰚅
X<mid> => 񦄀
X<mkdir> => 񥂀
X<mod> => 񰤠
X<mode> => 񤉂
X<modifier> => 񷞓
X<module, thread safe> => 񰍙
X<module, threadsafe> => 񰍘
X<module> => 񰌦
X<modulo> => 񰤙
X<modulus> => 񢅷
X<move> => 񥙤
X<msgctl> => 񥂐
X<msgget> => 񥂘
X<msgrcv> => 񥄂
X<msgsnd> => 񥄇
X<multidimensional array> => 񡍢
X<mv> => 񥙥
X<my> => 񷤦
X<named backreference> => 񳠓
X<named capture buffer> => 񳠔
X<named capture group> => 񳠖
X<named capture> => 񴀠
X<namespace> => 񰅥
X<ndbm> => 񤍧
X<ne> => 񰥤
X<negation, arithmetic> => 񰡙
X<negation, binary> => 񰡤
X<negation> => 񷞃
X<network> => 񣡤
X<new> => 񵉣
X<newline> => 񱆙
X<next> => 񷢂
X<nice> => 񥠰
X<no declarations> => 񥄵
X<no-op> => 񱜧
X<non-breaking space> => 񲔦
X<nop> => 񱜨
X<not> => 񷞂
X<nroff> => 񣑐
X<null> => 񲔷
X<number, arbitrary precision> => 񱝗
X<number, commify> => 񢑑
X<number, literal> => 񘌈
X<number> => 񣘢
X<numeric> => 񣘡
X<object> => 񰙘
X<oct> => 񥄹
X<octal> => 񥅀
X<open> => 񥅐
X<opendir> => 񥈴
X<operator, additive> => 񰤣
X<operator, assignment> => 񱀸
X<operator, binding> => 񰡳
X<operator, bitwise, and> => 񰥰
X<operator, bitwise, or> => 񰥵
X<operator, bitwise, string> => 񱜱
X<operator, bitwise, xor> => 񰥸
X<operator, comma> => 񱁕
X<operator, conditional> => 񱀳
X<operator, equality> => 񰥙
X<operator, filetest> => 񰥒
X<operator, i/o> => 񱙡
X<operator, io> => 񱙢
X<operator, list, rightward> => 񱁩
X<operator, list> => 񰠔
X<operator, logical, and> => 񱁴
X<operator, logical, defined or> => 񱁸
X<operator, logical, defined-or> => 񰦑
X<operator, logical, exclusive or> => 񱁹
X<operator, logical, not> => 񱁲
X<operator, logical, or> => 񱁶
X<operator, logical, xor> => 񱁷
X<operator, match-once> => 񱌨
X<operator, match> => 񱉈
X<operator, missing from perl> => 񱂂
X<operator, multiplicative> => 񰢁
X<operator, named unary> => 񰥅
X<operator, precedence> => 񰞙
X<operator, quote-like> => 񱍱
X<operator, quote> => 񱂇
X<operator, range> => 񱀒
X<operator, regexp> => 񱈨
X<operator, relational> => 񰥕
X<operator, shift> => 񰤳
X<operator, ternary> => 񱀴
X<operator, unary> => 񰡔
X<operator> => 񰞘
X<or> => 񱂀
X<ord> => 񥉁
X<our> => 񥉆
X<output> => 񣙢
X<over> => 񲎅
X<override> => 񷙇
X<owner> => 񤉶
X<p modifier> => 񳤠
X<pack> => 񥉱
X<package> => 񰙧
X<pain> => 񢘴
X<parameter, formal> => 񷍦
X<parameter> => 񷍄
X<parent> => 񤝉
X<parse> => 񤕕
X<pass by reference> => 񷕶
X<pass-by-reference> => 񷕷
X<passwd> => 񤍐
X<password> => 񤍇
X<pause> => 񥡸
X<peer> => 񤝂
X<perl, command switches> => 񶜨
X<perl, environment variables> => 񷀦
X<perl, location of interpreter> => 񶜤
X<perl5> => 񣢕
X<permission> => 񤉁
X<permute> => 񢆑
X<pid> => 񤝐
X<pipe> => 񥒅
X<plain old documentation> => 񲍔
X<plaintext> => 񤍆
X<pod> => 񲐃
X<podchecker> => 񲕣
X<pointer> => 񵈂
X<pop> => 񥒔
X<portability> => 񣤴
X<portable> => 񣤶
X<pos> => 񥔁
X<possessive> => 񴅀
X<power> => 񰡒
X<precedence> => 񰠀
X<precision> => 񥦇
X<preprocessor> => 񸁵
X<print, to multiple files> => 񢔗
X<print> => 񵄶
X<printf> => 񥔧
X<priority> => 񥠩
X<process id> => 񣝶
X<process> => 񣝴
X<profile> => 񙄕
X<profiler> => 񙄗
X<profiling> => 񙄖
X<protocol> => 񣡥
X<prototype> => 񷖉
X<pseudo hash> => 񵌘
X<pseudo-hash> => 񵌗
X<pseudohash> => 񵌙
X<punct> => 񵄷
X<push> => 񥕅
X<q> => 񱍲
X<qq> => 񱍶
X<qr//> => 񢠁
X<qr> => 񱈩
X<qsort> => 񥢘
X<quantifier> => 񳜘
X<quicksort> => 񥢙
X<quote, double> => 񱍷
X<quote, gory details> => 񱑂
X<quote, list> => 񱎘
X<quote, single> => 񱍳
X<quote, words> => 񱎙
X<quotemeta> => 񥕒
X<qw> => 񱎗
X<qx> => 񱙴
X<raise> => 񤐨
X<rand> => 񥕢
X<random> => 񥕣
X<randseed> => 񦀦
X<range> => 񱀓
X<rd> => 񥜰
X<read-write> => 񢑙
X<read> => 񥕹
X<readdir> => 񥖒
X<readline> => 񷤘
X<readlink> => 񥘡
X<readpipe> => 񥘤
X<real> => 񱝔
X<record> => 񡐥
X<recursion> => 񷎐
X<recv> => 񥘱
X<redo> => 񷢄
X<ref> => 񥙐
X<reference, array> => 񵈩
X<reference, circular> => 񰝅
X<reference, creation> => 񵈖
X<reference, hard> => 񵈔
X<reference, hash> => 񵉂
X<reference, numeric context> => 񵊗
X<reference, soft> => 񵌉
X<reference, string context> => 񵌱
X<reference, subroutine> => 񵉉
X<reference, symbolic> => 񵌈
X<reference, use as hash key> => 񵌲
X<reference, use> => 񵊁
X<reference> => 񷕸
X<referencing> => 񵈗
X<regex, HTML> => 񢘱
X<regex, XML> => 񢘰
X<regex, and multibyte characters> => 񢞃
X<regex, capture buffer> => 񳠁
X<regex, capture group> => 񳠃
X<regex, case-insensitive> => 񳔹
X<regex, code in> => 񴀸
X<regex, debugging> => 񙄦
X<regex, efficiency> => 񢜠
X<regex, escaping> => 񢙙
X<regex, in variable> => 񢞕
X<regex, legibility> => 񢘄
X<regex, matching balanced test> => 񢚈
X<regex, multiline> => 񳔰
X<regex, options> => 񱉑
X<regex, postponed> => 񴁷
X<regex, preserve> => 񳕑
X<regex, recursive> => 񴄆
X<regex, relative recursion> => 񴄉
X<regex, single-line> => 񳔴
X<regex, version 8> => 񴌂
X<regex, zero-width assertion> => 񳝠
X<regex> => 񳔘
X<regexp, and multibyte characters> => 񢞄
X<regexp, capture buffer> => 񳠂
X<regexp, capture group> => 񳠄
X<regexp, case-insensitive> => 񳕀
X<regexp, code in> => 񴀹
X<regexp, debugging> => 񙄧
X<regexp, efficiency> => 񢜡
X<regexp, escaping> => 񢙠
X<regexp, legibility> => 񢘅
X<regexp, matching balanced test> => 񢚉
X<regexp, multiline> => 񳔱
X<regexp, optimization> => 񱙗
X<regexp, options> => 񱉉
X<regexp, parse> => 񱘶
X<regexp, postponed> => 񴁸
X<regexp, preserve> => 񳕒
X<regexp, recursive> => 񴄇
X<regexp, replace> => 񱌹
X<regexp, single-line> => 񳔵
X<regexp, substitute> => 񱍀
X<regexp, version 8> => 񴌃
X<regexp, zero-width assertion> => 񳝡
X<regexp> => 񳔙
X<regular expression, and multibyte characters> => 񢞅
X<regular expression, capture buffer> => 񳠅
X<regular expression, capture group> => 񳠇
X<regular expression, case-insensitive> => 񳕁
X<regular expression, code in> => 񴁀
X<regular expression, debugging> => 񙄥
X<regular expression, efficiency> => 񢜢
X<regular expression, escaping> => 񢙡
X<regular expression, legibility> => 񢘆
X<regular expression, matching balanced test> => 񢚐
X<regular expression, multiline> => 񳔲
X<regular expression, named capture buffer> => 񳠕
X<regular expression, named capture group> => 񳠗
X<regular expression, postponed> => 񴁹
X<regular expression, recursive> => 񴄈
X<regular expression, single-line> => 񳔶
X<regular expression, version 8> => 񴌁
X<regular expression, zero-width assertion> => 񳝢
X<regular expression> => 񳔗
X<relational operator> => 񰥔
X<relative backreference> => 񳠒
X<remainder> => 񰤘
X<remove> => 񦍑
X<ren> => 񥙦
X<rename> => 񥙣
X<renice> => 񥠱
X<replace, case preserving> => 񢙅
X<replace> => 񱌸
X<report> => 񣑇
X<require> => 񥙱
X<reset> => 񥜄
X<return value> => 񷍙
X<return> => 񷍠
X<rev> => 񥜙
X<reverse> => 񥜘
X<rewinddir> => 񥜥
X<right shift> => 񰤴
X<right> => 񦄂
X<rindex> => 񥜧
X<rm> => 񦍒
X<rmdir> => 񥜩
X<root> => 񦀠
X<s, case preserving> => 񢙈
X<s> => 񱂕
X<salt> => 񤍅
X<say> => 񥜸
X<scalar context> => 񘉣
X<scalar, constant> => 񰈸
X<scalar, literal> => 񘌆
X<scalar, tying> => 񸈶
X<scalar> => 񥝃
X<scope, dynamic> => 񷒓
X<scope, lexical> => 񷐐
X<sdbm> => 񤍨
X<seed> => 񦀥
X<seek> => 񥝉
X<seekdir> => 񥝴
X<select> => 񥞂
X<semaphore> => 񣠩
X<semctl> => 񥞔
X<semget> => 񥠁
X<semicolon> => 񷝲
X<semop> => 񥠅
X<send> => 񥠒
X<service> => 񣡰
X<setgrent> => 񤝹
X<sethostent> => 񤞀
X<setnetent> => 񤞁
X<setpgrp> => 񥠡
X<setpriority> => 񥠨
X<setprotoent> => 񤞂
X<setpwent> => 񤝸
X<setservent> => 񤞃
X<setsockopt> => 񥠲
X<shared memory> => 񣠰
X<shell> => 񦆖
X<shift operator> => 񰤲
X<shift, left> => 񰥀
X<shift, right> => 񰤹
X<shift> => 񥠴
X<shl> => 񰤷
X<shmctl> => 񥡒
X<shmget> => 񥡘
X<shmread> => 񥡡
X<shmwrite> => 񥡢
X<shr> => 񰤸
X<shutdown> => 񥡦
X<signal> => 񤥒
X<sin> => 񥡱
X<sine> => 񥡲
X<sitecustomize.pl> => 򀌱
X<sitecustomize> => 򀌰
X<size> => 񤦓
X<slash> => 񰢄
X<sleep> => 񥡷
X<slice, hash> => 񢈹
X<slice> => 񘐁
X<slurp> => 񢔘
X<sock> => 񣠓
X<socket> => 񥢇
X<socketpair> => 񥢑
X<soft reference> => 񵌑
X<sort> => 񥢗
X<space> => 񵄸
X<spaceship> => 񰥢
X<special literal> => 񘍃
X<splice> => 񷥀
X<split> => 񥥂
X<sprintf> => 񥥤
X<sqrt> => 񦀙
X<square bracket> => 񵈥
X<square root> => 񦀡
X<srand> => 񦀤
X<stack trace> => 񤆆
X<stack, backtrace> => 񙁒
X<stack> => 񥕆
X<stash> => 񰈒
X<stat> => 񦁑
X<state variable> => 񷑦
X<state> => 񷑥
X<statement modifier> => 񷞒
X<statement, compound> => 񷡄
X<statement> => 񷝱
X<static> => 񷑧
X<stdin> => 񱚖
X<stdout> => 񱚗
X<step> => 񘞙
X<sterr> => 񱚘
X<string, concatenation> => 񰤦
X<string, literal> => 񘌒
X<string, null> => 񘊅
X<string> => 񣖇
X<struct> => 񵈅
X<structure> => 񵈄
X<study> => 񦁸
X<sub, local> => 񵌧
X<sub, nested> => 񵌥
X<sub> => 񷌴
X<subroutine, anonymous> => 񷌵
X<subroutine, argument> => 񷍑
X<subroutine, attribute> => 񷜕
X<subroutine, call> => 񷌷
X<subroutine, declaration> => 񷝗
X<subroutine, local> => 񵌦
X<subroutine, lvalue> => 񷕇
X<subroutine, nested> => 񵌤
X<subroutine, parameter> => 񷍃
X<subroutine, prototype> => 񷖐
X<subroutine, reference> => 񵉈
X<subroutine, return value> => 񷍘
X<subroutine> => 񷌱
X<substitute, case preserving> => 񢙆
X<substitute> => 񱌶
X<substitution, case preserving> => 񢙇
X<substitution> => 񱌷
X<substr> => 񦂘
X<substring> => 񦂙
X<sucking out, will to live> => 񢘶
X<switch> => 񷥓
X<symbol table> => 񰈑
X<symbolic link> => 񦄉
X<symbolic reference> => 񵌐
X<symlink> => 񦄇
X<syntax> => 񷜲
X<syscall> => 񦄓
X<sysopen> => 񦄧
X<sysread> => 񦅡
X<sysseek> => 񦅷
X<system call> => 񦄔
X<system> => 񦆕
X<syswrite> => 񦈰
X<tail> => 񢕉
X<tan> => 񤄢
X<tangent> => 񤄣
X<tell> => 񦉇
X<telldir> => 񦉓
X<term> => 񰠕
X<terminate> => 񤘸
X<ternary> => 񱀵
X<text> => 񤄰
X<thread safe> => 񰍗
X<thread> => 񰍢
X<threads> => 񰍣
X<threadsafe> => 񰍖
X<throw> => 񤐦
X<tie> => 񸈨
X<tied> => 񦊃
X<tilde expansion> => 񢑔
X<tilde> => 񢑓
X<time> => 񦊅
X<timelocal> => 񡦒
X<timer> => 񤄂
X<times> => 񦊓
X<timestamp> => 񢔓
X<top> => 񣒁
X<toupper> => 񦌂
X<tr> => 񱐄
X<transliterate> => 񱐆
X<trigonometric> => 񣘣
X<trigonometry> => 񣘤
X<true> => 񷝹
X<trunc> => 񤤆
X<truncate> => 񦊘
X<truncating> => 񢑢
X<truth> => 񷝷
X<try> => 񤕒
X<type> => 񘈴
X<typecasting> => 񱂅
X<typeglob> => 񷕉
X<uc> => 񦌀
X<ucfirst> => 񦌇
X<uid> => 񣡇
X<umask> => 񦌒
X<unary operator> => 񰡓
X<unbuffer> => 񢌷
X<undef> => 񷝁
X<undefine> => 񦍂
X<undefined> => 񷝂
X<undump> => 񤔁
X<unimporting> => 񥄶
X<uninitialized> => 񷝃
X<unless> => 񷡒
X<unlink> => 񦍉
X<unpack> => 񦍢
X<unshift> => 񦍷
X<untie> => 񸎃
X<until> => 񷡔
X<upper> => 񵄹
X<uppercase> => 񦌈
X<use> => 񦎃
X<user> => 񤉷
X<utime> => 񦐶
X<v-string> => 񘌱
X<values> => 񦑁
X<variable name> => 񘈲
X<variable, built-in> => 񘉆
X<variable, global> => 񰅦
X<variable, lexical> => 񷐇
X<variable, local> => 񷕠
X<variable, name> => 񘈱
X<variable, persistent> => 񷑨
X<variable, punctuation> => 񰆕
X<variable, static> => 񷑩
X<variable, temporary> => 񷒖
X<vec> => 񦑕
X<verbatim> => 񲍥
X<version string> => 񘌩
X<version> => 񥑢
X<vstring> => 񘌰
X<wait> => 񦒂
X<waitpid> => 񦒉
X<wantarray> => 񦒖
X<warn> => 񦔆
X<warning, categories> => 񩠀
X<warning, fatal> => 񩠃
X<warning, lexical> => 񩜴
X<warning, registering> => 񩠑
X<warning, reporting> => 񩠐
X<warning> => 񩜶
X<warnings> => 񩜵
X<when> => 񷥖
X<while> => 񷡓
X<whitespace> => 񴤠
X<wildcard> => 񤠤
X<word> => 񵅀
X<write, into a string> => 񢐹
X<write> => 񦔥
X<x=> => 񱁓
X<x> => 񰤢
X<xdigit> => 񵅁
X<xor> => 񱂁
X<y> => 񱐅
X<yada yada operator> => 񱁠
X<yesterday> => 񡦄
X<zero-width assertion> => 񳝘
X<{> => 񷡉
X<{n,m}> => 񳜤
X<{n,m}?> => 񳜸
X<{n,}> => 񳜣
X<{n,}?> => 񳜷
X<{n}> => 񳜢
X<{n}?> => 񳜶
X<{}> => 񵈶
X<|=> => 񱁇
X<|> => 񳜅
X<||=> => 񱁈
X<||> => 񰦈
X<}> => 񷡐
X<~> => 񰡣
X<~~> => 񰥧
