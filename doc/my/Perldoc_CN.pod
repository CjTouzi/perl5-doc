=head1 PerlDoc 中文计划

将PerlDoc翻译为中文，在此过程中提高文字处理能力和Perl水平。

1. 数据结构，所有文档均采用POD形式。
2. 数据库格式，使用段落匹配形式。以句子为单位进行匹配。

将书籍的中英文版本进行搜集，中英文全部转换为文本。
转换为文本后，使用POD形式排版。
制作一些脚本，能处理POD文档，将POD文档解析成基本的句法单位。

数据库的基本语言单位为句法，就是一句一句的翻译。

head1 -> 标题
head2 ->

代码部分不翻译，但备注进行翻译
解析POD的模块，
同时解析中文和英文版本的POD文档，结构相同。

1. 搜集整理中英文对照的资料，用POD排版完成。
2. 解析pod，将除代码外的数据，按照句法填充到数据库中。
3。 翻译部分，解析POD，将需要翻译的部分，按照语法分段，从
数据库中查询，将返回的结果填充到新的中文POD文档中。然后
使用脚本生成相应HTML,CHM,PDF等资料。

1. 搜集有中英文版本的资料，制作中英文对照的POD资料。
2. 制作数据库，和数据库维护脚本，来进行数据添加和维护。
查询。
2. 制作根据POD资料，生成HTML，PDF，CHM等资料形式的帮助文档。

=head2 先建立框架，数据库框架，来容纳每次辛苦得来的东西。
这个数据库是可以使单机版，可以使SQL,MYSQL等许多形式

推荐使用vim 作为编辑器，标签索引，跳转

使用快速的 Storable 数据库进行存储

 1. 使用主数据库放置中英文对照数据
 2. 使用附属数据库放置索引关键字等其他信息。
 按照需要加载，所有的数据都能持续的保存。
 使用STORABLE 模块 保存散列信息进行保存和交流。避免编码的问题
 所有的中文字符都使用utf8的编码形式。
 需要一个将各种编码转换成UTF8编码的一个脚本。首先将文本资料
 导入，然后，按照utf8格式输出，看是否能够正常显示。
 一般按照两种编码解码的文本，总有一个能正常显示。
 使用这个脚本来预处理中文文档，并保证编码按照UTF8保存。
 交流的时候，使用gbk编码模式，或者所有的文本按照gbk编码
 处理？这样，生成的各种中文文档就可以方便交流了。

 1. 解析POD 将POD解析成需要翻译和不需要翻译的部分。
 代码部分不翻译。C<>L<>部分的东西不翻译。=head1 等表示部分不翻译。
 先解析成一个数组，然后再这个数组的基础上，解析成两个数组。
 解析POD为两个数组。第一个数组是包含一个标识符，标识翻译标志。
 第二个数组标识内容散列,有序号，有内容，保存为两个文件stable文件。
 然后计算生成第三个较小的散列文件，只有序列号和需要翻译的文本。
 使用数据库查询技术，获取所有需要翻译文本对应的记录，将没有的记录
 使用列表进行翻译。

 2. 更新记录的时候，使用POD，解析，获取未翻译列表。
 进行手工翻译，我相信一旦建立起来框架，维护的工作将越来越少。
 -》引申到编译，建立编译数据库，Perl-<c perl->Ruby
 使用自动化工具规范输入，去除一些人为的错误的地方。

 对已断行的处理，自动按照断行合并句子，按照段落中的标点符号断行。
 将段落中的标点符号转换成相应的句子。按照句号断行。
 由标准的POD输入，转换成数据库的句子结构，然后根据索引，恢复成
 POD格式相应的语言版本，输出为UTF8格式。

 关于编译，将最小语法单位进行翻译成->c->字节码等

1: pod 中的注释不删除，原样保留，需翻译，不断行
2. head1->下面的文本不缩进。
3. 所有的格式均保留，缩进的代码部分不翻译
4. 特殊字符的标识符保留，文本描述换行调整，分隔。
5. 使用text::wrapper 自动排版句子
6. 将代码部分的注释也翻译
使用pod::checker 先进行语法分析，纠正错误后，进行解析。
7 正则表达式引用的字符串中如果有一些特殊字符 | \ 等，
需要转义来处理。


1. 找到几个模块，可以按照句子进行拆分合并。
2. 可以按照单词进行拆分。
3 一个开源的字典，可以进行几乎所有单词的查询。

=head1 Storable 模块的用法
用于提交每个POD的翻译结果。
将每次POD翻译的结果，提交为 .sen_storable 格式的标准散列
英文和中文相互对应的格式。按照POD文件名保存。

生僻词列表也采用 Storable 文件格式保存，后缀采用
word_storable 格式，可以自动加载

=head2 SDBM 的用处
尽量不使用这种形式的数据保存形式

=head2 sqlite3 的用途
用于存放翻译数据库，分为单词数据库和句法数据库
先检索句法数据库，找出匹配的记录，如果没有找到匹配的记录。
使用单词数据库，并解析句子为单词进行翻译，将生僻词
按照提示的形式返回，生成需要人工处理的文本。

所有的自动加载都是使用 storable 格式的文件自动加载。

翻译步骤：
1. 将英文POD保存在 English_POD 文件夹中。
2. 使用 POD 语法检查进行排错检查后，放置在 Englishi_POD_checked 文件夹中
3. 使用 句子合并功能的脚本，将POD 进行格式转换 到 English_POD_formated 文件夹
4. 使用翻译提取器，将需要翻译的文本列表提取出来。
   使用自动匹配数据库，获取匹配的列表和无法匹配的列表
   Transfer/Matched and NoMatched 文件夹中
5. 将 Nomatched 文件夹中的文件进行手工翻译。根据模板，使用脚本，
将结果保存为sen_storable后缀的文件，放置在 sen_storable 文件夹中
遇到的生词，按照模板，使用脚本，保存为word_storable 文件。
6. 自动加载所有 storable 文件，更新翻译数据库 Perldoc.sqlite

所有的资源都最后更新到 这个数据库中，这个数据库是自动生长的，
作为整个项目的核心，可以通过很多方式进行充实。

1. 中文翻译资源。
按照章节做成格式相同的POD文档，使用脚本生成 sen_storable 文档。
单词资源做成 word_storable 文档。

POD 制作脚本，自动生成索引列表，使POD系列文档像帮助文档那样，
方便查询和阅读。
也能转换成 chm pdf 等其他形式的帮助文档。

需要制作的脚本和程序
1. 单词模板 和 转换成 word_storable 文档的脚本
2. 句子对应模板 和 转换成 sen_storable 文档的脚本
3. 自动加载 word_storable 文档和 sen_storable 文档的脚本
4. 生成POD tag的脚本。
5. diff 中文和英文对应POD的脚本，生成 sen_storable 文档
6. POD -> CHM 的脚本
7. 根据翻译列表 返回 翻译提示的脚本
8. 根据英文POD，自动生成格式相同完整中文POD的脚本。
9. 数据库中的单词还应当建立正则表达式匹配库，用于
匹配专有名词和不需要翻译的专用词语。
10. 提取pm内容中pod内容的脚本。
过滤源码，将 pod 信息提取出来， 以perl 源码为素材。
activeperl 安装目录为素材。
第三个数据库，是 keyword_storable 格式的文档
这是第四个数据库，是pattern_storable 格式的文档
解析出的翻译结果将更容易翻译。
需要做的工作，将Perl编程，Perl高级编程等书籍转换为
POD中英文对应形式。---耗时1个月
整理现有中英文资料，充实数据库，耗时--一个月
翻译PerlDoc，耗时一个月。
三个月时间，能完成Perldoc 的中文版吗？
同时完成了Pod的帮助功能提升。
主要书籍的帮助提升。
