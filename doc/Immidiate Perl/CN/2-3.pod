2.3. Dynamic Code with eval
2.3. 用eval动态编译代码
There’s also a second form of eval, whose parameter is a string expression instead of a block. It compiles and executes code from a string at runtime. While this is useful and supported, it is also dangerous if any untrustworthy data has gotten into the string. With a few notable exceptions, we recommend you avoid eval on a string. We’ll use it a bit later, and you might see it in other people’s code, so we’ll show you how it works anyway.
eval ‘$sum = 2 + 2′; print "The sum is $sum\n"; 
eval有另外一种用法，其参数是作为一个字串表达式，而不是代码块。在运行时，它将字串临时编译成代码并且执行。这很易用，但也很危险，因为有可能会把具有危害性的代码放到字串里。除了极少数值得一提的例外情况，我们建议你尽量避免这种用法。稍后我们会用这种用法，然后我们就不用这种用法了，我们只是展示它是怎么工作的。
eval ‘$sum = 2 + 2′; 
print "The sum is $sum\n"; 
Perl executes that code in the lexical context of the code around it, meaning that it’s virtually as if we had typed that code right there. The result of the eval is the last evaluated expression, so we really don’t need the entire statement inside the eval.
#!/usr/bin/perl foreach my $operator ( qw(+ – * /) ) { my $result = eval "2 $operator 2"; print "2 $operator 2 is $result\n"; } 
Perl在词法环境中执行那段代码，这意味着我们好像在执行的时候输入这些代码的一样。eval的结果就是最后一个表达式求值的值，所以我们不必在eval中输入整个语句。
#!/usr/bin/perl 
foreach my $operator ( qw(+ – * /) ) { 
        my $result = eval "2 $operator 2"; 
        print "2 $operator 2 is $result\n"; 
        }
Here, we go through the operators + – * / and use each of those inside our eval code. In the string we give to eval, we interpolate the value of $operator into the string. The eval executes the code that the string represents and returns the last evaluated expression, which we assign it to $result.
上例中，我们依次把+ – * /四个操作符用到我们的eval代码块中。在给eval的字串中，我们内插了变量$operator的值。eval执行并返回了我们给出字串的值，并且放到变量$result中。
If eval can’t properly compile and run the Perl code we hand it, it sets $@ just like in its block form. In this example, we want to trap any divide-by-zero errors, but we don’t divide by anything (another sort of error).
print ‘The quotient is ‘, eval ’5 /’, "\n"; warn $@ if $@; 
如果eval不能正确编译和执行我们传给它的Perl代码，它就会像代码块形式的结果一样设置变量$@一个值。在下例中，我们想要捕捉任何除零错误 ，但我们遇到了另外一种错误－－分母缺失。
print ‘The quotient is ‘, eval ’5 /’, "\n"; 
warn $@ if $@; 
The eval catches the syntax error and puts the message in $@, which we check immediately after calling eval.
The quotient is syntax error at (eval 1) line 2, at EOF 
eval捕捉语法错误，然后在我们调用eval后，在检查$@值时，把出错信息放到变量$@中。
The quotient is 
syntax error at (eval 1) line 2, at EOF 
Later, in Chapters 10, 17, and 18, we’ll use this to optionally load modules. If we can’t load the module, Perl normally would stop the program. We’ll catch the error and recover on our own when this happens.
在稍后的第10、17和18章中， 我们会用这种办法来调用可选模块。如果我们调用模块失败，Perl会中止程序。而我们会捕捉到这种错误，并由我们自己以我们的办法恢复程序的运行。
In case you didn’t catch our warning before, we’ll say it again: be very careful with this form of eval. If you can find another way to do what you need, try that first. We’ll use it later, in Chapter 10 to load code from an external file, but then we’ll also show you a much better way to do that too.
万一你还没有注意我们的警告，我们在这里重申：要非常小心这种形式的eval用法。如果你有其它的方法来替代eval用法，那就试试其它方法。我们在后来第10章会用到这种办法从外部文件中载入代码，但我们同样会向你展示出更好的替代方案。


