第二十一章 内部和外部

Perl如何运行
内部数据类型
扩展Perl（在Perl中使用C）
嵌入Perl（在C中使用Perl）
道德故事

就像我们在第十八章讨论过的那样，Perl（该程序本身,）包含一个编译器和一个解释器，用于Perl（这门语言）写的程序。Perl编译器/解释器本身是用C写的。在这一章里，我们将从试图扩展或者嵌入Perl的角度出发，给你勾画一下这个C程序是如何运转的。在扩展（extend)Perl时，实际上你是把一块C程序（我们叫扩展，extension）置于Perl的控制之下，嵌入Perl时，实际上你是把一个Perl解释器置于一个大C程序的控制之下。

我们在这里提供的简短的描述不能取代Perl内部的联机文档：看看perlguts, perlxs, perlxstut, perlcall, peraip和h2xs 的文档，他们都和Perl捆绑在一起发布。同样，除非想扩展或者想嵌入使用Perl，否则你永远用不着这里的东西。

我们首先需要知道一些Perl内部的知识。为了了解随后的大部分内容，还要懂C。还需要一个C编译器运行那些例子，如果最终目的是提供一个可以给其他人使用的模块，那么他们也需要一个C编译器。这里的许多例子只能在类Unix系统上运行。哦，还有就是这些材料可能在将来的Perl版本里面会改变。

换句话说，恐龙在此。

Perl如何运行
给Perl编译器输入Perl程序时，它执行的第一个任务就是词法分析；把程序分解成他的基本语法元素（常被称为记号）。如何程序是：
	
	print "Hello, world!\n";

那么词法分析器把它分解成三个记号：print，"Hello, world!\n"和最后的分号。然后解析记号的顺序了，完成记号之间关系的分析。在Perl中，词法分析和解析之间的界限比在其他语言中更模糊。（也就是说其他计算机语言。如果你明白计算机语句new Critter的所有不同含义可能取决于是有一个叫Critter的包，还是有一个子例程叫new,你可能就明白为什么了。另一方面，我们在英文里面不管什么时候都会消除这种歧义。）

一旦Perl完成了对一段程序的解析并且（假设）理解了该程序，那么Perl就把它编译成一个代表低层操作的操作码组成的树，并且最终执行这课由操作组成的树--除非带着-c（“检查语法”）开关运行Perl，这种情况下Perl在完成编译阶段以后就退出。BEGIN块，CHECK块和use语句是在编译阶段而不是执行阶段运行的。

内部数据类型
在执行Perl程序编译出来的操作码组成的树时，会不断创建、操纵和删除Perl变量。你在Perl里很熟悉的数据类型全部对应着Perl防护罩里的C数据类型，如果你想在这两种语言之间传递数据，那么你就必须知道这些数据类型。

三种C类型定义（typedef）对应着Perl的三种基本数据类型：SV（标量值），AV（数组值）和HV（散列值）。另外，IV是一个简单的有符号整数类型，Perl保证他有足够的空间存放一个指针或者一个整数；而I32和I16分别是Perl保证存放32位和16位指针的类型。为了存放后面三种类型定义的无符号版本，Perl中还有UV,U32和U16类型定义。这三种类型定义都可以使用

