=head1 Operator Characteristics

Z<operator_characteristics>
X<operators; characteristics>

Every operator possesses several important characteristics which govern its
behavior: the number of operands on which it operates, its relationship to
other operators, and its syntactic possibilities.

C<perldoc perlop> and C<perldoc perlsyn> provide voluminous information about
Perl's operators, but the documentation assumes you're already familiar with
some details of how they work. The essential computer science concepts may
sound imposing at first, but once you get past their names, they're
straightforward. You already understand them implicitly.

=head2 Precedence

Z<precedence>
X<precedence>

The I<precedence> of an operator governs when Perl should evaluate it in an
expression. Evaluation order proceeds from highest to lowest precedence.
Because the precedence of multiplication is higher than the precedence of
addition, C<7 + 7 * 10> evaluates to C<77>, not C<140>.

To force the evaluation of some operators before others, group their
subexpressions in parentheses. In C<(7 + 7) * 10>, grouping the addition into a
single unit forces its evaluation before the multiplication. The result is
C<140>.

C<perldoc perlop> contains a table of precedence. Read it, understand it, but
don't bother memorizing it (almost no one does). Spend your time keeping your
expressions simple, and then add parentheses to clarify your intent.

In cases where two operators have the same precedence, other factors such as
associativity (L<associativity>) and fixity (L<fixity>) break the tie.

=head2 Associativity

Z<associativity>
X<associativity>
X<associativity; left>
X<left associativity>
X<associativity; right>
X<right associativity>

The I<associativity> of an operator governs whether it evaluates from left to
right or right to left. Addition is left associative, such that C<2 + 3 + 4>
evaluates C<2 + 3> first, then adds C<4> to the result. Exponentiation is right
associative, such that C<2 ** 3 ** 4> evaluates C<3 ** 4> first, then raises
C<2> to the 81st power.

It's worth your time to memorize the precedence and associativity of the common
mathematical operators, but again simplicity rules the day. Use parentheses to
make your intentions clear.

=begin sidebar

X<C<B::Deparse>>
X<precedence; disambiguation>
X<associativity; disambiguation>

The core C<B::Deparse> module is an invaluable debugging tool. Run C<perl
-MO=Deparse,-p> on a snippet of code to see exactly how Perl handles operator
precedence and associativity. The C<-p> flag adds extra grouping parentheses
which often clarify evaluation order.

Beware that Perl's optimizer will simplify mathematical operations as given as
examples earlier in this section; use variables instead, as in C<$x ** $y **
$z>.

=end sidebar

=head2 Arity

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

The I<arity> of an operator is the number of operands on which it operates.  A
I<nullary> operator operates on zero operands. A I<unary> operator operates on
one operand. A I<binary> operator operates on two operands. A I<trinary>
operator operates on three operands. A I<listary> operator operates on a list
of operands. An operator's documentation and examples should make its arity
clear.

For example, the arithmetic operators are binary operators, and are usually
left associative. C<2 + 3 - 4> evaluates C<2 + 3> first; addition and
subtraction have the same precedence, but they're left associative and binary,
so the proper evaluation order applies the leftmost operator (C<+>) to the
leftmost two operands (C<2> and C<3>) with the leftmost operator (C<+>), then
applies the rightmost operator (C<->) to the result of the first operation and
the rightmost operand (C<4>).

Perl novices often find confusion between the interaction of listary
operators--especially function calls--and nested expressions. Where parentheses
usually help, beware of the parsing complexity of:

=begin programlisting

    # probably buggy code
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

... which prints the value C<6> and (probably) evaluates as a whole to C<4>
(the return value of C<say> multiplied by C<4>). Perl's parser happily
interprets the parentheses as postcircumfix (L<fixity>) operators denoting the
arguments to C<say>, not circumfix parentheses grouping an expression to change
precedence.

=head2 Fixity

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

An operator's I<fixity> is its position relative to its operands:

X<C<.>; infix operator>
X<C<.=>; infix operator>
X<C<..>; infix operator>
X<C<...>; infix operator>
X<C<=~>; infix operator>
X<C<!~>; infix operator>
X<C<|>; infix operator>
X<C<||>; infix operator>
X<C<//>; infix operator>
X<C<|=>; infix operator>
X<C<||=>; infix operator>
X<C<//=>; infix operator>

=over 4

=item I<Infix> operators appear between their operands. Most mathematical
operators are infix operators, such as the multiplication operator in C<$length
* $width>.

X<C<\>; prefix operator>
X<C<~>; prefix operator>
X<C<++>; prefix operator>
X<C<-->; prefix operator>
X<C<+>; prefix operator>
X<C<->; prefix operator>
X<C<!>; prefix operator>
X<C<!!>; prefix operator>

=item I<Prefix> operators precede their operators. I<Postfix> operators follow.
These operators tend to be unary, such as mathematic negation (C<-$x>), boolean
negation (C<!$y>), and postfix increment (C<$z++>).

X<C<()>; circumfix operator>
X<C<{}>; circumfix operator>
X<C<[]>; circumfix operator>
X<C<//>; circumfix operator>
X<C<``>; circumfix operator>
X<C<''>; circumfix operator>
X<C<"">; circumfix operator>

=item I<Circumfix> operators surround their operands, as with the anonymous
hash constructor (C<{ ... }>) and quoting operators (C<qq[ ... ]>).

X<C<()>; postcircumfix operator>
X<C<{}>; postcircumfix operator>
X<C<[]>; postcircumfix operator>

=item I<Postcircumfix> operators follow certain operands and surround others,
as seen in hash and array element access (C<$hash{ ...  }> and C<$array[ ...
]>).

=back
=encoding utf8

=head1 操作符特征

Z<operator_characteristics>
X<operators; characteristics>

C<perldoc perlop> 和 C<perldoc perlsyn> 提供了大量有关 Perl 操作符行为的信息。即
使如此，其中 I<没有> 提到的部分对于理解这些操作符来说更为重要。这部分文档假定你对
语言设计中的若干概念有着一定程度的熟悉。起初，这些概念也许听起来有些生硬，但是其实
是直截了当的。

每一个操作符持有若干构成其行为的重要特征：操作数的个数，和其他操作符的关系，以及
可能是用法。

=head2 优先级

Z<precedence>
X<precedence>

某操作符的 I<优先级> 有助 Perl 在对其在表达式中求值时做出决定。求值顺序从高到低。
例如，因乘法的优先级较加法高，C<7 + 7 * 10> 求值得 C<77>，而非 C<140>。你可以用
括号将子表达式分组使某操作符在其他操作符之前求值；C<(7 + 7) * 10> I<确实> 求值得
C<140>，因为加法操作符已经成为一个整体，并且必须在乘法发生之前完全求值。

在平手的情况下────两个操作符拥有同样的优先级────则由其他因素（如词缀性 L<fixity> 和结
合性 L<associativity>）来决定。

C<perldoc perlop> 包含了一张优先级表。几乎没有人记得住这张表。掌控优先级的最佳途径
就是让表达式尽量简单。另一种好方法就是在复杂的表达式中用括号来澄清优先级。如果你发
现自己淹没在括号的海洋中，再请参考第一条规则。

=head2 结合性

Z<associativity>
X<associativity>
X<associativity; left>
X<left associative>
X<associativity; right>
X<right associative>

某操作符的 I<结合性> 决定了它是从左往右求值还是从右往左。加法是左结合的，因此
C<2 + 3 + 4> 先求出 C<2 + 3>，然后再在此结果上加 C<4>。指数操作是右结合的，因
此 C<2 ** 3 ** 4>，先进行 C<3 ** 4> 这部分运算，然后再求得 C<2> 的 81 次方。

简化复杂的表达式并用括号来展示你的意图远比记住结合性表来得重要。虽说如此，记住
结合性表的数学操作符部分还是值得的。

=begin sidebar

X<B::Deparse>
X<precedence; disambiguation>
X<associativity; disambiguation>

核心模块 C<B::Deparse> 可以重写代码片段并如实展示 Perl 究竟是如何处理操作符优先
级和结合性的；在某代码片段上运行 C<perl -MO=Deparse,-p>。（C<-p> 标志添加额外的
分组括号使得求值顺序更为明显。）注意 Perl 的优化器会如前面的例子般简化数学操作，
你可以用变量替代，就像 C<$x ** $y ** $z>。

=end sidebar

=head2 参数数量

Z<arity>

X<arity>
X<operators; arity>
X<nullary>
X<unary>
X<binary>
X<trinary>
X<listary>

操作符的 I<参数数量> 就是该操作符所作用的操作数的个数。I<空元> 操作符没有操作数。
I<一元> 操作符有一个操作数。I<二元> 操作符有两个操作数。I<三元> 操作符有三个操作
数。I<列元> 操作符对一个操作数列表进行操作。

除了大多数操作符都接受两个、多个或一个操作数这一事实，没有其他什么好的规则来决
定一个操作符的参数个数。操作符的文档会把这些交待清楚。

举例说来，算术运算符是二元操作符，它们通常是左结合的。C<2 + 3 - 4> 先对 C<2 + 3>
求值，加法和减法的优先级一致，但是它们是左结合并且是二元的，因此正确的求值顺序将
最左端的操作符（C<+>）应用到最左端的两个操作数（C<2> 和 C<3>）上，接着，将最右端
的操作符（C<->）应用在第一个操作符的结果和最右端的操作数（C<4>）上。

一个 Perl 新手疑问的常见来源就是嵌套表达式中的列元操作符（特别是函数调用）。请使用
括号表明你的意图，并且留意如下代码中的问题：

=begin programlisting

    # 可能是一段有缺陷的代码
    say ( 1 + 2 + 3 ) * 4;

=end programlisting

……由于 Perl 5 高兴地将括号解释为后环缀（L<fixity>）操作符并认为括号中的内容是 C<say>
的参数，而并非为改变优先级而对表达式分组的环缀括号。换句话说，这段代码打印出 C<6> 然
后求值 C<say> 的返回值乘以 C<4> 后的结果。

=head2 词缀性

Z<fixity>
X<fixity>
X<operators; fixity>
X<infix>
X<fixity; infix>
X<prefix>
X<fixity; prefix>
X<postfix>
X<fixity; postfix>
X<circumfix>
X<fixity; circumfix>
X<postcircumfix>
X<fixity; postcircumfix>

操作符的 I<词缀性> 就是它相对其操作数的位置：

=over 4

=item I<中缀> 操作符出现在操作数之间。大部分数学操作符是中缀操作符，例如 
C<$length * $width> 中的乘法操作符；

=item I<前缀> 操作符出现于其操作符之前而 I<后缀> 操作符出现于其操作符之后。这
些操作符通常是一元的，如数学上的负数符号（C<-$x>）、布尔取反（C<!$y>）以及后缀
自增（C<$z++>）；

=item I<环缀> 操作符包围其操作数。例子包括匿名哈希构造符（C<{ ... }>）和引述操
作符（C<qq[ ... ]>）；

=item I<后环缀> 操作符接在某些操作数之后并环绕其他部分，就向访问哈希或数组的元
素那样（C<$hash{ ... }> 和 C<$array[ ... ]>）。

=back
