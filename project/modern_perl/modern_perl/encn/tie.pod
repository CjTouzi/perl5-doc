=head1 Tie

Z<tie>

X<builtins; C<tie>>

Overloading (L<overloading>) lets you give classes custom behavior for specific
types of coercions and accesses.  A similar mechanism exists for making classes
act like built-in types (scalars, arrays, and hashes), but with more specific
behaviors.  This mechanism uses the C<tie> builtin; it is I<tying>.

The original use of C<tie> was to produce a hash stored on disk, rather than in
memory.  This allowed the use of DBM files from Perl, as well as the ability to
access files larger than could fit in memory.  The core module C<Tie::File>
provides a similar system by which to handle data files too large to fit in
memory.

The class to which you C<tie> a variable must conform to a defined interface
for the specific data type.  C<perldoc perltie> is the primary source of
information about these interfaces, though the core modules C<Tie::StdScalar>,
C<Tie::StdArray>, and C<Tie::StdHash> are more useful in practice.  Inherit
from them to start, and override only those specific methods you need to
modify.

=begin sidebar

C<Tie::Scalar>, C<Tie::Array>, and C<Tie::Hash> define the necessary interfaces
to tie scalars, arrays, and hashes, but C<Tie::StdScalar>, C<Tie::StdArray>,
and C<Tie::StdHash> provide the default implementations.  If C<tie()> hasn't
confused you, the organization of this code might.

=end sidebar

=head2 Tying Variables

Given a variable to tie, tie it with the syntax:

=begin programlisting

    use Tie::File;
    tie my @file, 'Tie::File', @args;

=end programlisting

... where the first argument is the variable to tie, the second is the name of
the class into which to tie it, and C<@args> is an optional list of arguments
required for the tying function.  In the case of C<Tie::File>, this is the name
of the file to which to tie the array.

X<builtins; C<tie>>
X<builtins; C<tied>>

Tying functions resemble constructors: C<TIESCALAR>, C<TIEARRAY()>,
C<TIEHASH()>, or C<TIEHANDLE()> for scalars, arrays, hashes, and filehandles
respectively.  Each function returns a new object which represents the tied
variable.  Both the C<tie> and C<tied> builtins return this object, but most
people ignore it in favor of checking its boolification to determine whether a
given variable is tied.

=head2 Implementing Tied Variables

To implement the class of a tied variable, inherit from a core module such as
C<Tie::StdScalar>, then override the specific methods for the operations you
want to change.  In the case of a tied scalar, you probably need to override
C<FETCH> and C<STORE>, may need to override C<TIESCALAR()>, and can often
ignore C<DESTROY()>.

You can create a class which logs all reads from and writes to a scalar with
very little code:

=begin programlisting

    package Tie::Scalar::Logged;

    use Modern::Perl;

    use Tie::Scalar;
    use parent -norequire => 'Tie::StdScalar';

    sub STORE
    {
        my ($self, $value) = @_;
        Logger->log("Storing <$value> (was [$$self])", 1);
        $$self = $value;
    }

    sub FETCH
    {
        my $self = shift;
        Logger->log("Retrieving <$$self>", 1);
        return $$self;
    }

    1;

=end programlisting

Assume that the C<Logger> class method C<log()> takes a string and the number
of frames up the call stack of which to report the location.  Be aware that
C<Tie::StdScalar> does not have its own F<.pm> file, so you must use
C<Tie::Scalar> to make it available.

Within the C<STORE()> and C<FETCH()> methods, C<$self> works as a blessed
scalar.  Assigning to that scalar reference changes the value of the scalar and
reading from it returns its value.

Similarly, the methods of C<Tie::StdArray> and C<Tie::StdHash> act on blessed
array and hash references, respectively.  The C<perldoc perltie> documentation
explains the copious methods they support, as you can read or write multiple
values from them, among other operations.

=begin sidebar

The C<-norequire> option prevents the C<parent> pragma from attempting to load
a file for C<Tie::StdScalar>, as that module is part of the file
F<Tie/Scalar.pm>.

=end sidebar

=head2 When to use Tied Variables

Tied variables seem like fun opportunities for cleverness, but they make for
confusing interfaces in almost all cases, due mostly to their rarity.  Unless
you have a very good reason for making objects behave as if they were built-in
data types, avoid creating your own ties.

Good reasons include to ease debugging (use the logged scalar to help you
understand where a value changes) and to make certain impossible operations
possible (accessing large files in a memory-efficient way).  Tied variables are
less useful as the primary interfaces to objects; it's often too difficult and
constraining to try to fit your whole interface to that supported by C<tie()>.

The final word of warning is both sad and convincing; far too much code does
not expect to work with tied variables.  Code which violates encapsulation may
prohibit good and valid uses of cleverness.  This is unfortunate, but violating
the expectations of library code tends to reveal bugs that are often out of
your power to fix.
=encoding utf8

=head1 捆绑（Tie）

Z<tie>

X<tie>
X<keywords; tie>
X<tying>

重载（L<overloading>）让你就特殊类型的强制转换和访问给予类自定义行为。有一种让变量
表现如同内置类型（标量、数组和哈希）的机制，它还带有更多特别的行为。这种机制使用 C<tie>
关键字；它就是 I<捆绑（tying）>。

最初对 C<tie> 的使用是为生成存储在磁盘上而非内存的哈希。这允许从 Perl 中使用 dbm 文件，
同时也能够访问大于内存尺寸的文件。核心模块 C<Tie::File> 提供了一个相似的系统，通过它
便可以处理过大的数据文件。

用于将 C<tie> 变量的类必须遵从特定数据类型的特定的、有良好文档的接口。虽然核心模块
C<Tie::StdScalar>、C<Tie::StdArray> 和 C<Tie::StdHash> 在实践中更加有用，C<perldoc perltie>
仍是这些接口的主要资源。从继承这些模块为开始，并仅重载你需要修改的特定方法。

=begin sidebar

这些父类的文档和实现位于 C<Tie::Scalar>、C<Tie::Array> 和 C<Tie::Hash> 模块中。因此如
果你想从 C<Tie::StdScalar> 继承，还必须同时 C<use Tie::Scalar>。如果 C<tie()> 没有使你
迷惑，这些代码的组织可能就会。

=end sidebar

=head2 捆绑变量

给出一个要捆绑的变量，可以用如下语法捆绑它：

=begin programlisting

    use Tie::File;
    tie my @file, 'Tie::File', @args;

=end programlisting

……其中第一个参数是要捆绑的变量，第二个是用于捆绑变量的类名，C<@args> 是由捆绑函数
要求的可选参数列表。以 C<Tie::File> 为例，就是要捆绑到数组上的文件名。

捆绑函数重组了构造器：C<TIESCALAR>、C<TIEARRAY()>、C<TIEHASH()> 和 C<TIEHANDLE()>
分别对应标量、数组、哈希和文件句柄。这些函数返回 C<tie()> 关键字返回的相同对象。大
多数人会忽略它。

C<tied()> 操作符在用于捆绑变量时返回相同对象，否则返回 C<undef>。再一次，很少有人
会使用返回的对象。相反，他们在使用 C<tied()> 来决定一个变量是否捆绑时只检查对象的
布尔值。

=head2 实现捆绑变量

要实现一个捆绑变量的类，从诸如 C<Tie::StdScalar> 等核心模块继承，接着为要更改的操
作覆盖特定方法。就捆绑标量来说，你很可能需要覆盖 C<FETCH> 和 C<STORE>，可能需要覆
盖 C<TIESCALAR()>，很可能忽略 C<DESTROY()>。

你可以用很少的代码创建一个记录对某标量读写的类：

=begin programlisting

    package Tie::Scalar::Logged;

    use Modern::Perl;

    use Tie::Scalar;
    use parent -norequire => 'Tie::StdScalar';

    sub STORE
    {
        my ($self, $value) = @_;
        Logger->log("Storing <$value> (was [$$self])", 1);
        $$self = $value;
    }

    sub FETCH
    {
        my $self = shift;
        Logger->log("Retrieving <$$self>", 1);
        return $$self;
    }

    1;

=end programlisting

假设 C<Logger> 的类方法 C<log()> 接受一个字符串和一个通过调用栈栈帧号报告位置的
数字。注意 C<Tie::StdScalar> 并没有独立的 F<.pm> 文件，因此你必须使用 C<Tie::Scalar>
让其可用。

在 C<STORE()> 和 C<FETCH()> 方法内部，C<$self> 如 bless 后的标量一般工作。向此标
量引用赋值改变标量的值而从中读取则返回它的值。

类似的，C<Tie::StdArray> 和 C<Tie::StdHash> 的方法对应地作用于 bless 后的数组和
哈希引用。C<perldoc perltie> 文档解释了其支持的大量方法，除其他操作外，你可以从
中读取写入多个值。

=begin sidebar

C<-norequire> 选项阻止 C<parent> 编译命令为 C<Tie::StdScalar> 加载文件的意图，因
为此模块是 F<Tie/Scalar.pm> 文件的一部分。

=end sidebar

=head2 何时使用捆绑变量

捆绑变量也许像是为编写机灵的代码提供了一个有趣的机会，但是它们在几乎所有情况下
会导致令人迷惑的接口，很大一部分归因于它们非常罕见。除非你有充足的理由创建行为
和内置数据类型一致的对象，否则避免创建你自己的捆绑类。

充足的理由包括方便调试（使用记录标量来帮助你理解它的值在何处改变）和使得一些不
可能的操作变得可能（用节省内存的方式访问大文件）。捆绑变量作为对象的主要接口时
不太有用；用它配合你的整个接口来实现 C<tie()> 接口通常太过困难和勉强。

最后的警语既悲哀又具说服力；相当多代码并不指望和捆绑变量一起工作。违反封装的代
码也许会妨碍对小聪明的正当且合法的使用。这是一种不幸，但是违反库代码的期待常常
引发缺陷，并且一般你没有能力修复这样的代码。
