=head1 Missing Defaults

Z<missing_defaults>

Perl 5's design process in 1993 and 1994 tried to anticipate new directions for
the language, but it's impossible to predict the future.  Perl 5 added many
great new features, but it also kept compatibility with the previous seven
years of Perl 1 through Perl 4.  Sixteen years later, the best way to write
clean, maintainable, powerful, and succinct Perl 5 code is very different from
Perl 5.000.  The default behaviors sometimes get in the way; fortunately,
better behaviors are available.

X<C<Task::Kensho>>

The CPAN (L<cpan>) contains many modules and pragmas designed to make your work
simpler, more correct, and more enjoyableN<See C<Task::Kensho> to start.>.  As
you improve as a Perl programmer, you will have many opportunities to use (and
even to create) such code in the right circumstances.  For now, use these
pragmas and modules regularly in your own code.

=head2 The strict Pragma

X<C<strict>>
X<pragmas; C<strict>>

The C<strict> pragma (L<pragmas>) allows you to forbid (or re-enable) various
language constructs which offer power but also the potential for accidental
abuse.

C<strict> provides three features: forbidding symbolic references, requiring
variable declarations, and forbidding the use of undeclared barewords
(L<barewords>).  While the occasional use of symbolic references is necessary
to manipulate symbol tables (barring the use of helper modules, such as
C<Moose>), the use of a variable as a variable name offers the possibility of
subtle errors of action at a distance--or, worse, the possibility of
poorly-validated user input manipulating internal-only data for malicious
purposes.

Requiring variable declarations helps to prevent typos in variable names and
encourages proper scoping of lexical variables.  It's much easier to see the
intended scope of a lexical variable if all variables have C<my> or C<our>
declarations in the appropriate scope.

C<strict> has a lexical effect, based on the compile-time scope of its use.
You may disable certain features of C<strict> (within the smallest possible
scope, of course) with C<no strict>.  See C<perldoc strict> for more details.

=head2 The warnings Pragma

The C<warnings> pragma (L<handling_warnings>) controls the reporting of various
classes of warnings in Perl 5, such as attempting to stringify the C<undef>
value or using the wrong type of operator on values.  It also warns about the
use of deprecated features.

The most useful warnings explain that Perl had trouble understanding what you
meant and had to guess at the proper interpretation.  Even though Perl often
guesses correctly, disambiguation on your part will ensure that your programs
run correctly.

The C<warnings> pragma has a lexical effect on the compile-time scope of its
use.  You may disable some or all warnings with C<no warnings> (within the
smallest possible scope, of course).  See C<perldoc perllexwarn> and C<perldoc
warnings> for more details.

=begin sidebar

Combine C<use warnings> with C<use diagnostics>, and Perl 5 will display
expanded diagnostic messages for each warning present in your programs.  These
expanded diagnostics come from C<perldoc perldiag>.  This behavior is useful
when learning Perl, but it's less useful in code deployed to production,
because it can produce verbose error output.

=end sidebar

=head2 IO::Handle

Perl 5.6.0 added lexical filehandles.  Previously, filehandles were all package
globals.  This was occasionally messy and often confusing.  Now that you can
write:

=begin programlisting

    open my $fh, '>', $file or die "Can't write to '$file': $!\n";

=end programlisting

... the lexical filehandle in C<$fh> is easier to use.  The implementation of
lexical filehandles creates objects; C<$fh> is an instance of C<IO::Handle>.
Unfortunately, even though C<$fh> is an object, you can't call methods on it
because nothing has loaded the C<IO::Handle> class.

This is occasionally painful when you want to flush the buffer of the
associated filehandle, for example.  It could be as easy as:

=begin programlisting

    $fh->flush();

=end programlisting

... but only if your program somewhere contains C<use IO::Handle>.  The
solution is to add this line to your programs so that lexical filehandles--the
objects as they are--behave as objects should behave.

=head2 The autodie Pragma

Z<autodie>
X<C<autodie> pragma>
X<pragmas; C<autodie>>

Perl 5's default error checking is parsimonious.  If you're not careful to
check the return value of every C<open()> call, for example, you could try to
read from a closed filehandle--or worse, lose data as you try to write to one.
The C<autodie> pragma changes the default behavior.  If you write:

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

=end programlisting

... an unsuccessful C<open()> call will throw an exception via Perl 5's normal
exception mechanism.  Given that the most appropriate approach to a failed
system call is throwing an exception, this pragma can remove a lot of
boilerplate code and allow you the peace of mind of knowing that you haven't
forgotten to check a return value.

This pragma entered the Perl 5 core as of Perl 5.10.1.  See C<perldoc autodie>
for more information.
=encoding utf8

=head1 缺少的默认特性

Z<missing_defaults>

Perl 5 的设计过程从 1993 年持续至 1994 年，尝试为语言的新方向做好准备，却无法
预言其未来。Perl 5 增加了不少优秀的新特性，但它仍和 Perl 1 到 Perl 4 这过去的
七年保持兼容。十六年之后，编写整洁、可维护、强大和简明的 Perl 5 代码最佳途径已
经和 Perl 5.000 时代相差甚大。默认行为有时会对你有所妨碍，幸运的是，还有更佳的
行为可用。

=head2 strict 编译命令

X<strict>
X<modules; strict>
X<pragmas; strict>

C<strict> 编译命令（L<pragmas>）允许你禁用（或重新启用）诸多功能强大但可能导致
意外误用的语言结构。

C<strict> 执行三种功能：禁用符号引用、要求变量声明并且禁用对未声明裸字（L<barewords>）
的使用。虽然偶尔使用符号引用对于进行符号表修改和导出（除对辅助模块的使用之外，
比如 C<Moose>）来说是必须的，将变量用作变量名称使隐晦的超距作用（action at a distance）
错误有机可乘────或者更糟糕，使未经严格验证的用户输入恶意修改对内数据成为可能。

要求变量声明有助于防止变量名的打字错误并鼓励将词法变量限定于正确作用域。如果
所有词法变量都在合适的作用域内由 C<my> 或 C<our> 声明，则很容易就能看出其预期
的作用域。

C<strict> 在词法范围内有效，基于其用法的编译期作用域。你可以用 C<no strict> 禁
用某些 C<strict> 的特性（当然，在可能的最小范围内）。详情请参见 C<perldoc strict>。

=head2 warnings 编译命令

C<warnings> 编译命令（L<handling_warnings>）控制着 Perl 5 中诸多警告的汇报，例
如试图字符串化 C<undef> 值或对值使用错误的操作符类型。它同时对使用不推荐的特性
做出警告。

最有用的警告解释了 Perl 难以理解你的意思，只能猜测正确的解释方法。即便 Perl 通
常能猜对，由你来消除歧义总是能保证程序的正常运行。

C<warnings> 变量命令对其用法的编译期作用域有词法效果。你可以用 C<no warnings> 禁
用部分或全部警告（当然，在可能的最小范围内）。详情请参见 C<perldoc perllexwarn> 
和 C<perldoc warnings>。

=begin sidebar

结合 C<use warnings> 和 C<use diagnostics>，Perl 5 将对程序中出现的每一处警告显
示扩展诊断信息。这些扩展诊断信息来自于 C<perldoc perldiag>。此行为在 Perl 学习阶
段非常有用，但是在部署产品代码时则非如此，因为它可能产生非常详细的错误输出。

=end sidebar

=head2 IO::Handle

Perl 5.6.0 增加了词法文件句柄。在此之前，文件句柄都是包全局变量。这样做偶尔会显
得散乱和令人迷惑。现在你可以这样写：

=begin programlisting

    open my $fh, '>', $file or die "Can't write to '$file': $!\n";

=end programlisting

……C<$fh> 中的词法文件句柄简单易用。词法文件句柄的实现创建了对象；C<$fh> 是
C<IO::Handle> 的实例。不幸的是，即使 C<$fh> 是一个对象，你无法在其上调用任
何方法，因为 C<IO::Handle> 类尚未加载。

举例来说，冲洗相关文件句柄的缓冲区偶尔也会令人痛苦。它也可以这样简单：

=begin programlisting

    $fh->flush();

=end programlisting

……但仅在你程序的某处包含 C<use IO::Handle> 时才可以这样做。解决方法就是在你
的程序里加上这一行，使得词法文件句柄────原本就是对象────在行为上也和对象一致。

=head2 autodie 编译命令

Z<autodie>
X<autodie>
X<pragmas; autodie>

Perl 5 的默认错误检查有些吝啬。例如，如果你不仔细对每一个 C<open()> 调用的返
回值进行检查，你可能会尝试从一个已经关闭的文件句柄读取────或者更糟，向其写入
而导致数据丢失。C<autodie> 编译命令改变此默认行为。如果你编写：

=begin programlisting

    use autodie;

    open my $fh, '>', $file;

=end programlisting

……一个不成功的 C<open()> 调用将通过 Perl 5 的常规异常机制抛出异常。考虑到应对
失败系统调用的最佳手段是抛出异常，该编译命令可以去掉大量刻板的代码并让你因为知
道没有忘记检查返回值而感到轻松。

该编译命令于 Perl 5.10.1 进入 Perl 5 核心部分。详情请参见 C<perldoc autodie>。
