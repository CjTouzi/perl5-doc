Chapter 14. Some Advanced Object Topics

You might wonder, "Do all objects inherit from a common class?" "What if a method is missing?" "What about multiple inheritance?" or "How can I tell what sort of object I have?" Well, wonder no more. This chapter covers these subjects and more.

14.1. UNIVERSAL Methods

As we define classes, we create inheritance hierarchies through the global @ISA variables in each package. To search for a method, Perl wanders through the @ISA TRee until it finds a match or fails.

After the search fails, however, Perl always looks in one special class called UNIVERSAL and invokes a method from there, if found, just as if it had been located in any other class or superclass.

One way to look at this is that UNIVERSAL is the base class from which all objects derive. Any method we place here, such as:

 sub UNIVERSAL::fandango {
   warn 'object ', shift, " can do the fandango!\n";
 }

enables all objects of our program to be called as $some_object->fandango.

Generally, we should provide a fandango method for specific classes of interest and then provide a definition in UNIVERSAL::fandango as a backstop, in case Perl can't find a more specific method. A practical example might be a data-dumping routine for debugging or maybe a marshaling strategy to dump all application objects to a file. We simply provide the general method in UNIVERSAL and override it in the specific classes for unusual objects.

Obviously, we should use UNIVERSAL sparingly, because there's only one universe of objects, and our fandango might collide with some other included module's fandango. For this reason, UNIVERSAL is hardly used for anything except methods that must be completely, well, universal, like during debugging or other Perl-internal behavior that ordinary programmers may blissfully ignore.

14.2. Testing Our Objects for Good Behavior

Besides providing a place for us to put universally available methods, the UNIVERSAL package comes preloaded with two very useful utility methods: isa and can. Because UNIVERSAL defines these methods, they are available to all objects.

The isa method tests to see whether a given class or instance is a member of a given class or a member of a class that inherits from the given class. For example, continuing on with the Animal family from the previous chapters:

 if (Horse->isa('Animal')) {    # does Horse inherit from Animal?
   print "A Horse is an Animal.\n";
 }
 
 my $tv_horse = Horse->named("Mr. Ed");
 if ($tv_horse->isa('Animal')) { # is it an Animal?
   print $tv_horse->name, " is an Animal.\n";
   if ($tv_horse->isa('Horse')) { # is it a Horse?
     print 'In fact, ', $tv_horse->name, " is a Horse.\n";
   } else {
     print "...but it's not a Horse.\n";
   }
 }

This is handy when we have a heterogeneous mix of objects in a data structure and want to distinguish particular categories of objects:

 my @horses = grep $_->isa('Horse'), @all_animals;

The result will be only the horses (or racehorses) from the array. We compare that with:

 my @horses_only = grep ref $_ eq 'Horse', @all_animals;

which picks out just the horses, because a RaceHorse won't return Horse for ref.

In general, we shouldn't use:

 ref($some_object) eq 'SomeClass'

in our programs because it prevents future users from subclassing that class. Use the isa construct as given earlier.

One downside of the isa call here is that it works only on blessed references or scalars that look like class names. If we happen to pass it an unblessed reference, we get a fatal (but trappable) error of:

Can't call method "isa" on unblessed reference at ...

To call isa more robustly, we could call it as a subroutine:

 if (UNIVERSAL::isa($unknown_thing, 'Animal')) {
   ... it's an Animal! ...
 }

This runs without an error, no matter what $unknown_thing contains. But it's subverting the OO mechanism, which has its own set of problems.[*] This is a job for an exception mechanism, which is eval. If the value in $unknown_thing isn't a reference, then we can't call a method on it. The eval TRaps that error and returns undef, which is false.

[*] Particularly, if Animal has a custom isa method (perhaps it rejects a mutant branch of talking animals in the family tree), calling UNIVERSAL::isa skips past Animal::isa and may give you the wrong answer.

 if (eval { $unknown_thing->isa('Animal') }) {
   ... it's an Animal ...
 }

As in the case of isa, we can test for acceptable behaviors with the can method. For example:

 if ($tv_horse->can('eat')) {
   $tv_horse->eat('hay');
 }

If the result of can is true, then somewhere in the inheritance hierarchy, a class claims it can handle the eat method. Again, the caveats about $tv_horse being only either a blessed reference or a class name as a scalar still apply, so the robust solution when we might deal with nearly anything looks like:

 if (eval { $tv_horse->can('eat') } ) { ... }
 
Note that if we defined UNIVERSAL::fandango earlier, then:

 $object->can('fandango')

always returns true, because all objects can do the fandango.

14.3. AUTOLOAD as a Last Resort

After Perl searches the inheritance tree and UNIVERSAL for a method, it doesn't just stop there if the search is unsuccessful. Perl repeats the search through the very same hierarchy (including UNIVERSAL), looking for a method named AUTOLOAD.

If an AUTOLOAD exists, the subroutine is called in place of the original method, passing it the normal predetermined argument list: the class name or instance reference, followed by any arguments provided to the method call. The original method name is passed in the package variable called $AUTOLOAD (in the package where the subroutine was compiled) and contains the fully qualified method name, so we should generally strip everything up to the final double colon if we want a simple method name.

The AUTOLOAD subroutine can execute the desired operation itself, install a subroutine and then jump into it, or perhaps just die if asked to perform an unknown method.

One use of AUTOLOAD defers the compilation of a large subroutine until it is actually needed. For example, suppose the eat method for an animal is complex but unused in nearly every invocation of the program. We can defer its compilation as follows:

 ## in Animal
 sub AUTOLOAD {
   our $AUTOLOAD;
   (my $method = $AUTOLOAD) =~ s/.*:://s; # remove package name
   if ($method eq "eat") {
     ## define eat:
     eval q{
       sub eat {
         ...
         long
         definition
         goes
         here
         ...
       }
     };                # End of eval's q{  } string
     die $@ if $@;                        # if typo snuck in
     goto &eat;                           # jump into it
   } else {                               # unknown method
     croak "$_[0] does not know how to $method\n";
   }
 }

If the method name is eat, we'll define eat (which we had previously in a string but had not compiled) and then jump into it with a special construct that replaces the current subroutine invocation of AUTOLOAD with an invocation of eat, just as if we invoked &eat instead of AUTOLOAD.[*] After the first AUTOLOAD hit, the eat subroutine is now defined, so we won't be coming back here. This is great for compile-as-you-go programs because it minimizes startup overhead.

[*] Although goto is generally (and rightfully) considered evil, this form of goto, which gives a subroutine name as a target, is not really the evil goto; it's the good goto. In particular, this is the "magic goto." Its trick is that AUTOLOAD is completely invisible to the subroutine.

For a more automated way of creating code to do this, which makes it easy to turn the autoloading off during development and debugging, see the AutoLoader and SelfLoader core module documentation.

14.4. Using AUTOLOAD for Accessors
Chapter 12 showed how to create color and set_color to get and set the color of an animal. If we had 20 attributes instead of 1 or 2, the code would be painfully repetitive. However, using an AUTOLOAD method, we can construct the nearly identical accessors as needed, saving both compilation time and wear-and-tear on the developer's keyboard.

We use a code reference as a closure to do the job. First, we set up an AUTOLOAD for the object and define a list of hash keys for which we want trivial accessors:

 sub AUTOLOAD {
   my @elements = qw(color age weight height);

Next, we'll see if the method is a getter for one of these keys, and, if so, we install a getter and jump to it:

 our $AUTOLOAD;
 if ($AUTOLOAD =~ /::(\w+)$/ and grep $1 eq $_, @elements) {
   my $field = ucfirst $1;
   {
     no strict 'refs';
     *{$AUTOLOAD} = sub { $_[0]->{$field} };
   }
   goto &{$AUTOLOAD};
 }

We need to use ucfirst because we named the method color to fetch the hash element called Color. The glob notation here installs a wanted subroutine as defined by the coderef closure, which fetches the corresponding key from the object hash. Consider this part to be magic that we just cut and paste into our program. Finally, the goto construct jumps into the newly defined subroutine.

Otherwise, perhaps it's a setter:

 if ($AUTOLOAD =~ /::set_(\w+)$/ and grep $1 eq $_, @elements) {
   my $field = ucfirst $1;
   {
     no strict 'refs';
     *{$AUTOLOAD} = sub { $_[0]->{$field} = $_[1] };
   }
   goto &{$AUTOLOAD};
 }

If it is neither, death awaits:

 croak "$_[0] does not understand $method\n";
  }

Again, we pay the price for the AUTOLOAD only on the first hit of a particular getter or setter. After that, a subroutine is now already defined, and we can just invoke it directly.

14.5. Creating Getters and Setters More Easily
If all that coding for creating accessors using AUTOLOAD looks messy, rest assured that we really don't need to tackle it, because there's a CPAN module that does it a bit more directly: Class::MethodMaker.[*]

[*] Sometimes Class::MethodMaker can be a bit much. We can also check out the lighter Class::Accessor.

For example, a simplified version of the Animal class might be defined as follows:

 package Animal;
 use Class::MethodMaker
   new_with_init => 'new',
   get_set => [-eiffel => [qw(color height name age)]],
   abstract => [qw(sound)],
 ;
 sub init {
   my $self = shift;
   $self->set_color($self->default_color);
 }
 sub named {
   my $self = shift->new;
   $self->set_name(shift);
   $self;
 }
 sub speak {
   my $self = shift;
   print $self->name, ' goes ', $self->sound, "\n";
 }
 sub eat {
   my $self = shift;
   my $food = shift;
   print $self->name, " eats $food\n";
 }
 sub default_color {
   'brown';
 }

The getters and setters for the four instance attributes (name, height, color, and age) are defined automatically, using the method color to get the color and set_color to set the color. (The eiffel flag says "do it the way the Eiffel language does it," which is the way it should be done here.) The messy blessing step is now hidden behind a simple new method. We define the initial color as the default color, as before, because the generated new method calls the init method.

However, we can still call Horse->named('Mr. Ed') because it immediately calls the new routine as well.

Class::MethodMaker generated the sound method as an abstract method. Abstract methods are placeholders, meant to be defined in a subclass. If a subclass fails to define the method, the method Class::MethodMaker generates for Animal's sound dies.

We lose the ability to call the getters (such as name) on the class itself, rather than an instance. In turn, this breaks our prior usage of calling speak and eat on generic animals, since they call the accessors. One way around this is to define a more general version of name to handle either a class or instance and then change the other routines to call it:

 sub generic_name {
   my $either = shift;
   ref $either ? $either->name : "an unnamed $either";
 }
 sub speak {
   my $either = shift;
   print $either->generic_name, ' goes ', $either->sound, "\n";
 }
 sub eat {
   my $either = shift;
   my $food = shift;
   print $either->generic_name, " eats $food\n";
 }

There. Now it's looking nearly drop-in compatible with the previous definition, except for those friend classes that referenced the attribute names directly in the hash as the initial-cap-keyed versions (such as Color) rather than through the accessors ($self->color).

That brings up the maintenance issue again. The more we can decouple our implementation (hash versus array, names of hash keys, or types of elements) from the interface (method names, parameter lists, or types of return values), the more flexible and maintainable our system becomes.

The flexibility isn't free, however. Since the performance cost of a method call is higher than the cost of a hash lookup, in some circumstances it may make sense to have a friend class peek inside.

14.6. Multiple Inheritance
How does Perl wander through the @ISA TRee? The answer may be simple or complex. If we don't have multiple inheritance (that is, if no @ISA has more than one element), it is simple: Perl simply goes from one @ISA to the next until it finds the ultimate base class whose @ISA is empty.

Multiple inheritance is more complex. It occurs when a class's @ISA has more than one element. For example, suppose we have a class called Racer, which has the basic abilities for anything that can race, so that it's ready to be the base class for a runner, a fast car, or a racing turtle. With that, we could make the RaceHorse class as simply as this:[*]

[*] If there is a conflict among the methods of Horse and Racer, or if their implementations aren't able to work together, the situation can become much more difficult. The various classes in @ISA may not play well together and may step on one another's data, for instance.

 {
   package RaceHorse;
   our @ISA = qw{ Horse Racer };
 }

Now a RaceHorse can do anything a Horse can do, and anything a Racer can do as well. When Perl searches for a method that's not provided directly by RaceHorse, it first searches through all the capabilities of the Horse (including all its parent classes, such as Animal). When the Horse possibilities are exhausted, Perl turns to see whether Racer (or one of its subclasses) supplies the needed method. On the other hand, if we want Perl to search Racer and its subclasses before searching Horse, we can put them into @ISA in that order (see Figure 14-1).

Figure 14-1. A class may not need to implement any methods of its own if it inherits everything it needs from its parent classes through multiple inheritance

14.7. Exercises

You can find the answers to these exercises in "Answers for Chapter 14" in the Appendix.

14.7.1. Exercise 1 [20 min]

Write a module named MyDate that has an AUTOLOAD method that handles the calls to the methods named day, month, and year, returning the appropriate value for each one. For any other method, the AUTOLOAD should carp about the unknown method name. Write a script that uses your module and prints the values for the date, month, and year.

14.7.2. Exercise 2 [40 min]

Starting with the script you wrote for the previous exercise, add a UNIVERSAL::debug function that prints a timestamp before the message you pass to it. Call the debug method on the MyDate object. What happens? How does this get around the AUTOLOAD mechanism?

