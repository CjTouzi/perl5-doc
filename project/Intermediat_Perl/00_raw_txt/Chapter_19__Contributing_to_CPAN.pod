Chapter 19. Contributing to CPAN

Besides allowing others in your organization to receive the benefits of these wonderful modules and distributions you've created, you can contribute to the Perl community at large. The mechanism for sharing your work is called the Comprehensive Perl Archive Network (CPAN), which is 10 years old as we write this and has about 9,000 different modules.

19.1. The Comprehensive Perl Archive Network

We covered the basic CPAN history in Chapter 3, but that was from a user's perspective. Now we want to contribute to CPAN, so we have to look at it from an author's perspective.

It's no accident that CPAN is so useful. The ethos of the project has been that anyone should be able to contribute and that it should be easy for people to share their work. Because of that, it has more than 9,000 modules (as we write this) and is the model that other languages wish they could adopt.[*]

[*] However, whenever the discussion comes up in other languages, the first thing they do is try to set restrictions, which CPAN purposedly avoided.

Remember that CPAN is just a big storage device. That's its magic. Everything else that revolves around it, such as CPAN Search (http://search.cpan.org), CPAN.pm, and CPANPLUS.pm, merely use what's already there, not create what it is.

19.2. Getting Prepared

Since CPAN is just a big file-storage site, you just need to upload your code. To contribute to CPAN, you need two things:

Something to contribute, ideally already in the shape of a module

A Perl Authors Upload Server (PAUSE) ID

The PAUSE ID is your passport to contributing to CPAN. You get a PAUSE ID by simply asking. The details are described at http://www.cpan.org/modules/04pause.html. You fill out a web form (linked from there) with a few basic details, such as your name, home web page, email address, and your preferred PAUSE ID. At the moment, PAUSE IDs must be between four and nine characters. (Some legacy PAUSE IDs are only three characters long.)[*] Once you have your PAUSE ID, you need to think globally about your contribution. Because your module will probably be used in programs along with other modules from other authors, you need to ensure that the package names for modules don't collide with existing modules or confuse the people who browse CPAN. Luckily for you, there is a loose collection of volunteers on the Perl Modules list (modules@perl.org) who've been working with CPAN and modules for quite a while and can help you sort through most problems.

[*] Originally, the PAUSE IDs had to be five characters or less, until Randal wanted his MERLYN ID, and the appropriate accommodation was made.

Before you send your first email to the PAUSE admins, it's probably a good idea to do a few things first:

Look at the current module list. Get an idea for how things are named. Better yet, are you reinventing a subset of something that already exists, or can you contribute your work as a patch to another module?

Visit the list archives (pointers can be found at http://lists.perl.org) to see what the typical conversations look like. That might help you to avoid shock at your response or better phrase your initial request.

Above all, get it in your head that this whole process is run by volunteers who aren't perfect and are doing this in their spare time for the good of the Perl community. Have patience. Have tolerance.

19.3. Preparing Your Distribution

Once you've gotten your module name settled and you've tested your module with its new name (if needed), you should ensure your distribution is ready for prime time. While this is similar to releasing a distribution in-house, as described in Chapter 16, you might want to ensure a few additional things about your distribution:

Create a README file. This file is automatically extracted to a separate file on the CPAN archives and lets someone view or download just the key facts about your distribution before fetching or unpacking the rest.

Make and test your Makefile.PL or Build.PL. Modules without a Makefile.PL are accepted via PAUSE to go into the CPAN but usually get a grimace from those of us who download your stuff, because we might have to figure out how to build and install your distribution.

Bring your MANIFEST up to date. If you add files that should be part of the distribution, they also need to be in the MANIFEST. One quick trick is to clean things up as you would want them in the distribution, and then invoke make manifest, which updates the MANIFEST file to be exactly what you are holding at the moment.[*]

[*] If make manifest adds too many files, you can create a MANIFEST.SKIP file that has a set of Perl regular expressions that tells make manifest which files to ignore. Once you have that file, make manifest will remove from MANIFEST files that match those patterns.

Have a logical distribution version number. The Makefile.PL file should specify either a VERSION value or a VERSION_FROM value. If you have a single module (such as a .pm file) in your distribution, it's usually best to grab the version number from there with VERSION_FROM. If you have multiple files, either designate one of them as the one you'll always update just before a new release or use the VERSION within the Makefile.PL instead. Also keep in mind that your version number must always increase numerically for newer versions of your distribution. (After Version 1.9, the next release can't be Version 1.10, because even if you're calling it "version one point ten," it's still merely 1.1 to the tools that compare version numbers.)

Have tests! Reread Chapter 17 if you must. There's nothing that builds more confidence in an installed distribution than at least a few dozen tests that are run during the installation phase. If you're not adding a test for each bug that you find, how do you know the bug is fixed?

Invoke make disttest , which builds a distribution archive of everything in MANIFEST, unpacks the archive into a separate directory, and then runs the tests on your distribution. If that doesn't work for you, you can't expect it to work for anyone else who downloads your distribution from the CPAN.

19.4. Uploading Your Distribution

Once you have your distribution ready to share, visit the PAUSE upload page at https://pause.perl.org/pause/authenquery?ACTION=add_uri. You'll have to log in using your PAUSE ID and PAUSE password, and then you'll be given several options to upload your distribution.

On that page, you can upload your file directly through the HTTP file upload or tell PAUSE where else on the Web it can fetch the distribution. Besides that, you can FTP the distribution to ftp://pause.perl.org.

No matter which way you upload the file, it should appear in the list of uploaded files at the bottom of that page. You might have to wait a bit for PAUSE to fetch remote files, but they usually show up pretty quickly. If you don't see your PAUSE ID next to the distribution name, you can claim it.

Once PAUSE has the file and knows who it belongs to, it indexes it. You should get email from the PAUSE indexer telling you what happened. After that, your distribution is on its way to CPAN proper. Remember that the N in CPAN is "Network," so your distribution may take hours or days to reach all of the CPAN mirrors. It shouldn't take longer than a couple of days, though.

If you have a problem or think something didn't happen the way it should have, you can ask the PAUSE administrators about it by sending mail to modules@perl.org.

19.5. Announcing the Module

How will users learn about your module? Your module gets noticed automatically in many places, including:

The "Recent modules" page of http://search.cpan.org

The "new modules" section of http://use.perl.org

A daily announcement in the "Perl news" mailing list

An IRC bot on a few of the Perl-related IRC channels announces uploads as soon as they become available

An update or an uninstalled module in one of the CPAN shells, CPAN.pm, or CPANPLUS.pm

For greater visibility, you can also prepare a short notice to be posted to the Usenet comp.lang.perl.announce newsgroup. Just post the notice, and within a day or two, your news posting will be whisking around to news servers all over the globe.

19.6. Testing on Multiple Platforms

The CPAN Testers (http://testers.cpan.org) automatically test almost all modules uploaded to CPAN. Volunteers around the world automatically download and test each distribution on whatever setup they have. Among them, they test your module on just about every platform, operating system, and Perl version that matters (and many that you probably don't pay attention to). They send email to the module authors telling them what happened, and they automatically update the Testers database. You can look at the results for any module through the Testers web site or on CPAN Search (http://search.cpan.org).

Often, testers can help you figure out problems for platforms to which you do not have access.

19.7. Consider Writing an Article or Giving a Talk
Many of the short talks at Perl conferences involve the author of a distribution talking about his own work. After all, who is better qualified to help others use your module than you? The more interested other people are in your module, the better it gets as they send in their bug reports, feature requests, and patches.

If the idea of proposing a conference talk intimidates you a bit, or you don't want to wait that long, look to your local Perl user group . They're generally looking for speakers (usually for the meeting coming up in the next week or two), and the group size is usually small enough to be a nice casual setting. You can generally find a Perl user group near you by looking on the Perl Mongers web site at http://www.pm.org. If you can't find one, start one!

19.8. Exercise

You can find the answer to this exercise in "Answer for Chapter 19" in the Appendix.

19.8.1. Exercise [Infinite min]

Write a module to solve the halting problem with respect to Perl source code.[*] Your module should export a function, will_halt, which takes a string and returns true if the string is the source code for a no-input Perl program that does not infinitely loop, and false otherwise.

[*] http://en.wikipedia.org/wiki/Halting_problem
