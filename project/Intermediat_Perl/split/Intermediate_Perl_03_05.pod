=EN Object-Oriented Interfaces
=CN 面向对象的接口
=EN Contrast the subroutines imported by File::Basename with what another core module has by looking at File::Spec.
=CN 相比于 I<File::Basename> 导出的子例程, 在核心模块中有另外一个 I<File::Spec> 模块也提供类似的功能。
=EN The File::Spec module is designed to support operations commonly performed on file specifications.
=CN I<File::Spec> 被设计来支持对文件属性的一般操作。
=EN A file specification is usually a file or directory name, but it may be a name of a file that doesn't existin which case, it's not really a filename, is it?
=CN 一个文件属性指文件或目录的名字, 但它可能并不是实际存在的名子, 是这样吗？
=EN Unlike the File::Basename module, the File::Spec module has a primarily objectoriented interface. We load the module with use, as we did before.
=CN 与 I<File::Basename> 模块不同的是, I<File::Spec> 模块接口是被设计成面向对象的.我们也用 I<use> 来调入模块, 象往常一样：
=EN However, since this module has an object-oriented interface,
=CN 然而, 因为这个模块有面向对象的接口,
=EN it doesn't import any subroutines.
=CN 它并不导入任何子例程。
=EN Instead, the interface tells us to access the functionality of the module using its class methods.
=CN 取而代之的是, 接口要我们通过访问类的方法来使用其功能。
=EN The catfile method joins a list of strings with the appropriate directory separator:
=CN 如 I<catfile> 方法用来把一个字串列表用适当的目录分隔符连接起来：
=EN We can use File::Spec::Functions if we want a functional interface.
=CN 如果我们想要专门的接口的话, 可以用 I<use> I<File::Spec::Functions> 的办法。
=EN This calls the class method catfile of the File::Spec class, which builds a path appropriate for the local operating system and returns a single string.
=CN 上例就是调用了 I<File::Spec> 类中的一个叫 I<catfile> 的类方法.这个方法使用本地操作系统的目录分隔符建立合适的路径字患并返回单个字串。
=EN This is similar in syntax to the nearly two dozen other operations provided by File::Spec.
=CN 对于 I<File::Spec> 提供的其它方法, 调用的语法都是相似的。
=EN That string might be something like /home/gilligan/web_docs/photos/USS_Minnow. gif on a Unix system.
=CN 返回的的字段结果, 如果在 I<UNIX> 系统, 那么多半是： I</home/gilligan/web_docs/photos/USS_Minnow> I<gif.>
=EN On a Windows system, it would typically use backslashes as directory separators.
=CN 如果在 I<windows> 系统里, 就会用代表目录分隔符的反斜杠。
=EN This module lets us write portable code easily, at least where file specs are concerned.
=CN 这个模块让我们可以写出可移植的代码, 至少在文件描述上是这样的。
=EN The File::Spec module provides several other methods for dealing with file paths in a portable manner.
=CN I<File::Spec> 模块还提供了许多其它的方法来用可移植的方式处理路径。
=EN You can read more about portability issues in the perlport documentation.
=CN 你可以通过 I<perlport> 文档了解更多有关移植方面的专题。
