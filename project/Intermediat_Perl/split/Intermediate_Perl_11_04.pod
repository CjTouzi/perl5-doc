=EN Calling a Second Method to Simplify Things
=CN 调用第二个方法来简化操作
=EN We can call out from speak to a helper method called sound. This method provides the constant text for the sound itself:
=CN 我们可以从 I<speak> 调一个方法叫 I<sound.> 这个方法提供一个常量做为声音的内容：
=EN Now, when we call Cow->speak, we get a $class of Cow in speak. This, in turn, selects the Cow->sound method, which returns moooo. How different would this be for the Horse?
=CN 现在, 当我们调用 I<Cow->speak> , 我们会在 I<speak> 中获得一个 I<Cow> 的 I<$class.> 这样, 选择 I<Cow->sound> 方法, 返回 I<moooo.> 马会怎么样呢？
=EN Only the name of the package and the specific sound change. So can we share the definition for speak between the cow and the horse? Yes, with inheritance !
=CN 只有包名和声音变了.那么我们可以把牛和马的 I<speak> 定义共享吗？ 是的, 用继承！
=EN Now let's define a common method package called Animal with the definition for speak:
=CN 现在, 让我们定义一个共享的方法的包, 叫 I<Animal> , 其 I<speak> 定义如下：
=EN Then, for each animal, we can say it inherits from Animal, along with the animal-specific sound:
=CN 这样, 对于每个动物, 我们说它继承自 I<Animal> , 并有此动物专有的叫声：
=EN Note the added @ISA array. We'll get to that in a minute.
=CN 注意我们加了 I<@ISA> 数组.我们后面会介绍的。
=EN What happens when we invoke Cow->speak now?
=CN 现在我们调用 I<Cow->speak> 会发生什么？
=EN First, Perl constructs the argument list. In this case, it's just Cow. Then Perl looks for Cow::speak. That's not there, so Perl checks for the inheritance array @Cow::ISA. It's there and contains the single name Animal.
=CN 首先, I<Perl> 创建参数列表.在这个例子中, 就是 I<Cow.> 然后 I<Perl> 找 I<Cow::speak.> 当前包没有, 所以 I<Perl> 就在其祖先数组里找 I<@Cow::ISA.> 这里面有 I<Animal> 包。
=EN Perl next checks for speak inside Animal instead, as in Animal::speak. That found, Perl invokes that method with the already frozen argument list, as if we had said:
=CN 然后 I<Perl> 就用 I<Animal> 里的 I<speak> 来代替了, 就是 I<Animal::speak.> 找到后, I<Perl> 用已经不变的参数列表来调用, 就像我们这样写的一样：
=EN Inside the Animal::speak method, $class becomes Cow as the first argument is shifted off. When we get to the step of invoking $class->sound while performing the print, it looks for Cow->sound:
=CN 在 I<Animal::speak> 方法里, I<$class> 变成 I<Cow> , 作为第一个参数传入.当我们打印时就调用 I<$class->sound> , 它会找到 I<Cow->sound:>
=EN and we get our desired output.
=CN 这样就得到我们需要的输出结果。
