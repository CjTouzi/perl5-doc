=EN Applying a Bit of Indirection
=CN 搞些小伎俩
=EN Some problems that may appear very complex are actually simple once we've seen a solution or two. For example, suppose we want to find the items in a list that have odd digit sums but don't want the items themselves. What we want to know is where they occurred in the original list.
=CN 有些问题看上去好像很复杂, 可是一旦你找到解决方案后, 会发现实际上很简单.比如, 假定我们要在一个列表中把数位加起来是奇数的元素找出来, 但我们不要元素本身, 我们要它们在列表里所在的位置。
=EN All that's required is a bit of indirection. [*] First, we have a selection problem, so we use a grep. Let's not grep the values themselves but the index for each item:
=CN 要完成这项任务需要一些小手段 I<.[> *] 首先, 我们有个拣选的问题, 因此, 我们使用 I<grep.> 我们不抓元素值本身, 找它们在列表里的位置。
=EN A famous computing maxim states that "there is no problem so complex that it cannot be solved with appropriate additional layers of indirection. " Of course, with indirection comes obfuscation, so there's got to be a magic middle ground somewhere.
=CN 一条很著名的算法格言指出："没有什么问题太复杂, 而不能被采用适当手段来解决的 I<."> 当然, 用些小手段会使导致程序太难懂, 所以一定有些魔术在里面。
=EN Here, the expression 0. . $#input_numbers will be a list of indices for the array. Inside the block, $_ is a small integer, from 0 to 6 (seven items total). Now, we don't want to decide whether $_ has an odd digit sum. We want to know whether the array element at that index has an odd digit sum. Instead of using $_ to get the number of interest, use $input_numbers[$_]:
=CN 这里, 表达式 I<0..$> # I<input_numbers> 会是这个数组的索引号列表.在代码块里面, I<$_> 是个0～6的数字（总共7个元素）.现在, 我们并不要决定是否 I<$_> 的数位相加为奇数.我们要决定的是在这个位置上的元素的数位相加是否为奇数.所以, 我们感兴趣的不是 I<$_> , 而是 I<$input_numbers[$_]:>
=EN The result will be the indices at which 1, 16, and 32 appear in the list: 0, 4, and 5. We could use these indices in an array slice to get the original values again:
=CN 其結果是, 索引位置：0, 4, 5上的值：1, I<16> , I<32> 符合条件.我们可以把这些索引放在数组片断里, 然后获得值：
=EN The strategy here for an indirect grep or map is to think of the $_ values as identifying a particular item of interest, such as the key in a hash or the index of an array, and then use that identification within the block or expression to access the actual values.
=CN 这里运用 I<grep> 或者 I<map> 的技巧是把 I<$_> 值作为感兴趣的特定元素的标识来用, 比如散列的键或者数组的索引, 然后, 用这些标识, 在块中或者表达式中来访问实际的元素内容。
=EN Here's another example: select the elements of @x that are larger than the corresponding value in @y. Again, we'll use the indices of @x as our $_ items:
=CN 这里是另一个例子：如果 I<@x> 中的元素比 I<@y> 中相应的元素大, 则取出来.又一次, 我们会用 I<$_> 来当作 I<@x> 中的索引序号来用：
=EN In the grep, $_ varies from 0 to the highest index of @x. If that element is beyond the end of @y, we automatically select it. Otherwise, we look at the individual corresponding values of the two arrays, selecting only the ones that meet our match.
=CN 在 I<grep> 中, I<$_> 由0增长到数组 I<@x> 的索引最大值.如果元素超出 I<@y> 的索引边界, 则自动会选择它.否则, 我们会比较相应位置的两个元素的大小, 选择符合我们要求的。
=EN However, this is a bit more verbose than it needs to be. We could simply return the boolean expression rather than a separate 1 or 0:
=CN 然而, 这样的处理还是比较繁索.我们可以简单的返回布尔表达式, 而不是1或0：
=EN More easily, we can skip the step of building the intermediate array by simply returning the items of interest with a map:
=CN 更有甚者, 我们可以不用中间数组, 简单地用 I<map> 返回我们需要的数组：
=EN If the index is good, return the resulting array value. If the index is bad, return an empty list, making that item disappear.
=CN 如果符合条件, 则返回数组元素.如果不符合, 则返回一个空列表, 使元素蒸发。
