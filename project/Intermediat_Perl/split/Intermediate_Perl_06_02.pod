=EN Viewing Complex Data with Data::Dumper
=CN 用 I<Data::Dumper> 模块查看复杂数据
=EN Another way to visualize a complex data structure rapidly is to dump it. A particularly nice dumping package is included in the Perl core distribution, called Data::Dumper. Let's replace the last half of the byte-counting program with a simple call to Data::Dumper:
=CN 另外一个我们可以快速查看复杂数据结构的方法是用 I<dump> 模块打印出来.这个特别好用的 I<dump> 模块已被收纳在 I<Perl> 的核心发布中, 唤作： I<Data::Dumper.> 让我们改写前面那个字节计数的程序的后半部份, 这次用 I<Data:Dumper> 模块：
=EN The Data::Dumper module defines the Dumper subroutine. This subroutine is similar to the x command in the debugger. We can give Dumper one or more values, and Dumper turns those values into a printable string. The difference between the debugger's x command and Dumper, however, is that the string generated by Dumper is Perl code:
=CN I<Data::Dumper> 模块中定义了 I<Dumper> 子例程.这个子例子与调试工具中的x命令相似.我们可以给 I<Dumper> 子例程一个或多个值, I<Dumper> 会以人看得懂的格式返回这些值的内容.然而, I<Dumper> 与调试工具中x命令的不同是 I<Dumper> 输出的是 I<Perl> 代码：
=EN The Perl code is fairly understandable; it shows that we have a reference to a hash of three elements, with each value of the hash being a reference to a nested hash. We can evaluate this code and get a hash that's equivalent to the original hash. However, if you're thinking about doing this in order to have a complex data structure persist from one program invocation to the next, please keep reading.
=CN 这段 I<Perl> 代码很容易理解; 它显示我们有一个指向三个元素的散列的引用, 其中每个元素的值则是指向其它散列的引用的嵌套散列.我们可以求出这代码得出的散列同原来的散列值是等同的.但是, 如果你考虑通过这个将复杂数据结构保存下来, 并可以由其它的程序调用的话, 别急, 我们往下看就是了。
=EN Data::Dumper, like the debugger's x command, handles shared data properly. For example, go back to that "leaking" data from Chapter 5:
=CN I<Data::Dumper> , 同调试工具的命令行 x 命令一样, 处理共享数据属性.比如, 我们来看看先前第五章遇到的"内存泄漏"的例子：
=EN Here's the output from this program:
=CN 下面是程序的输出结果：
=EN Notice how we've created two different variables now, since there are two parameters to Dumper. The element $VAR1 corresponds to a reference to @data1, while $VAR2 corresponds to a reference to @data2. The debugger shows the values similarly:
=CN 注意我们是怎么创建了两个不同的变量, 因为传给了 I<Dumper> 两个参数.元素 I<$VAR1> 对应对 I<@data1> 的引用, 而 I<$VAR2> 对应对 I<@data2> 的引用.调试工作对值的展示类似：
=EN Note that the phrase REUSED_ADDRESS indicates that some parts of the data are actually references we've already seen.
=CN 注意, 短语 I<REUSED_ADDRESS> 标示数据的一些部份实际上已引用了我们已经看到的一些数据。
