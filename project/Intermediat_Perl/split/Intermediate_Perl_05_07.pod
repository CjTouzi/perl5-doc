=EN Autovivification
=CN 自生成
=EN Let's look again at the provisions list. Suppose we were reading the data from a file, in this format:
=CN 我们重顾一下装备清单.假定我们从一个文件中读取这些数据, 格式如下：
=EN We indent provisions with some whitespace, following a non-indented line with the person's name. Let's construct a hash of provisions. The keys of the hash will be the person's name, and the value will be an array reference to an array containing a list of provisions.
=CN 我们把装备用空格缩进表示, 没有缩进的行是旅客名字.我们来建立一个装备清单.索引键是旅客名字, 其值是一个指向装备列表的引用。
=EN Initially, we might gather the data using a simple loop:
=CN 起先, 我们用一个简单的循环收集数据：
=EN First, we declare the variables for the resulting hash of provisions and the current person. For each line that we read, we determine if it's a person or a provision. If it's a person, we remember the name and create the hash element for that person. The unless exists test ensures that we won't delete someone's provision list if his list is split in two places in the datafile.
=CN 首先, 我们定义一个变量来保存结果散列中的乘客及他们的清单.对于读出的每一行, 我们先判断它是乘客还是装备.如果是乘客, 我们记下姓名并为那个乘客创建散列元素 I<.unless> I<exists> 测试来保证在一个乘客的装备在文件中分两块地方放的时候, 我们不会把他的装备清单删掉。
=EN For example, suppose that "The Skipper" and "sextant" (note the leading whitespace) are at the end of the datafile in order to list an additional data item.
=CN 例如, 假定 I<"The> I<skipper"> 和 I<"sextant"(> 注意前导空格) 放在文件末尾, 作为增补的项目。
=EN The key is the person's name, and the value is initially a reference to an empty anonymous array. If the line is a provision, push it to the end of the correct array, using the array reference.
=CN 如果把乘客的名字作为键, 值是指向一个空数组的引用.如果读入的行是装备, 则使用引用数组, 把它推入当前的数组。
=EN This code works fine, but it actually says more than it needs to. Why? Because we can leave out the line that initializes the hash element's value to a reference to an empty array:
=CN 这样的代码运行得很好, 但实际上它不需要写那么多.为什么？ 因为我们可以把初始化指向数据的散列引用的地方去掉：
=EN What happens when we try to store that blue shirt for the Skipper? While looking at the second line of input, we'll end up with this effect:
=CN 那现在, 我们要把蓝衬衣放到 I<Skipper> 的装备清单时会发生什么呢？ 当查看第二项输入时, 我们结果可以看到如下的效果：
=EN At this point, $provisions{"The Skipper"} doesn't exist, but we're trying to use it as an array reference. To resolve the situation, Perl automatically inserts a reference to a new empty anonymous array into the variable and continues the operation. In this case, the reference to the newly created empty array is dereferenced, and we push the blue shirt to the provisions list.
=CN 在这时候, I<$provisions{"The> I<Skipper"}> 并不存在, 但我们正在把它作为一个数组引用来处理.为了解决这种情况, I<Perl> 自动为我们创建一个指向家的匿名数组的引用来继续操作.在此例中, 新的指向空数组的引用被创建, 并被还原, 我们再把蓝衬衫放进去, 生成了一个装备清单。
=EN This process is called autovivification. Any nonexistent variable, or a variable containing undef, which we dereference while looking for a variable location (technically called an lvalue context), is automatically stuffed with the appropriate reference to an empty item, and Perl allows the operation to proceed.
=CN 这样的处理叫做：自生成.任何一个不存在的变量, 或个存有 I<undef> 的变量, 当被用来查找一个变量的时候（技术上被称为左值环境）, 会自动被适当的生成空项引用, I<Perl> 然后再让处理继续。
=EN This is actually the same behavior we've probably been using in Perl all along. Perl creates new variables as needed. Before that statement, $provisions{"The Skipper"} didn't exist, so Perl created it. Then @{ $provisions{"The Skipper"} } didn't exist, so Perl created it as well.
=CN 实际上, 我们在使用 I<Perl> 时, 到处都会有相似的行为.只要有需要, I<Perl> 会自动创建变量.在这之前, I<$provisions{"The> I<Skipper"}> 不存在, 所以 I<Perl> 就创建它.后来 I<@{> I<$provisions{"The> I<Skipper"}> }不存在, 所以 I<Perl> 故伎重演。
=EN For example, this works:
=CN 比如, 下面在代码是工作的：
=EN new undefined variable
=CN 新定义的变量
=EN Here, we dereference the value $not_yet as if it were an array reference. But since it's initially undef, Perl acts as if we had said:
=CN 这儿, 我们还原了 I<$not_yet> 这个值, 好像它原先是一个指向数组的引用一样.但因为它初始化是 I<undef> , I<Perl> 的行为好像我们说过的：
=EN In other words, an initially empty array becomes an array of three elements.
=CN 换句话说, 一个初始化的空的数组成为一个有三个元素的数组。
=EN This autovivification also works for multiple levels of assignment:
=CN 在多层赋值时, 自生成也起作用：
=EN Initially, $top contains undef, but because we dereference it as if it were an array reference, Perl inserts a reference to an empty anonymous array into $top. Perl then accesses the third element (index value 2), which causes Perl to grow the array to be three elements long. That element is also undef, so Perl stuffs it with a reference to another empty anonymous array. We then spin out along that newly created array, setting the fifth element to lee-lou.
=CN 初始时, I<$top> 含有一个 I<undef> , 但因为我们还原它, 就像它是一个数组引用一样, I<Perl> 往里插了一个空的匿名数组的引用 I<.Perl> 然后访问第三个元素(索引为 I<2)> , 这导致 I<Perl> 撑大数组到三个元素长.那个元素同样是 I<undef> , 所以 I<Perl> 用另外一个指向空的匿名数组的引用放进去.我们然后分拆那个新建的数组, 把第五个元素放 I<lee-lou> 这个字串。
