=EN Trapping Errors with eval
=CN 用 I<eval> 捕捉错误
=EN Many lines of ordinary code have the potential to terminate a program prematurely if something goes wrong.
=CN 有一些代码看上去很平常, 但是却含有潜在的危险, 一旦某种条件不对就会使程序中断, 过早地结束程序。
=EN divide by zero
=CN 若除零呢
=EN illegal pattern
=CN 若传过来的正则表达式不对呢
=EN user-defined die
=CN 若打开失败呢
=EN die inside sub
=CN 若在子程序里出错退出程序呢
=EN But just because something has gone wrong with one part of our code, that doesn't mean that we want everything to crash.
=CN 可是, 不能因为代码的某一片断出错而使我们的整个程序崩溃。
=EN Perl uses the eval operator as its error-trapping mechanism
=CN I<Perl> 用 I<eval> 操作符来实现捕捉错误的机制。
=EN If an error happens while running code inside an eval block, the block is done executing.
=CN 如果在 I<eval> 块里代码发生错误, 系统会退出这个块。
=EN But even though the code inside the block is finished, Perl continues running the code just after the eval.
=CN 但是, 尽管退出块, I<Perl> 会继续执行 I<eval> 块之外的代码。
=EN It's most common after an eval to immediately check $@, which will either be empty (meaning that there was no error) or the dying words Perl had from the code that failed, perhaps something like "divide by zero" or a longer error message
=CN 我们在 I<eval> 块的后面一般做法是检查一下 I<$@> 变量, 这个变量要么是空（表示没有出错）或者代码出错时系统返回的"遗言", 多半是"除零错误"之类云云。
=EN The semicolon is needed after the eval block because eval is a function (not a control structure, such as if or while).
=CN I<eval> 块的结束时的分号是必须的, 因为不像 I<if> 或者 I<while> 那样的控制结构, I<eval> 实际上是个函数。
=EN But the block is a true block and may include lexical variables ("my" variables) and any other arbitrary statements.
=CN 但是代码块是真的块, 所以可以包括词法变量（ I<my> 修饰的变量）和另外其它的断言语句。
=EN As a function, eval has a return value much like a subroutine's (the last expression evaluated, or a value returned early by the return keyword).
=CN 因为是个函数, I<eval> 有像子例程那样的返回值（最后一个表达式的求值结果, 或者由 I<return> 语句返回的结果）。
=EN Of course, if the code in the block fails, no value is returned; this gives undef in a scalar context, or an empty list in a list context.
=CN 当然, 如果代码块失败则没有值返回;如果在标量环境将返回未定义值, 在列表环境将返回一个空的列表。
=EN Thus, another way to calculate an average safely looks like this:
=CN 因此, 比较安全的求平均值的代码的写法如下：
=EN Now $average is either the quotient or undef, depending upon whether the operation completed successfully or not.
=CN 现在, 根据这个操作执行的成败, 变量 I<$average> 要么是两数之商要么是个未定义值。
=EN Perl even supports nested eval blocks. The power of an eval block to trap errors extends for as long as it's executing, so it catches errors deep within nested subroutine calls. eval can't trap the most serious of errors, though: the ones in which Perl itself stops running. These include things such as an uncaught signal, running out of memory, and other catastrophes. eval doesn't catch syntax errors, either; because Perl compiles the eval block with the rest of the code, it catches syntax errors at compile time, not at runtime. It doesn't catch warnings either (although Perl does provide a way to intercept warning messages; see $SIG{_ _WARN_ _})
=CN I<Perl> 也支持 I<eval> 代码块的嵌套.只要代码执行, I<eval> 块总能捕捉错误, 所以它能捕捉嵌套子例程里发生的错误.尽管如此, I<eval> 不能捕捉到非常严重的错误, 这些错误发生时 I<Perl> 自己会中断执行.这些错误包括无法捕捉的信号, 内存溢出或其它的灾难 I<.eval> 同样不能捕捉到语法错误;因为 I<Perl> 在编译 I<eval> 及其它代码的时候检查语法错误, 而不是在运行时.还有, I<eval> 也不能捕捉警告.（但是 I<Perl> 的确提供一个方法来捕捉警告信息;可以查阅一下变量 I<$SIG{__WARN__}>）
