=EN IO::Handle
=CN I<IO::Handle> 模块
=EN Behind the scenes, Perl is really using the IO::Handle module to work this magic, so our filehandle scalar is really an object.
=CN 在帷幕之后, I<Perl> 实际上用调用 I<IO::Handle> 模块来变这个戏法的, 所以, 我们的文件句柄实际上是一个对象。
=EN The IO::Handle package is a base class for input-output things, so it handles a lot more than just files.
=CN I<IO::Handle> 包是输入输出的基础类, 所以它处理许多不仅仅有关文件的操作。
=EN Have you ever wondered why there is no comma after the filehandle portion of the print? It is really the indirect object notation
=CN 你是否曾经疑惑为什么 I<print> 语句的文件句柄后面为什么不加逗号？这的确是对象的一种间接标记
=EN which we have not mentioned yet, unless you have read the whole book before you read the footnotes, like we told you to do in the preface!).
=CN 这是我们还没有提及的, 除非你已经在读这个脚注前先读完了本书, 就像我们在前言里说的那样！
=EN Unless you are creating new IO modules, you probably shouldn't use IO::Handle directly. Instead, use some of the handy modules built on top of it.
=CN 除非你正在创建新的 I<IO> 模块, 一般来说你不会直接调用 I<IO::Handle> 模块.相反的, 我们可以用一些建立在 I<IO::Handle> 模块之上更加好用的模块。
=EN We haven't told you about object-oriented programming (OOP) yet (it's in Chapter 11, so we almost have), but in this case, you just have to follow the example in its documentation.
=CN 我们还没有告诉你有关面向对象编程的知识（在第 I<11> 章, 所以我们一定会说的）, 但目前情况下, 你只要跟着本书的例子就可以了。
=EN Some of these modules do some of the same things that we can already do with Perl's built-in open (depending on which version of Perl we have), but they can be handy when we want to decide as late as possible which module should handle input or output.
=CN 这些模块做的工作同 I<Perl> 自带的 I<open> 相同（这要依赖你使用的 I<Perl> 的版本）, 但是, 当我们要尽可能晚的决定模块处理输入输出时, 用他们就很顺手。
=EN Instead of using the built-in open, we use the module interface.
=CN I<To> I<switch> I<the> I<behavior> , I<we> I<simply> I<change> I<the> I<module> I<name.>
=EN Since we've set up our code to use a module interface, it's not that much work to switch modules.
=CN 代替我们使用内建的 I<open> , 我们使用模块接口。
=EN 我们只要简单的改一下模块的名字, 就可以改变行为.
=CN 因为我们已经为使用模块接口建立了代码, 切换模块就不费多少功夫。
=EN The IO::File module subclasses IO::Handle to work with files.
=CN I<IO::File> 模块是 I<IO::Handle> 模块的子类, 用来同文件打交道。
=EN It comes with the standard Perl distribution, so you should already have it.
=CN 它是随标准 I<Perl> 一起发布的, 所以你应该已经有这些模块了。
=EN There are a variety of ways to create an IO::File object.
=CN 可以用多种方法来创建一个 I<IO::File> 对象。
=EN We can create the filehandle reference with the one-argument form of the constructor.
=CN 我们可以用单参数构造器的形式创建文件句柄的引用。
=EN We check the result of the operation by looking for a defined value in the filehandle reference variable.
=CN 我们可以通过检查返回值是否为空来判断文件句柄引用创建是否成功。
=EN If you do not like that (for the same reasons as regular open), use one of the other calling conventions.
=CN 如果不喜欢用这种方式（因为同样原因也不喜欢标准 I<open> ）, 你可以用另一种调用约定。
=EN The optional second argument is the filehandle mode.
=CN 可选的第二个参数是文件句柄的打开方式。
=EN These are the ANSI C fopen mode strings. You can also use these with the built-in open.
=CN 这些都是 I<ANSI> C 的 I<fopen> 的文件打开方式的字串.你在内建的 I<open> 中也可以使用。
=EN Indeed, IO::File uses the built-in open behind the scenes.
=CN 实际上, I<IO::File> 在后台也是使用内建的 I<open> 函数的。
=EN Using a bit mask as the mode allows for more granular control. The IO::File module supplies the constants.
=CN 用打开模式掩码可以对文件进行更细致的控制 I<.IO::File> 模块提供这些掩码的定义。
=EN Besides opening named files, we might want to open an anonymous temporary file.
=CN 除了打开命名文件, 我们可能要打开匿名的临时文件。
=EN On systems that support this sort of thing, we simply create the new object to get a read-write filehandle.
=CN 对于支持这种文件的系统, 我们只要简单地以读写文件名柄建立一个新对象就可以了。
=EN As before, Perl closes these files when the scalar variable goes out of scope, but if that is not enough, we do it ourselves explicitly.
=CN 在以前, I<Perl> 会在这些标量变量跑出范围的时候把文件关闭, 不过, 如果你还不放心, 我们可以显式关闭文件。
=EN Anonymous IO::File Objects
=CN 匿名 I<IO:File> 对象
=EN If we don't put our IO::File object in a simple scalar variable, some operations require a slightly modified syntax to work.
=CN 如果我们不是把 I<IO::File> 返回的对象放到一个标量变量中, 那么操作起来需要一些对语法的小小变动。
=EN For example, we want to copy every file matched by the glob pattern of *. input to a corresponding file whose suffix is. output, but do it in parallel.
=CN 比如这么一个例子, 我们现在要把所有符合* I<.input> 的文件都拷贝到相应的* I<.output> 文件中, 但我们要并行的进行拷贝。
=EN First, we open all the files, both inputs and outputs:
=CN 首先, 我们打开所有的文件, 包括输入和输出的双方：
=EN Now we have an array of references to arrays, each element of which is an IO::File object. Now, let us pump the data from the input files to the output files.
=CN 好, 现在我们有了一个保存数组引用的数组, 这个数组中所每个元素都是 I<IO::File> 对象.现在, 让我们把输入文件的数据灌入输出文件中去。
=EN As long as we have pairs, we keep passing the list through the grep structure:
=CN 只要还有文件对, 我们就会通过 I<grep> 结构不断把列表传过来：
=EN On each pass, only the handle pairs that evaluate as true in the grep CONDITION survive. Inside, we take the first element of each pair and try to read from it. If that's successful, write that line to the second element of the pair (the corresponding output handle). If the print is successful, it returns true, which lets grep know that we want to keep that pair. If either the print fails or the getline returns undef, the grep sees the false value as an indication to discard that pair. Discarding the pair automatically closes both filehandles. Cool!
=CN 在每个传输过程中, 只有那些通过 I<grep> 条件测试的句柄对才会留下.在条件测试中, 我们拿句柄对中第一个元素并读取其中内容.如果处理成功, 则向句柄对中第二个元素（对应的输出句柄）写行.如果打印成功, 它返回 I<true> , 这样就让 I<grep> 知道我们要保留那个句柄对.只要打印失败或取行返回未定义值, I<grep> 就会认做 I<false> 并放弃那个句柄对.放弃句柄对自动就关闭了输入输出句柄.太妙了！
=EN Note that we can't use the more traditional filehandle read or filehandle print operations, because the reading and writing filehandles were not in a simple scalar variable. We can rewrite that loop to see if copying the handles is easier:
=CN 注意, 我们不能用更传统的句柄读或者写操作, 因为句柄的读写不能在简单标量变量中.我们可以通过重写那个循环, 看看拷贝句柄是否更方便：
=EN This scenario is arguably better. Most of the time, simply copying the complexly referenced value into a simple scalar is easier on the eyes. In fact, another way to write that loop is to get rid of the ugly if structure:
=CN 这样的写法理论上应该很好.大多数情况下, 简单地把复杂引用的值拷贝到一个标量看上去应该更简单.实际上, 用另一种方法写这个循环可以把讨厌的 I<if> 结构去掉：
=EN As long as someone understands that and is a partial evaluator and that print returns true when everything is okay, this is a fine replacement. Remember the Perl motto: "There's more than one way to do it" (although not all of them are equally nice or legitimate).
=CN 如果你懂得 I<and> 是个部分求值的短路操作, 只要一切 I<OK> 就返回 I<true> , 这就是个不错的替代.记住 I<Perl> 的信条："条条大路通罗马"（尽管不一定在所有的情况下都合情合理）。
=EN Sometimes we don't want to print to a file and would rather build up the output in a string. Some module interfaces don't give us that option, so we have to make it look like we are printing to a file by using a filehandle. We might also want to build up our content before we write it to a file so we can encrypt it, compress it, or send it as email directly from your program.
=CN 有些时候, 我们并不想把内容直接打印到文件, 宁愿把输出送到一个字串中去.一些模块的接口不提供给我们这个选项, 所以我们不得不利用看上去像打印到文件中去的文件句柄来完成.我们可能要在把内容写到文件之前先建立好, 这样我们就可以对文件内容进行加密, 压缩或从你的程序中直接把它作为邮件发出去。
=EN The IO::Scalar module uses the magic of tie behind the scenes to give us a filehandle reference that appends to a scalar. This module doesn't come with the standard Perl distribution, so you'll have to install it yourself most likely.
=CN I<IO::Scalar> 模块在幕后是使用 I<tie> 来实现魔法的, 它把一个文件句柄引用给一个标量.这个模块不在标准的 I<Perl> 发行版中, 所以你可能必须自己安装它。
=EN Now our log message ends up in the scalar variable $string_log instead of a file. What if we want to read from our logfile, though? We do the same thing. In this example, we create $scalar_fh just as we did before, then read from it with the line input operator. In our while loop, we'll extract the log messages that contain Gilligan (which is probably most of them, since he's always part of the mess):
=CN 现在我们的日志信息不是放在文件中, 而是放在标量变量 I<$string_log> 中.那我们如何从我们的日志文件中读呢？ 故伎重演而已.在这个例子中, 我们象之前一样创建变量 I<$scalar_fh> , 然后用用输入操作符从中读行.在我们的 I<while> 循环中, 我们从日志信息中抽出包含 I<Gilligan> 的行（应该有很多吧, 因为他总是纠缠在许多事情中）：
=EN As of Perl version 5. 8, we can do this directly in Perl without using IO::Scalar.
=CN 在 I<Perl> I<5.8> 中, 我们可以直接在 I<Perl> 中写这样的语句, 而不必引入 I<IO::Scalar:>
=EN What if we want to send output to more than one place at a time? What if we want to send it to a file and save it in a string at the same time? Using what we know already, we had have to do something like this:
=CN 如果我们要一次将结果发送到多个不同的地方, 应该如何做？ 如果我们要把内容发送到一个文件的同时存入一个字串中呢？ 用我们目前所知, 我们大概不得不做如下这些：
=EN Of course, we could shorten that a bit so we only have one print statement. We use the foreach control structure to iterate through the filehandle references, store each in $fh in turn, and print to each one.
=CN 当然, 我们可以缩短一些, 这样我们可以只用一个打印语句.我们用 I<foreach> 控制结构来迭代地使用句柄引用, 用 I<$fn> 一次换一个, 打印到每个句柄。
=EN That's still a bit too much work. In the foreach, we had to decide which filehandles to include. What if we could just define a group of filehandles that answered to the same name? Well, that's what IO::Tee does for us. Imagine it like a tee connector on a bilge output pipe; when the water gets to the tee, it can flow it two different directions at the same time. When our output gets to IO::Tee, it can go to two (or more) different channels at the same time. That is, IO::Tee multiplexes output. In this example, the castaways log message goes to both the logfile and the scalar variable.
=CN 不过, 这个看上去还是有些复杂.在 I<foreach> , 我们还得决定是哪个句柄.以不能定义一组句柄来回答同样的问题呢？ 哈, 这就是 I<IO::Tee> 提供的功能.可以把它想像成舱底连接输出水管儿的T字连接口; 当水灌到T字口的时候, 它会同时向两个不同的方向流.当我们的数据灌入 I<IO::Tee> 时, 它会流向两个（或多个）不同管道.就是说 I<IO::Tee> 实现了多路输出.在下面 例子中, 日志同时写入 I<logfile> 和标量变量。
=EN That's not all, though. If the first argument to IO::Tee is an input filehandle (the succeeding arguments must be output filehandles), we can use the same teed filehandle to read from input and write to the output. The source and destination channels are different, but we get to treat them as a single filehandle.
=CN 呵呵, 还有更绝的.如果我们给 I<IO::Tee> 一些参数（第一个为输入句柄, 其后均为输出句柄）, 我们可以用同一个 I<Tee> 过的句柄来从输入中读和从输出中写.虽然输出源和输出目的地不同, 但我们可以用同一个句柄来操作。
=EN The $read_fh doesn't have to be connected to a file, either. It might also be connected to a socket, a scalar variable, an external command's output, [*] or anything else we can dream up.
=CN 而且 I<$read_fh> 并不一定非要连上文件.它可以连上一个套接字, 一个标量变量, 一个外部命令的输出, [*] 或者任何其它你想得出来的东西。
=EN You can create readable filehandles to external commands with IO::Pipe.
=CN 你可以用 I<IO::Pipe> 建立一个可读的句柄给外部命令。
