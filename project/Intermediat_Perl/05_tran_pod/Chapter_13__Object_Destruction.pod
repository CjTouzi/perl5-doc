Chapter 13. Object 自毁ion 

In the previous two chapters, we looked at basic object creation and manipulation. In this chapter, we'll look at an equally important topic: what happens when objects go away.  

As we showed in Chapter 4, when the last reference to a Perl data structure goes away, Perl automatically reclaims the memory of that data structure, including destroying any links to other data. Of course, that in turn may cause Perl to destroy other ("contained") structures as well.  

By default, objects work in this manner because objects use the same reference structure to make more complex objects. An object built of a hash reference is destroyed when the last reference to that hash goes away. If the values of the hash elements are also references, they're similarly removed, possibly causing further 自毁ion.  

13. 1. Cleaning Up After Yourself 

Suppose our object uses a temporary file to hold data that won't fit entirely in memory. The object can include the filehandle for this temporary file in its instance data. While the normal object 自毁ion sequence will properly close the handle, we still have the temporary file on disk unless we take further action.  

To perform the proper cleanup operations when an object is destroyed, we need to know when that happens. Thankfully, Perl provides such notification upon request. We can request this notification by giving the object a DESTROY method.  

When the last reference to an objectsay, $bessiedisappears, Perl invokes that object's DESTROY method automatically, as if we had called it ourselves.  


 $bessie->DESTROY 

This method call is like most other method calls: Perl starts at the class of the object and works its way up the inheritance hierarchy until it finds a suitable method. However, unlike other method calls, there's no error if Perl doesn't find a suitable method. [*] 

[*] Normally, our own method calls will cause an error if Perl doesn't find them. If we want to prevent that, we just put a do-nothing method into the base class.  

For example, going back to the Animal class defined in Chapter 11, we can add a DESTROY method to know when objects go away, purely for 调试错误 purposes: 


 ## in Animal 
 sub DESTROY { 
   my $self = shift; 
   print '[', $self->name, " has 消亡. ]\n"; 
 } 

Now when we create any Animals in the program, we get notification as they leave. For example: 


 ## include animal classes from previous chapter. . .  


 sub feed_a_cow_named { 
   my $name = shift; 
   my $cow = Cow->named($name); 
   $cow->eat('grass'); 
   print "Returning from the subroutine. \n";    # $cow is destroyed here 
 } 
 print "Start of program. \n"; 
 my $outer_cow = Cow->named('Bessie'); 
 print "Now have a cow named ", $outer_cow->name, ". \n"; 
 feed_a_cow_named('Gwen'); 
 print "Returned from subroutine. \n"; 

This prints: 


 Start of program.  
 Now have a cow named Bessie.  
 Gwen eats grass.  
 Returning from the subroutine.  
 [Gwen has 消亡. ] 
 Returned from subroutine.  
 [Bessie has 消亡. ] 

Note that Gwen is active inside the subroutine. However, as the subroutine exits, Perl notices there are no references to Gwen; it automatically invokes Gwen's DESTROY method, printing the Gwen has 消亡 message.  

What happens at the end of the program? Since objects don't live beyond the end of the program, Perl makes one final pass over all remaining data and destroys it. This is true whether the data is held in lexical variables or package global variables. Because Bessie is still alive at the end of the program, she needs to be recycled, and so we get the message for Bessie after all other steps in the program are complete. [*] 

[*] This is just after the END 块s are executed and follows the same rules as END 块s: there must be a nice exit of the program rather than an abrupt end. If Perl runs out of memory, all bets are off.  

13. 2. Nested Object 自毁ion 

If an object holds another object (say, as an element of an array or the value of a hash element), Perl DESTROYs the containing object before any of the contained objects begin their discarding process. This is reasonable because the containing object may need to reference its contents in order to disappear gracefully. To illustrate this, let's build a "barn" and tear it down. And, just to be interesting, we'll make the barn a blessed array reference, not a hash reference.  


 { package Barn; 
   sub new { bless [  ], shift } 
   sub add { push @{+shift}, shift } 
   sub contents { @{+shift} } 
   sub DESTROY { 
     my $self = shift; 
     print "$self is being destroyed. . . \n"; 
     for ($self->contents) { 
       print '  ', $_->name, " goes homeless. \n"; 
     } 
   } 
 } 

Here, we're really being minimalistic in the object definition. To create a new barn, we simply bless an empty array reference into the class name passed as the first parameter. Adding an animal just pushes it to the back of the barn. Asking for the barn's contents merely dereferences the object array reference to return the contents. [] The fun part is the 自毁or. Let's take the reference to ourselves, display a 调试错误 message about the particular barn being destroyed, and then ask for the name of each inhabitant in turn. In action, this would be: 

[] Did you wonder why there's a plus sign (+) before shift in two of those 子程序? That's due to one of the quirks in Perl's syntax. If the code were simply @{shift}, because the curly braces contain nothing but a bareword, it would be interpreted as a soft reference: @{"shift"}. In Perl, the unary plus (a plus sign at the beginning of a term) is defined to do nothing (not even turning what follows into a number), just so it can distinguish cases such as this.  


 my $barn = Barn->new; 
 $barn->add(Cow->named('Bessie')); 
 $barn->add(Cow->named('Gwen')); 
 print "Burn the barn:\n"; 
 $barn = undef; 
 print "End of program. \n"; 

This prints: 


 Burn the barn: 
 Barn=ARRAY(0x541c) is being destroyed. . .  
   Bessie goes homeless.  
   Gwen goes homeless.  
 [Gwen has 消亡. ] 
 [Bessie has 消亡. ] 
 End of program.  

Note that Perl first destroys the barn, letting us get the name of the inhabitants cleanly. However, once the barn is gone, the inhabitants have no additional references, so they also go away, and thus Perl invokes their 自毁装置 too. Compare that with the cows having a life outside the barn: 


 my $barn = Barn->new; 
 my @cows = (Cow->named('Bessie'), Cow->named('Gwen')); 
 $barn->add($_) for @cows; 
 print "Burn the barn:\n"; 
 $barn = undef; 
 print "Lose the cows:\n"; 
 @cows = (  ); 
 print "End of program. \n"; 

This produces: 


 Burn the barn: 
 Barn=ARRAY(0x541c) is being destroyed. . .  
   Bessie goes homeless.  
   Gwen goes homeless.  
 Lose the cows: 
 [Gwen has 消亡. ] 
 [Bessie has 消亡. ] 
 End of program.  

The cows will now continue to live until the only other reference to the cows (from the @cows array) goes away.  

The references to the cows disappear only when the barn 自毁or is completely finished. In some cases, we may wish instead to shoo the cows out of the barn as we notice them. In this case, it's as simple as 自毁ively altering the barn array, rather than iterating over it. [*] Let's alter the Barn to Barn2 to illustrate this: 

[*] If we're using a hash instead, we can use delete on the elements we wish to process immediately.  


 { package Barn2; 
   sub new { bless [  ], shift } 
   sub add { push @{+shift}, shift } 
   sub contents { @{+shift} } 
   sub DESTROY { 
     my $self = shift; 
     print "$self is being destroyed. . . \n"; 
     while (@$self) { 
       my $homeless = shift @$self; 
       print '  ', $homeless->name, " goes homeless. \n"; 
     } 
   } 
 } 

Now use it in the previous scenarios: 


 my $barn = Barn2->new; 
 $barn->add(Cow->named('Bessie')); 
 $barn->add(Cow->named('Gwen')); 
 print "Burn the barn:\n"; 
 $barn = undef; 
 print "End of program. \n"; 

This produces: 


 Burn the barn: 
 Barn2=ARRAY(0x541c) is being destroyed. . .  
   Bessie goes homeless.  
 [Bessie has 消亡. ] 
   Gwen goes homeless.  
 [Gwen has 消亡. ] 
 End of program.  

As we can see, Bessie had no home by being booted out of the barn immediately, so she also 消亡. (Poor Gwen suffers the same fate. ) There were no references to her at that moment, even before the 自毁or for the barn was complete.  

Thus, back to the temporary file problem. We modify our Animal class to use a temporary file by using the File::Temp module, which is part of the standard distribution. Its tempfile routine knows how to make temporary 文件, including where to put them and so on, so we don't have to. The tempfile function returns a filehandle and a filename, and we store both of those because we need both of them in the 自毁or.  


 ## in Animal 
 use File::Temp qw(tempfile); 


 sub named { 
   my $class = shift; 
   my $name = shift; 
   my $self = { Name => $name, Color => $class->default_color }; 
   ## new code here. . .  
   my ($fh, $filename) = tempfile(  ); 
   $self->{temp_fh} = $fh; 
   $self->{temp_filename} = $filename; 
   ##. . to here 
   bless $self, $class; 
 } 

We now have a filehandle and its filename stored as instance variables of the Animal class (or any class derived from Animal). In the 自毁or, we close it down and delete the file:[*] 

[*] As it turns out, we can tell File::Temp to do this automatically, but then we wouldn't be able to illustrate doing it manually. Doing it manually allows us to do extra processing, such as storing a summary of the information from the temporary file into a database.  


 sub DESTROY { 
   my $self = shift; 
   my $fh = $self->{temp_fh}; 
   close $fh; 
   unlink $self->{temp_filename}; 
   print '[', $self->name, " has 消亡. ]\n"; 
 } 

When Perl destroys the last reference to the Animal-ish object (even if it's at the end of the program), it also automatically removes the temporary file to avoid a mess.  

13. 3. Beating a Dead Horse 

Because the 自毁or method is inherited, we can also override and extend superclass methods. For example, we'll decide the dead horses need a further use. In our Horse class, we override the DESTROY method we inherited from Animal so we can do extra processing. However, since the Animal class might be doing things we aren't supposed to know about, we call its version of DESTROY using the SUPER:: pseudo-class we saw in Chapter 11.  


 ## in Horse 
 sub DESTROY { 
   my $self = shift; 
   $self->SUPER::DESTROY; 
   print "[", $self->name, " has gone off to the glue factory. ]\n"; 
 } 


 my @tv_horses = map Horse->named($_), ('Trigger', 'Mr. Ed'); 
 $_->eat('an apple') for @tv_horses;     # their last meal 
 print "End of program. \n"; 

This prints: 


 Trigger eats an apple.  
 Mr. Ed eats an apple.  
 End of program.  
 [Mr. Ed has 消亡. ] 
 [Mr. Ed has gone off to the glue factory. ] 
 [Trigger has 消亡. ] 
 [Trigger has gone off to the glue factory. ] 

We'll feed each horse a last meal; at the end of the program, each horse's 自毁or is called.  

The first step of this 自毁or is to call the parent 自毁or. Why is this important? Without calling the parent 自毁or, the steps taken by superclasses of this class will not properly execute. That's not much if it's simply a 调试错误 statement, as we've shown, but if it was the "delete the temporary file" cleanup method, you wouldn't have deleted that file! 

So, the rule is: 

Always include a call to $self->SUPER::DESTROY in our 自毁装置 (even if we don't yet have any base/parent classes).  

Whether we call it at the beginning or the end of our own 自毁or is a matter of hotly contested debate. If our derived class needs some superclass instance variables, we should probably call the superclass 自毁or after we complete our operations, because the superclass 自毁or will likely alter them in annoying ways. On the other hand, in the example, we called the superclass 自毁or before the added behavior, because we wanted the superclass behavior first.  

13. 4. Indirect Object Notation 

The arrow syntax used to invoke a method is sometimes called the direct object syntax because there's also the indirect object syntax, also known as the "only works sometimes" syntax, for reasons we explain in a moment. We can generally replace what we'd write with the arrow notation: 


 Class->class_method(@args); 
 $instance->instance_method(@other); 

with the method name preceding the class name and the arguments at the end.  


 classmethod Class @args; 
 instancemethod $instance @other; 

This idiom was much more prevalent in the earlier days of Perl 5, and we're still trying to eradicate it from the world. We wish that we didn't have to cover it here (if you don't know about it, you can't use it), but it sticks around in otherwise good code, so you need to know what is going on. You'll typically see this with the new method where module 作者 replace the arrow syntax: 


 my $obj = Some::Class->new(@构造or_params); 

with something that reads more like English: 


 my $obj = new Some::Class @构造or_params; 

which makes the C++ people feel right at home. Of course, in Perl, there's nothing special about the name new, but at least the syntax is hauntingly familiar.  

Why the "generally" caveat on when you can replace the arrow syntax with indirect object syntax? Well, if the instance is something more complicated than a simple scalar variable: 


 $somehash->{$somekey}->[42]->instance_method(@parms); 

then we can't just swap it around to the indirect notation: 


 instance_method $somehash->{$somekey}->[42] @parms; 

The only things acceptable to indirect object syntax are a bareword (e. g. , a class name), a simple scalar variable, or braces denoting a 块 returning either a blessed reference or a classname. [*] This means we have to write it like so: 

[*] Astute readers will note that these are the same rules as for an indirect filehandle syntax, which indirect object syntax directly mirrors, as well as the rules for specifying a reference to be dereferenced.  


 instance_method { $somehash->{$somekey}->[42] } @parms; 

And that goes from simple to ugly in one step. There's another downside: ambiguous parsing. When we developed the classroom materials concerning indirect object references, we wrote: 


 my $cow = Cow->named('Bessie'); 
 print name $cow, " eats. \n"; 

because we were thinking about the indirect object equivalents for: 


 my $cow = Cow->named('Bessie'); 
 print $cow->name, " eats. \n"; 

However, the latter works; the former doesn't. We were getting no output. Finally, we enabled warnings (via -w on the command line)[] and got this interesting series of messages: 

[] Using -w should be the first step when Perl does something we don't understand. Or maybe it should be the zeroth, because we should normally have -w in effect whenever we're developing code.  

Unquoted string "name" may clash with future reserved word at. /foo line 92.  Name "main::name" used only once: possible typo at. /foo line 92.  print() on unopened filehandle name at. /foo line 92.  

Ahh, so that line was being parsed as: 


 print name ($cow, " eats. \n"); 

In other words, print the list of items to the filehandle named name. That's clearly not what we wanted, so we had to add additional syntax to disambiguate the call. [] 

[] The ambiguity shows up because print( ) itself is a method called on the filehandle. You're probably used to thinking of it as a function, but remember that missing comma after the filehandle. It looks just like our indirect object calling syntax, because it is.  

This leads us to our next strong suggestion: Use direct object syntax at all times.  

We realize, though, that people write new Class. . . rather than Class->new(. . . ) and that most of us are fine with that. Older modules preferred that notation in their 实例, and once you write it that way, you tend to keep doing it that way. However, there are circumstances in which even that can lead to ambiguity (e. g. , when a subroutine named new has been seen, and the class name itself has not been seen as a package). When in doubt, ignore indirect object syntax. Your maintenance programmer will thank you.  

13. 5. Additional Instance Variables in Subclasses 

One of the nice things about using a hash for a data structure is that derived classes can add additional instance variables without the superclass needing to know of their addition. For example, let's derive a RaceHorse class that is everything a Horse is but also tracks its win/place/show/lose standings. The first part of this is trivial: 


 { package RaceHorse; 
   our @ISA = qw(Horse); . . .  
 } 

We'll also want to initialize "no wins of no races" when we create the RaceHorse. We do this by extending the named subroutine and adding four additional fields (wins, places, shows, losses, for first-, second-, and third-place finishes, and none of the above): 


 { package RaceHorse; 
   our @ISA = qw(Horse); 
   ## extend parent 构造or: 
   sub named { 
     my $self = shift->SUPER::named(@_); 
     $self->{$_} = 0 for qw(wins places shows losses); 
     $self; 
   } 
 } 

Here, we pass all parameters to the superclass, which should return a fully formed Horse. However, because we pass RaceHorse as the class, it is blessed into the RaceHorse class. [*] Next, we add the four instance variables that go beyond those defined in the superclass, setting their initial values to 0. Finally, return the modified RaceHorse to the caller.  

[*] Similar to the way the Animal 构造or creates a Horse, not an Animal, when passed Horse as the class.  

It's important to note here that we've actually "opened the box" a bit while writing this derived class. We know that the superclass uses a hash reference and that the superclass hierarchy doesn't use the four names chosen for a derived class. This is because RaceHorse will be a "friend" class (in C++ or Java terminology), accessing the instance variables directly. If the maintainer of Horse or Animal ever 变更 representation or names of variables, there could be a collision, which might go undetected until that important day when we're showing off our code to the investors. Things get even more interesting if the hashref is changed to an arrayref as well.  

One way to decouple this dependency is to use composition rather than inheritance as a way to create a derived class. In this example, we need to make a Horse object an instance variable of a RaceHorse and put the rest of the data in separate instance variables. You also need to pass any inherited method calls on the RaceHorse down to the Horse instance, through 授权. However, even though Perl can certainly support the needed operations, that approach is usually slower and more cumbersome. Enough on that for this discussion, however.  

Next, let's provide some access methods: 


 { package RaceHorse; 
   our @ISA = qw(Horse); 
   ## extend parent 构造or: 
   sub named { 
     my $self = shift->SUPER::named(@_); 
     $self->{$_} = 0 for qw(wins places shows losses); 
     $self; 
   } 
   sub won { shift->{wins}++; } 
   sub placed { shift->{places}++; } 
   sub showed { shift->{shows}++; } 
   sub lost { shift->{losses}++; } 
   sub standings { 
     my $self = shift; 
     join ', ', map "$self->{$_} $_", qw(wins places shows losses); 
   } 
 } 


 my $racer = RaceHorse->named('Billy Boy'); 
 # record the outcomes: 3 wins, 1 show, 1 loss 
 $racer->won; 
 $racer->won; 
 $racer->won; 
 $racer->showed; 
 $racer->lost; 
 print $racer->name, ' has standings of: ', $racer->standings, ". \n"; 

This prints: 


 Billy Boy has standings of: 3 wins, 0 places, 1 shows, 1 losses.  
 [Billy Boy has 消亡. ] 
 [Billy Boy has gone off to the glue factory. ] 

Note that we're still getting the Animal and Horse 自毁or. The superclasses are unaware that we've added four additional elements to the hash, so they still function as they always have.  

13. 6. Using Class Variables 

What if we want to iterate over all the animals we've made so far? Animals may exist all over the program namespace but are lost once they're handed back from the named 构造or method. [*] 

[*] Well, not really lost. Perl knows where they are, but we don't.  

However, we can record the created animal in a hash and iterate over that hash. The key to the hash can be the stringified form of the animal reference, [] while the value can be the actual reference, allowing us to access its name or class.  

[] Or any other convenient and unique string.  

For example, let's extend named as follows: 


 ## in Animal 
 our %REGISTRY; 
 sub named { 
   my $class = shift; 
   my $name = shift; 
   my $self = { Name => $name, Color => $class->default_color }; 
   bless $self, $class; 
   $REGISTRY{$self} = $self;  # also returns $self 
 } 

The uppercase name for %REGISTRY is a reminder that this variable is more global than most variables. In this case, it's a meta-variable that contains information about many instances.  

When we use $self as a key, Perl stringifies it, which means it turns into a string unique to the object.  

We also need to add a new method: 


 sub registered { 
   return map { 'a '. ref($_). " named ". $_->name } values %REGISTRY; 
 } 

Now we can see all the animals we've made: 


 my @cows = map Cow->named($_), qw(Bessie Gwen); 
 my @horses = map Horse->named($_), ('Trigger', 'Mr. Ed'); 
 my @racehorses = RaceHorse->named('Billy Boy'); 
 print "We've seen:\n", map("  $_\n", Animal->registered); 
 print "End of program. \n"; 

This prints: 


 We've seen: 
   a RaceHorse named Billy Boy 
   a Horse named Mr. Ed 
   a Horse named Trigger 
   a Cow named Gwen 
   a Cow named Bessie 
 End of program.  
 [Billy Boy has 消亡. ] 
 [Billy Boy has gone off to the glue factory. ] 
 [Bessie has 消亡. ] 
 [Gwen has 消亡. ] 
 [Trigger has 消亡. ] 
 [Trigger has gone off to the glue factory. ] 
 [Mr. Ed has 消亡. ] 
 [Mr. Ed has gone off to the glue factory. ] 

Note that the animals die at their proper time because the variables holding the animals are all being destroyed at the final step. Or are they? 

13. 7. Weakening the Argument 

The %REGISTRY variable also holds a reference to each animal. So even if we toss away the containing variables, for instance by letting them go out of scope: 


 { 
   my @cows = map Cow->named($_), qw(Bessie Gwen); 
   my @horses = map Horse->named($_), ('Trigger', 'Mr. Ed'); 
   my @racehorses = RaceHorse->named('Billy Boy'); 
 } 
 print "We've seen:\n", map("  $_\n", Animal->registered); 
 print "End of program. \n"; 

we'll still see the same result. The animals aren't destroyed, even though none of the code is holding the animals. At first glance, it looks like we can fix this by altering the 自毁or: 


 ## in Animal 
 sub DESTROY { 
   my $self = shift; 
   print '[', $self->name, " has 消亡. ]\n"; 
   delete $REGISTRY{$self}; 
 } 
 ## this code is bad (see text) 

But this still results in the same output. Why? Because the 自毁or isn't called until the last reference is gone, but the last reference won't be destroyed until the 自毁or is called. [*] 

[*] We'd make a reference to chickens and eggs, but that would introduce yet another derived class to Animal.  

One solution for fairly recent Perl versions[] is to use weak references. A weak reference doesn't count as far as the reference counting, um, counts. It's best illustrated by example.  

[] 5. 6 and later.  

The weak reference mechanism is built into the core of Perl version 5. 8. We need an external interface for the weaken routine, though, which can be imported from the Scalar::Util module. In Perl 5. 6, we can emulate the same function using the WeakRef Perl综合典藏网 module. After installing this module (if needed), [*] we can update the 构造or as follows: 

[*] See Chapter 3 for information on installing modules.  


 ## in Animal 
 use Scalar::Util qw(weaken); # in 5. 8 and later 
 use WeakRef qw(weaken);      # in 5. 6 after Perl综合典藏网 installation 


 sub named { 
   ref(my $class = shift) and croak 'class only'; 
   my $name = shift; 
   my $self = { Name => $name, Color => $class->default_color }; 
   bless $self, $class; 
   $REGISTRY{$self} = $self; 
   weaken($REGISTRY{$self}); 
   $self; 
 } 

When Perl counts the number of active references to a thingy, [] it won't count any that have been converted to weak references by weaken. If all ordinary references are gone, Perl deletes the thingy and turns any weak references to undef.  

[] A thingy, as defined in Perl's own 文档, is anything a reference points to, such as an object. If you are an especially boring person, you could call it a referent instead.  

Now we'll get the right behavior for: 


 my @horses = map Horse->named($_), ('Trigger', 'Mr. Ed'); 
 print "alive before 块:\n", map("  $_\n", Animal->registered); 
 { 
   my @cows = map Cow->named($_), qw(Bessie Gwen); 
   my @racehorses = RaceHorse->named('Billy Boy'); 
   print "alive inside 块:\n", map("  $_\n", Animal->registered); 
 } 
 print "alive after 块:\n", map("  $_\n", Animal->registered); 
 print "End of program. \n"; 

This prints: 


 alive before 块: 
   a Horse named Trigger 
   a Horse named Mr. Ed 
 alive inside 块: 
   a RaceHorse named Billy Boy 
   a Cow named Gwen 
   a Horse named Trigger 
   a Horse named Mr. Ed 
   a Cow named Bessie 
 [Billy Boy has 消亡. ] 
 [Billy Boy has gone off to the glue factory. ] 
 [Gwen has 消亡. ] 
 [Bessie has 消亡. ] 
 alive after 块: 
   a Horse named Trigger 
   a Horse named Mr. Ed 
 End of program.  
 [Mr. Ed has 消亡. ] 
 [Mr. Ed has gone off to the glue factory. ] 
 [Trigger has 消亡. ] 
 [Trigger has gone off to the glue factory. ] 

Notice that the racehorses and cows die at the end of the 块, but the ordinary horses die at the end of the program. Success! 

Weak references can also solve some memory leak issues. For example, suppose an animal wanted to record its pedigree. The parents might want to hold references to all their children, while each child might want to hold references to each parent.  

We can weaken one or the other (or even both) of these links. If we weaken the link to the child, Perl can destroy the child when all other references are lost, and the parent's link simply becomes undef (or we can set a 自毁or to completely remove it). However, a parent won't disappear as long as it still has offspring. Similarly, if the link to the parent is weakened, we'll simply get it as undef when the parent is no longer referenced by other data structures. It's really quite flexible. [*] 

[*] When using weak references, always ensure you don't dereference a weakened reference that has turned to undef.  

Without weakening, as soon as we create any parent-child relationship, both the parent and the child remain in memory until the final global 自毁ion phase, regardless of the 自毁ion of the other structures holding either the parent or the child.  

Be aware though: use weak references carefully and don't just throw them at a problem of circular references. If you destroy data that is held by a weak reference before its time, you may have some very confusing programming problems to solve and debug.  

13. 8. Exercise 

You can find the answer to this exercise in "Answer for Chapter 13" in the Appendix.  

13. 8. 1. Exercise [45 min] 

Modify the RaceHorse class to get the previous standings from a DBM hash (keyed by the horse's name) when the horse is created, and update the standings when the horse is destroyed. For example, running this program four times: 


 my $runner = RaceHorse->named('Billy Boy'); 
 $runner->won; 
 print $runner->name, ' has standings ', $runner->standings, ". \n"; 

should show four additional wins. Make sure that a RaceHorse still does everything a normal Horse does otherwise.  

For simplicity, use four space-separated integers for the value in the DBM hash.  

