=EN 11.4. Calling a Second Method to Simplify Things
=CN 11.4. 调用第二个方法来简化操作
=EN We can call out from speak to a helper method called sound. This method provides the constant text for the sound itself:
=CN 我们可以从speak调一个方法叫sound。 这个方法提供一个常量做为声音的内容：

{ package Cow;
  sub sound { ‘moooo’ }
  sub speak {
    my $class = shift;
    print "a $class goes ", $class->sound, "!\n";
  }
}

=EN Now, when we call Cow->speak, we get a $class of Cow in speak. This, in turn, selects the Cow->sound method, which returns moooo. How different would this be for the Horse?
=CN 现在，当我们调用Cow->speak， 我们会在speak中获得一个Cow的$class。 这样，选择Cow->sound方法，返回moooo。 马会怎么样呢？

{ package Horse;
  sub sound { ‘neigh’ }
  sub speak {
    my $class = shift;
    print "a $class goes ", $class->sound, "!\n";
  }
}

=EN Only the name of the package and the specific sound change. So can we share the definition for speak between the cow and the horse? Yes, with inheritance !
=CN 只有包名和声音变了。 那么我们可以把牛和马的speak定义共享吗？ 是的， 用继承！
=EN Now let’s define a common method package called Animal with the definition for speak:
=CN 现在，让我们定义一个共享的方法的包，叫Animal，其speak定义如下：

{ package Animal;
  sub speak {
    my $class = shift;
    print "a $class goes ", $class->sound, "!\n";
  }
}

=EN Then, for each animal, we can say it inherits from Animal, along with the animal-specific sound:
=CN 这样，对于每个动物， 我们说它继承自Animal， 并有此动物专有的叫声：

{ package Cow;
  @ISA = qw(Animal);
  sub sound { "moooo" }
}

=EN Note the added @ISA array. We’ll get to that in a minute.
=CN 注意我们加了@ISA数组。 我们后面会介绍的。
=EN What happens when we invoke Cow->speak now?
=CN 现在我们调用Cow->speak会发生什么？
=EN First, Perl constructs the argument list. In this case, it’s just Cow. Then Perl looks for Cow::speak. That’s not there, so Perl checks for the inheritance array @Cow::ISA. It’s there and contains the single name Animal.
=CN 首先， Perl创建参数列表。 在这个例子中， 就是Cow。 然后Perl找Cow::speak。 当前包没有， 所以Perl就在其祖先数组里找@Cow::ISA。 这里面有Animal包。
=EN Perl next checks for speak inside Animal instead, as in Animal::speak. That found, Perl invokes that method with the already frozen argument list, as if we had said:
=CN 然后Perl就用Animal里的speak来代替了， 就是Animal::speak。 找到后， Perl用已经不变的参数列表来调用，就像我们这样写的一样：

Animal::speak(‘Cow’);

=EN Inside the Animal::speak method, $class becomes Cow as the first argument is shifted off. When we get to the step of invoking $class->sound while performing the print, it looks for Cow->sound:
=CN 在Animal::speak方法里， $class变成Cow，作为第一个参数传入。 当我们打印时就调用$class->sound， 它会找到Cow->sound:

# but $class is Cow, so…
print ‘a Cow goes ‘, Cow->sound, "!\n";
# which invokes Cow->sound, returning ‘moooo’, so
print ‘a Cow goes ‘, ‘moooo’, "!\n";

=EN and we get our desired output.
=CN 这样就得到我们需要的输出结果。
