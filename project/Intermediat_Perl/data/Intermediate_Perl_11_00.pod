=EN Chapter 11. Introduction to Objects
=CN 第11章 介绍对象
=EN Object-oriented programming (OOP) helps programmers run code sooner and maintain it easier by organizing the code into things that we can name. We need a little more infrastructure to get going with objects, but in the long run, it’s worth it.
=CN 面向对象编程（ＯＯＰ）帮助程序员把代码到他们可以命名的对象里的办法使代码运行起来更快和维护起来更方便。 我们需要一点功夫来找出对象， 但对于长远来说是值得的。
=EN The benefits of OOP become worthwhile when our program (including all external libraries and modules) exceeds about N lines of code. Unfortunately, nobody can agree on what the value of N is, but for Perl programs, it’s arguably around 1,000 lines of code. If our whole program is only a couple hundred lines of code, using objects is probably overkill.
=CN 当程序超过Ｎ行的时候，面向对象的好处就显露出来了。 不过， 对于这个Ｎ到底是多少，各有各的持法，但对于Perl程序来说， 1000行左右代码是比较能被接受的。 如果我们的程序就区区几百行， 用面向对象编程可能就太过了。
=EN Like references, Perl’s object architecture was grafted on after a substantial amount of existing pre-Perl 5 code was already in use, so we had to ensure that it wouldn’t break existing syntax. Amazingly, the only additional syntax to achieve object nirvana is the method call, introduced shortly. But the meaning of that syntax requires a bit of study, so let’s proceed.
=CN 如同引用， Perl的对象架构也是从一些现存的前Perl 5已经用的代码移植过来的。 所以我们必须保证不对现有的语法有影响。 令人惊奇的是，实现向面向对象重生的只用了一个附加的语法，就是简单引入了方法调用。但其语不意义需要我们一些研究，所以让我们开始吧。
=EN The Perl object architecture relies heavily on packages, subroutines, and references, so if you’re skipping around in this book, please go back to the beginning. Ready? Here we go.
=CN Perl的对象结构严重依赖于包，子例程和引用， 所以如果你已经跳过书中的这些章节，请回到开始的部份好好看完。 准备好了吗？我们开始。
