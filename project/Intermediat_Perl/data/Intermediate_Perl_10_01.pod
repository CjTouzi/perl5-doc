=EN 10.1. The Cure for the Common Code
=CN 10.1. 修改通用代码
=EN The Skipper writes many Perl programs to provide navigation for all the common ports of call for the Minnow. He finds himself cutting and pasting a very common routine into each program:
=CN Skipper写了许多Perl程序应Minnow的要求为一般的港口提供导航服务。 他发现自己不停的在各个程序之间复制和粘贴一个通用子例程：

sub turn_toward_heading {
  my $new_heading = shift;
  my $current_heading = current_heading(  );
  print "Current heading is ", $current_heading, ".\n";
  print "Come about to $new_heading ";
  my $direction = ‘right’;
  my $turn = ($new_heading – $current_heading) % 360;
  if ($turn > 180) { # long way around
    $turn = 360 – $turn;
    $direction = ‘left’;
  }
  print "by turning $direction $turn degrees.\n";
}

=EN This routine gives the shortest turn to make from the current heading (returned by the subroutine current_heading( )) to a new heading (given as the first parameter to the subroutine).
=CN 这个通用子例程提供从当前航向的最短的转向（从子程序current_heading()返回）到一个新的航向（由第一个参数输入）。
=EN The first line of this subroutine might have read instead:
=CN 子程序的第一行可以用如下行代替：

my ($new_heading) = @_;

=EN This is mostly a style call: in both cases, the first parameter ends up in $new_heading. However, we’ve seen that removing the items from @_ as they are identified does have some advantages. So, we stick (mostly) with the "shifting" style of argument parsing. Now back to the matter at hand . . . .
=CN 这是另一特色的调用：两种情况，第一个参数都结束于$new_heading。 然而， 正像他们指出的，从@_提取元素比较方便。所以，我们大多数情况下用"shift"风格的参数解析。（？）现在回到我们手头的程序… … 
=EN After writing a dozen programs using this routine, the Skipper realizes that the output is excessively chatty when he’s already taken the time to steer the proper course (or perhaps simply started drifting in the proper direction). After all, if the current heading is 234 degrees and he needs to turn to 234 degrees, we see:
=CN 用这个例程写了一打程序之后， Skipper发现这样用下来, 当他花时间调到正确的航向时，已经有非常多的输出（或者作简单的在正确的航向漂流）。毕竟， 如果当前航向是234度，而他要转234度，我们会看到：
=EN Current heading is 234.
=CN 当前航向是：234。
=EN Come about to 234 by turning right 0 degrees.
=CN 向右转0度，转向234。
=EN How annoying! The Skipper decides to fix this problem by checking for a zero turn value:
=CN 真烦人！Skipper决定修正这个0航向的问题：

sub turn_toward_heading {
  my $new_heading = shift;
  my $current_heading = current_heading(  );
  print "Current heading is ", $current_heading, ".\n";
  my $direction = ‘right’;
  my $turn = ($new_heading – $current_heading) % 360;
  unless ($turn) {
    print "On course (good job!).\n";
    return;
  }
  print "Come about to $new_heading ";
  if ($turn > 180) { # long way around
    $turn = 360 – $turn;
    $direction = ‘left’;
  }
  print "by turning $direction $turn degrees.\n";
}

=EN Great. The new subroutine works nicely in the current navigation program. However, because he had previously cut and pasted it into a half-dozen other navigation programs, those other programs will still annoy the Skipper with extraneous turning messages.
=CN 不错。 新的子程序工作得很好。 然而， 因为前期他已经用拷贝粘贴的办法把这个程序贴在导航程序里很多地方，其它程序仍旧出现令Skipper不胜其烦的超量输出信息。
=EN The Skipper needs a way to write the code in one place and then share it among many programs. And, like most things in Perl, there’s more than one way to do it.
=CN Skipper需要一种方法，只写一篇程序，然后把它共享给其它程序。而且，正像Perl的大多数事物一样，条条大路通罗马。

This entry was posted in Intermediate Perl. Bookmark the permalink. 

