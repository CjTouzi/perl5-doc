=EN 7.7. Closure Variables as Static Local Variables
=CN 7.7. 闭包变量用作静态局部变量
=EN A subroutine doesn’t have to be an anonymous subroutine to be a closure. If a named subroutine accesses lexical variables, and those variables go out of scope, the named subroutine retains a reference to the lexicals, just as you saw with anonymous subroutines. For example, consider two routines that count coconuts for Gilligan:
=CN 要做成一个闭包，并不一定非要搞成匿名子程序。 如果一个命名子程序访问那些跑出范围的词法变量，其作用就如同你用匿名子程序一样。 比如， 考虑一下两个为Gilligan计算椰子的子程序

{
  my $count;
  sub count_one { ++$count }
  sub count_so_far { return $count }
}

=EN If we place this code at the beginning of the program, we declare the variable $count inside the naked block scope, and the two subroutines that reference the variable become closures. However, because they have a name, they will persist beyond the end of the scope (as do all named subroutines). Since the subroutines persist beyond the scope and access variables declared within that scope, they become closures and thus can continue to access $count throughout the lifetime of the program.
=CN 如果我们把这短代码放到程序开始， 我们在一个裸块里声明了了变量$count， 然后两个子程序引用这个变量，于是就成了闭包。 然而，因为它们都有名字， 并且会保留名字直到块结束（就像所有的命名子程序一样。） 因为子程序访问声明在范围外的变量，它们成为闭包并且因此可以在程序的生命周期内继续访问$count。
=EN So, with a few calls, we can see an incremented count:
=CN 所以，经过几次调用，我们可以看到计数增长：

count_one(  );
count_one(  );
count_one(  );
print ‘we have seen ‘, count_so_far(  ), " coconuts!\n";

=EN $count retains its value between calls to count_one( ) or count_so_far( ), but no other section of code can access this $count at all.
=CN 在几次调用count_one()或count_so_far()， $count会保留其原来的值， 但程序里其它部份的代码是不能访问$count的。
=EN In C, this is known as a static local variable: a variable that is visible to only a subset of the program’s subroutines but persists throughout the life of the program, even between calls to those subroutines.
=CN 在C语言里， 这被称作静态本地变量： 一个变量仅仅在程序子程序的一小块代码中可见，但会在程序的生命周期内保留其值， 甚至在那些子程序的数次调用中也保留值。
=EN What if we wanted to count down? Something like this will do:
=CN 那递减会如何呢？大概应该如此：

{
  my $countdown = 10;
  sub count_down { $countdown– }
  sub count_remaining { $countdown }
}
count_down(  );
count_down(  );
count_down(  );
print ‘we’re down to ‘, count_remaining(  ), " coconuts!\n";

=EN That is, it’ll do as long as we put it near the beginning of the program, before any invocations of count_down( ) or count_remaining( ). Why?
=CN 就是说， 只要我们把块放在程序开始，放在任何 count_donw()或count_remaining()之前就可以。为什么呢？
=EN This block doesn’t work when you put it after those invocations because there are two functional parts to the first line:
=CN 如果把裸块放在那些调用之后的话就不会工作，因为有两个功能部分牵涉到下面这行：

my $countdown = 10;

=EN One part is the declaration of $countdown as a lexical variable. That part is noticed and processed as the program is parsed during the compile phase. The second part is the assignment of 10 to the allocated storage. This is handled as Perl executes the code during the run phase. Unless Perl executes the run phase for this code, the variable has its initial undef value.
=CN 一个功能部份是$countdown的声明是作为一个词法变量。 这部份是在程序被编译阶段被解释并处理的。第二个功能部分是把10赋值给一块分配的内存。 这部份是Perl执行代码时处理的。 除非Perl在运行阶段执行这些代码， 否则变量的初始是未定义值。
=EN One practical solution to this problem is to change the block in which the static local appears into a BEGIN block:
=CN 一种解决方法是把代码放进BEGIN块：

BEGIN {
  my $countdown = 10;
  sub count_down { $countdown– }
  sub count_remaining { $countdown }
}

=EN The BEGIN keyword tells the Perl compiler that as soon as this block has been parsed successfully (during the compile phase), jump for a moment to run phase and run the block as well. Presuming the block doesn’t cause a fatal error, compilation then continues with the text following the block. The block itself is also discarded, ensuring that the code within is executed precisely once in a program, even if it had appeared syntactically within a loop or subroutine.
=CN BEGIN块会告诉Perl编译器只要这个块被成功解释了（在编译阶段），就马上去运行这个块。 假定这个块不会导致致命错误， 编译器就继续下面的块。 块自身也会被丢弃，保证其中的代码在程序中被精确地只执行一次，甚至代码在语法上在一个循环或子程序中。
