=EN 6.3. YAML
=CN 6.3. YAML
=EN Data::Dumper is not the only game on the island, though. Brian Ingerson came up with Yet Another Markup Language (YAML) to provide a more readable (and more compact) dump. It works in the same way as Data::Dumper. We’ll see more about YAML when we talk about modules later, so we won’t say much about it here.
=CN Data::Dumper并非在Perl中输出数据的惟一玩法。 Brian Ingerson提供了Yet Another Markup Language(YAML) 来提供一种更具可读性的（也更节省空间）的输出办法。 同Data::Dumper的作法一样，我们会在以后大谈特谈ＹＡＭＬ，所以这里就不费话了。
=EN From the earlier example, we plug in YAML where we had Data::Dumper, and use Dump( ) where we had Dumper()
=CN 同早先的例子一样，我们在程序中写Data::Dumper的地方替换成ＹＡＭＬ，在用Dumper()函数的地方，我们用Dump()函数代替。

use YAML;
my %total_bytes;
while (<>) {
        my ($source, $destination, $bytes) = split;
        $total_bytes{$source}{$destination} += $bytes;
        }
print Dump(\%total_bytes);

=EN When you use the same data from the earlier example, you get this output:
=CN 用前面提供的例子，我们得到这样的输出：

— #YAML:1.0
ginger.girl.hut:
  maryann.girl.hut: 199
  professor.hut: 1218
professor.hut:
  gilligan.crew.hut: 1250
  lovey.howell.hut: 1360
thurston.howell.hut:
  lovey.howell.hut: 1250

=EN That’s a lot easier to read because it takes up less space on the screen, which can be really handy when you have deeply nested data structures.
=CN 这比先前读起来更容易，因为占用的屏幕比较少，如果你的数据结构嵌套比较深的话，就很好用。
