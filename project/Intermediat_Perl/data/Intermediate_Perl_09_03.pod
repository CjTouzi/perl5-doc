=EN 9.3. Sorting Efficiently
=CN 9.3. 更有效率的排序
=EN As the Professor tries to maintain the community computing facility (built entirely out of bamboo, coconuts, and pineapples, and powered by a certified Perl-hacking monkey), he continues to discover that people are leaving entirely too much data on the single monkey-powered filesystem and decides to print a list of offenders.
=CN 因为教授要维护社区的计算设备（全都由竹子，椰子，菠萝，并由一个经过Perl黑客级别认证的猴子来提供支援）， 然后他发现有些人把太多数据给猴子来处理， 所以决定打印出一份罪犯名单。
=EN The Professor has written a subroutine called ask_monkey_about( ), which, given a castaway’s name, returns the number of pineapples of storage they use. We have to ask the monkey because he’s in charge of the pineapples. An initial naive approach to find the offenders from greatest to least might be something like:
=CN 教授写了一个子程序ask_monkey_about(),  这个程序接受一个castaway成员的名字，然后返回他们用了菠萝总储量中的多少。 我们问猴子是因为他管这事儿。 最初的找出罪犯的程序可以如下的样子：

my @castaways =
  qw(Gilligan Skipper Professor Ginger Mary_Ann Thurston Lovey);
my @wasters = sort {
  ask_monkey_about($b) <=> ask_monkey_about($a)
} @castaways;

=EN In theory, this would be fine. For the first pair of names (Gilligan and Skipper), we ask the monkey "How many pineapples does Gilligan have?" and "How many pineapples does Skipper have?" We get back two values from the monkey and use them to order Gilligan and Skipper in the final list.
=CN 按理，这个程序不错。 对于第一对名字（Gilligan和Skipper),  我们问下猴子：“Gilligan有多少菠萝？” 和“Skipper手里有多少菠萝？” 我们从猴子那里得到这个值后，并以此来将Gilligan和Skipper在最终的列表中排座次。
=EN However, at some point, we have to compare the number of pineapples that Gilligan has with another castaway as well. For example, suppose the pair is Ginger and Gilligan. We ask the monkey about Ginger, get a number back, and then ask the monkey about Gilligan…again. This will probably annoy the monkey a bit, since we already asked earlier. But we need to ask for each value two, three, or maybe even four times, just to put the seven values into order.
=CN 然而， 我们还得把Gilligan手中的持有的菠萝数量与其它castaway成员手中持有的菠萝数目相比较。 比如， 假定我们对比的是Ginger和Gilligan。 我们询问猴子Ginger的情况， 取得菠萝的数目后， 再去问Gilligan的情况， 以此类推。 这可能会让猴烦不胜烦， 因为我们早前已经问过它了。 但我们必须再二再三，再三再四地为每个值去问，直到把七个值排顺。
=EN This can be a problem because it irritates the monkey.
=CN 这可能会成为一个问题，这太刺激猴子了。
=EN How do we keep the number of monkey requests to a minimum? Well, we can build a table first. We use a map with seven inputs and seven outputs, turning each castaway item into a separate array reference, with each referenced array consisting of the castaway name and the pineapple count reported by the monkey:
=CN 那我们怎么能将询问猴子的次数降为最低呢？ 这样， 我们先建一张表。 我们用一个map和七个输入输出项， 将每个castaway元素做成一个数组引用，每个数组引用包含两个元素，一个是成员名字，一个猴子报告的其所持菠萝的数目：

my @names_and_pineapples = map {
  [ $_, ask_monkey_about($_) ]
} @castaways;
 
=EN At this point, we asked the monkey seven questions in a row, but that’s the last time we have to talk to the monkey! We now have everything we need to finish the task.
=CN 这次， 我们在一次把把七个问题向猴子问完了， 但这也是最后一次！ 我们现在已经有了要完成任务所有的东西了。
=EN For the next step, we sort the arrayrefs, ordering them by the monkey-returned value:
=CN 为了下一步， 我们把数组引用排序，以猴子报告的数值为序：

my @sorted_names_and_pineapples = sort {
  $b->[1] <=> $a->[1];
} @names_and_pineapples;

=EN In this subroutine, $a and $b are still two elements from the list of things to be sorted. When we’re sorting numbers, $a and $b are numbers; when we’re sorting references, $a and $b are references. We dereference them to get to the corresponding array itself, and pick out item 1 from the array (the monkey’s pineapple value). Because $b appears to the left of $a, it’ll be a descending sort as well. (We want a descending sort because the Professor wants the first name on the list to be the person who uses the most pineapples.)
=CN 在这个子程序中， $a和$b列表中要排序的两个元素。 当我们对数字进行排序的时候， $a和$b是数字。 当我们对引用进行排序时， $a和$b就是引用。 我们将他们还原成相应的数组 ，并且将他们的第二个元素取出来（猴子报告的菠萝数目）。因为$b排在$a之前， 所以，它是一个由大到小的降序排列。（我们需要降底是因为教授要有菠萝持有最多的那个人）
=EN We’re almost done, but what if we just wanted the top names, rather than the names and pineapple counts? We merely need to perform another map to transform the references back to the original data:
=CN 我们差不多要完成了， 但如果我们仅仅要名字，而不要名字和菠萝数呢？ 我们只要做一下另一个map，把引用变换成原来的数据就可以了：

my @names = map $_->[0], @sorted_names_and_pineapples;

=EN Each element of the list ends up in $_, so we’ll dereference that to pick out the element 0 of that array, which is just the name.
=CN 列表中每个元素都是$_, 所以，我们还原它，并取出第一个元素，就是名字。
=EN Now we have a list of names, ordered by their pineapple counts, and the monkey’s off our backs, all in three easy steps.
=CN 这样我们就有一个名字的列表，并以他们所持菠萝的数目由大到小排列，仅仅用三步，也可以把猴子轻松放下。
