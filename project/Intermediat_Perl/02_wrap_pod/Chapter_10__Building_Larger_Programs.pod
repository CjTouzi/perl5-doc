=head2 Chapter 10. Building Larger Programs 

This chapter looks at how to break up a program into pieces and includes some of the concerns that arise when we put those pieces back together again, or when many people work together on the same program.  

=head2 10. 1. The Cure for the Common Code 

The Skipper writes many Perl programs to provide navigation for all the common ports of call for the Minnow. He finds himself cutting and pasting a very common routine into each program: 


 sub turn_toward_heading { 
   my $new_heading = shift; 
   my $current_heading = current_heading(  ); 
   print "Current heading is ", $current_heading, ". \n"; 
   print "Come about to $new_heading "; 
   my $direction = 'right'; 
   my $turn = ($new_heading - $current_heading) % 360; 
   if ($turn > 180) { # long way around 
     $turn = 360 - $turn; 
     $direction = 'left'; 
   } 
   print "by turning $direction $turn degrees. \n"; 
 } 

This routine gives the shortest turn to make from the current heading (returned by the subroutine current_heading( )) to a new heading (given as the first parameter to the subroutine).  

The first line of this subroutine might have read instead: 


 my ($new_heading) = @_; 

This is mostly a style call: in both cases, the first parameter ends up in $new_heading. However, we've seen that removing the items from @_ as they are identified does have some advantages. So, we stick (mostly) with the "shifting" style of argument parsing. Now back to the matter at hand. . . .  

After writing a dozen programs using this routine, the Skipper realizes that the output is excessively chatty when he's already taken the time to steer the proper course (or perhaps simply started drifting in the proper direction). After all, if the current heading is 234 degrees and he needs to turn to 234 degrees, we see: 


 Current heading is 234.  
 Come about to 234 by turning right 0 degrees.  

How annoying! The Skipper decides to fix this problem by checking for a zero turn value: 


 sub turn_toward_heading { 
   my $new_heading = shift; 
   my $current_heading = current_heading(  ); 
   print "Current heading is ", $current_heading, ". \n"; 
   my $direction = 'right'; 
   my $turn = ($new_heading - $current_heading) % 360; 
   unless ($turn) { 
     print "On course (good job!). \n"; 
     return; 
   } 
   print "Come about to $new_heading "; 
   if ($turn > 180) { # long way around 
     $turn = 360 - $turn; 
     $direction = 'left'; 
   } 
   print "by turning $direction $turn degrees. \n"; 
 } 

Great. The new subroutine works nicely in the current navigation program. However, because he had previously cut and pasted it into a half-dozen other navigation programs, those other programs will still annoy the Skipper with extraneous turning messages.  

The Skipper needs a way to write the code in one place and then share it among many programs. And, like most things in Perl, there's more than one way to do it.  

=head2 10. 2. Inserting Code with eval 

The Skipper can save disk space (and brain space) by bringing the definition for turn_toward_heading out into a separate file. For example, suppose the Skipper figures out a half-dozen common subroutines related to navigating the Minnow that he seems to use in most or all of the programs he's writing for the task. He can put them in a separate file called navigation. pm, which consists only of the needed subroutines.  

But now, how can we tell Perl to pull in that program snippet from another file? We could do it the hard way, using the string form of eval that we discussed in Chapter 2.  


 sub load_common_subroutines { 
   open MORE_CODE, 'navigation. pm' or die "navigation. pm: $!"; 
   undef $/; # enable slurp mode 
   my $more_code = <MORE_CODE>; 
   close MORE_CODE; 
   eval $more_code; 
   die $@ if $@; 
 } 

Perl reads the code from navigation. pm into the $more_code variable. We then use eval to process that text as Perl code. Any lexical variables in $more_code remain local to the evaluated code. [*] If there's a syntax error, Perl sets the $@ variable and causes the subroutine to die with the appropriate error message.  

[*] Oddly, the variable $more_code is also visible to the evaluated code, not that it is of any use to change that variable during the eval.  

Now, instead of a few dozen lines of common subroutines to place in each file, we simply have one subroutine to insert in each file.  

But that's not very nice, especially if we need to keep doing this kind of task repeatedly. Luckily, Perl has several ways to help us out.  

=head2 10. 3. Using do 

The Skipper placed a few common navigation subroutines into navigation. pm. If the Skipper merely inserts: 


 do 'navigation. pm'; 
 die $@ if $@; 

into his typical navigation program, it's almost the same as if the eval code were executed right at that point in the program. [] 

[] Except in regard to @INC, %INC, and missing file handling, which we'll show later.  

That is, the do operator acts as if the code from navigation. pm were incorporated into the current program, although in its own scope block, so that lexicals (my variables) and most directives (such as use strict) from the included file don't leak into the main program.  

Now the Skipper can safely update and maintain one copy of the common subroutines without having to copy and recopy all the fixes and extensions into the many separate navigation programs he creates and uses. Figure 10-1 illustrates how the Skipper can use his common library.  

Figure 10-1. The Skipper uses the navigation. pm file in all his other navigation programs 

Of course, this requires a bit of discipline, because breaking the expected interface of a given subroutine now breaks many programs instead of just one. [] The Skipper needs to give special thought to his design for reusable components and modularity design. We'll presume the Skipper has had some experience at that, but we'll show some more on that in later chapters.  

[] In later chapters, we'll show how to set up tests to be used while maintaining reused code.  

By placing some of the code into a separate file, other programmers can reuse the Skipper's routines, and vice versa. If Gilligan writes a routine to drop_anchor( ) and places it in the file drop_anchor. pm, then the Skipper can use Gilligan's code by including his library: 


 do 'drop_anchor. pm'; 
 die $@ if $@; . . .  
 drop_anchor(  ) if at_dock(  ) or in_port(  ); 

Thus, the code that we bring in from separate files permits easy maintenance and interprogrammer cooperation.  

While the code we brought in from a. pm file can have direct executable statements, it's much more common to simply define subroutines that we can load using do.  

Going back to that drop_anchor. pm library for a second, what if the Skipper wrote a program that needed to "drop anchor" as well as navigate? 


 do 'drop_anchor. pm'; 
 die $@ if $@; 
 do 'navigation. pm'; 
 die $@ if $@; . . .  
 turn_toward_heading(90); . . .  
 drop_anchor(  ) if at_dock(  ); 

That works fine and dandy. The subroutines defined in both libraries are available to this program.  

=head2 10. 4. Using require 

Suppose navigation. pm itself also pulls in drop_anchor. pm for some common navigation task. Perl reads the file once directly and then again while processing the navigation package. This needlessly redefines drop_anchor( ). Worse than that, if we have warnings enabled, [*] we'll get a warning from Perl that we've redefined the subroutine, even if it's the same definition.  

[*] You are using warnings, right? You can enable them with either -w or use warnings;.  

We need a mechanism that tracks which files we've brought in and then brings them in only once. Perl has such an operation, called require. Change the previous code to simply: 


 require 'drop_anchor. pm'; 
 require 'navigation. pm'; 

The require operator keeps track of the files Perl has read. [] Once Perl has processed a file successfully, it simply ignores any further require operations on that same file. This means that even if navigation. pm contains require "drop_anchor. pm", Perl imports the drop_anchor. pm file exactly once, and we'll get no annoying error messages about duplicate subroutine definitions (see Figure 10-2). Most importantly, we'll also save time by not processing the file more than once.  

[] In the %INC hash, as described in the entry for require in the perlfunc documentation.  

Figure 10-2. Once Perl brings in the drop_anchor. pm file, it ignores another attempt to require it 

The require operator also has two additional features: 

Any syntax error in the required file causes the program to die; thus, the many die $@ if $@ statements are unnecessary.  

The last expression evaluated in the file must return a true value.  

Because of the second point, most files evaluated for require have a cryptic 1; as their last line of code. This ensures that the last evaluated expression is, in fact, true. Try to carry on this tradition as well.  

Originally, the mandatory true value was intended as a way for an included file to signal to the invoker that the code was processed successfully and that no error condition existed. However, nearly everyone has adopted the die if. . . strategy instead, deeming the "last expression evaluated is false" strategy a mere historic annoyance.  

=head2 10. 5. require and @INC 

So far, the examples have glossed over how we've set up the directory structure of where the main code and the included files are located. That's because it "just works" for the simplest case where we have a program and its libraries in the same directory and we run the program from that directory.  

Things get a bit more complicated when the libraries aren't in the current directory. In fact, Perl searches for libraries along a library search path, similar to what the shell does with the PATH environment variable. The current directory (represented in Unix by a single dot) is an element of the search path. So, as long as our libraries are in our current working directory, everything is fine.  

The search path is a list of elements in the special @INC array, as we briefly discussed in Chapter 3. By default, the array contains the current directory and a half-dozen or so directories specified by the person who compiled Perl. Typing perl -V on the command line shows what these directories are, in the last dozen lines of the output. Also, the following command displays just the @INC directories:[*] 

[*] On a Windows machine, use double quotes instead of single quotes on the command line.  


 perl -le 'print for @INC' 

Except for. in that list, we probably won't be able to write to any of the other directories unless we're the person responsible for maintaining Perl on our machine, in which case, we should be able to write to all of them. The remaining directories are where Perl searches for system-wide libraries and modules, as we'll see later.  

=head2 10. 5. 1. Extending @INC 

We may run into some cases where we can't install modules in the pre-configured directories in @INC. We can change @INC itself before the require, so Perl searches our directories too. The @INC array is an ordinary array, so have the Skipper add a directory below his home directory to the mix: 


 unshift @INC, '/home/skipper/perl-lib'; 

Now, in addition to searching the standard directories and the current directory, Perl searches the Skipper's personal Perl library. In fact, Perl searches in that directory first, since it is the first one in @INC. By using unshift rather than push, Perl resolves any conflict in names between the Skipper's private files and the system-installed files, with the Skipper's file-taking precedence.  

Normally we want to ensure that this happens before anything else, so we can wrap it in a BEGIN block. Perl executes the code in the BEGIN block during the compile phase before the require executes at runtime. Otherwise, Perl executes statements in the order that it finds them, and we have to ensure that our unshift shows up before our require.  


 BEGIN { 
   unshift @INC, '/home/skipper/perl-lib'; 
 }; 

This is such a common operation, though, that Perl has a pragma for it. The pragma makes everything happen before runtime, so we'll get what we expect. It puts the directories we specify at the beginning of @INC, just like we did before.  

use lib qw(/home/skipper/perl-lib); 

We don't always have to know the path ahead of time, either. In the previous examples, we've hardcoded the paths. If we don't know what those will be because we're passing code around to several machines, the FindBin module, which comes with Perl, can help. It finds the full path to the script directory so we can use it to build paths.  


 use FindBin qw($Bin); 

Now, in $Bin is the path to the directory that holds our script. If we have our libraries in the same directory, our next line can be: 


 use lib $Bin; 

If we have the libraries in a directory close to the script directory, we put the right path components together to make it work.  


 use lib "$Bin/lib";    # in a subdirectory 


 use lib "$Bin/. . /lib"; # up one, then down into lib 

So, if we know the relative path from the script directory, we don't have to hardcode the whole path. This makes the script more portable.  

=head2 10. 5. 2. Extending @INC with PERL5LIB 

The Skipper must edit each program that uses his private libraries to include those lines from the previous section. If that seems like too much editing, he can instead set the PERL5LIB environment variable to the directory name. For example, in the C shell, he'd use the line: 


 setenv PERL5LIB /home/skipper/perl-lib 

In Bourne-style shells, he'd use something like: 


 PERL5LIB=/home/skipper/perl-lib; export PERL5LIB 

The Skipper can set PERL5LIB once and forget about it. However, unless Gilligan has the same PERL5LIB environment variable, his program will fail! While PERL5LIB is useful for personal use, we can't rely on it for programs we intend to share with others. (And we can't make our entire team of programmers add a common PERL5LIB variable. Believe us, we've tried. ) 

The PERL5LIB variable can include multiple directories separated by colons. Perl inserts all specified directories at the beginning of @INC.  

While a system administrator might add a setting of PERL5LIB to a system-wide startup script, most people frown on that. The purpose of PERL5LIB is to enable non-administrators to extend Perl to recognize additional directories. If a system administrator wants additional directories, he merely needs to recompile and reinstall Perl.  

=head2 10. 5. 3. Extending @INC with -I 

If Gilligan recognizes that one of the Skipper's programs is missing the proper directive, Gilligan can either add the proper PERL5LIB variable or invoke Perl directly with one or more -I options. For example, to invoke the Skipper's get_us_home program, the command line might be something like: 


 perl -I/home/skipper/perl-lib /home/skipper/bin/get_us_home 

Obviously, it's easier for Gilligan if the program itself defines the extra libraries. But sometimes just adding a -I fixes things right up. [*] This works even if Gilligan can't edit the Skipper's program. He still has to be able to read it, of course, but Gilligan can use this technique to try a new version of his library with the Skipper's program, for example.  

[*] Extending @INC with either PERL5LIB orI also automatically adds the versionand architecture-specific subdirectories of the specified directories. Adding these directories automatically simplifies the task of installing Perl modules that include architecture- or version-sensitive components, such as compiled C code.  

=head2 10. 6. The Problem of Namespace Collisions 

Sometimes the Skipper runs a ship into an island, but sometimes the collision involved is just a couple of names in a Perl program. Suppose that the Skipper has added all his cool and useful routines to navigation. pm and that Gilligan has incorporated the library into his own navigation package, head_toward_island: 


 #!/usr/bin/perl 


 require 'navigation. pm'; 


 sub turn_toward_port { 
   turn_toward_heading(compute_heading_to_island(  )); 
 } 


 sub compute_heading_to_island { 
   #. . code here. .  
 } 


 #. . more program here. .  

Gilligan then has his program debugged (perhaps with the aid of a smart person whom we'll call "the Professor"), and everything works well.  

However, now the Skipper decides to modify his navigation. pm library, adding a routine called turn_toward_port that makes a 45-degree turn toward the left (known as "port" in nautical jargon).  

Gilligan's program will fail in a catastrophic way as soon as he tries to head to port: he'll start steering the ship in circles! The problem is that the Perl compiler first compiles turn_toward_port from Gilligan's main program, then when Perl evaluates the require at runtime, it redefines turn_toward_port as the Skipper's definition. Sure, if Gilligan has warnings enabled, he'll notice something is wrong, but why should he have to count on that? 

The problem is that Gilligan defined turn_toward_port as meaning "turn toward the port on the island, " while the Skipper defined it as "turn toward the left. " How do we resolve this? 

One way is to require that the Skipper put an explicit prefix in front of every name defined in the library, say, navigation_. Thus, Gilligan's program ends up looking like: 


 #!/usr/bin/perl 


 require 'navigation. pm'; 


 sub turn_toward_port { 
   navigation_turn_toward_heading(compute_heading_to_island(  )); 
 } 


 sub compute_heading_to_island { 
   #. . code here. .  
 } 


 #. . more program here. .  

Clearly, the navigation_turn_toward_heading comes from the navigation. pm file. This is great for Gilligan but awkward for the Skipper, as his file now has longer subroutine names: 


 sub navigation_turn_toward_heading { 
    #. . code here. .  
 } 

=head2 10. 7. Packages as Namespace Separators 

If the name prefix of the last example didn't have to be spelled out on every use, things would work much better. We can improve the situation by using a package: 


 package Navigation; 


 sub turn_toward_heading { 
   #. . code here. .  
 } 


 sub turn_toward_port { 
   #. . code here. .  
 } 


 1; 

The package declaration at the beginning of this file tells Perl to virtually insert Navigation:: in front of most names within the file. Thus, the code above practically says: 


 sub Navigation::turn_toward_heading { 
    # code here. .  
 } 


 sub Navigation::turn_toward_port { 
    # code here. .  
 } 


 1; 

Now when Gilligan uses this file, he simply adds Navigation:: to the subroutines defined in the library and leaves the Navigation:: prefix off for subroutines he defines on his own: 


 #!/usr/bin/perl 


 require 'navigation. pm'; 


 sub turn_toward_port { 
   Navigation::turn_toward_heading(compute_heading_to_island(  )); 
 } 


 sub compute_heading_to_island { 
    #. . code here. .  
 } 


 #. . more program here. .  

Package names are like variable names: they consist of alphanumerics and underscores but can't begin with a digit. Also, for reasons explained in the perlmodlib documentation, a package name should begin with a capital letter and not overlap an existing CPAN or core module name. Package names can also have multiple names separated by double colons, such as Minnow::Navigation and Minnow::Food::Storage.  

Nearly every scalar, array, hash, subroutine, and filehandle name[*] is actually prefixed by the current package, unless the name already contains one or more double-colon markers.  

[*] Except lexicals, as we'll show in a moment.  

So, in navigation. pm, we can use variables such as:[] 

[] Trivia note: 21. 283 degrees north, 157. 842 degrees west is the location of the real-life marina where the opening shot of a famous television series was filmed. Check it out on Google Maps if you don't believe us.  


 package Navigation; 
 @homeport = (21. 283, -157. 842); 


 sub turn_toward_port { 
    #. . code. .  
 } 

We can refer to the @homeport variable in the main code with its full package specification: 


 @destination = @Navigation::homeport; 

If every name has a package name inserted in front of it, what about names in the main program? Yes, they are also in a package, called main. It's as if package main; were at the beginning of each file. Thus, to keep Gilligan from having to say Navigation::turn_toward_heading, the navigation. pm file can say: 


 sub main::turn_toward_heading { 
    #. . code here. .  
 } 

Now the subroutine is defined in the main package, not the Navigation package. This isn't an optimal solution (we'll show better solutions in Chapter 15 when we talk about Exporter), but at least there's nothing sacred or terribly unique about main compared to any other package.  

This is what the modules in Chapter 3 were doing when they imported symbols into our scripts, but we didn't tell you the whole story then. Those modules imported the subroutines and variables into the current package (again, that's main in our scripts, usually). That is, those symbols are only available in that package unless we use the full package specification. We'll get more into how this works later.  

=head2 10. 8. Scope of a Package Directive 

All files start as if we had said package main;. [*] Any package directive remains in effect until the next package directive, unless that package directive is inside a curly-braced scope. In that case, Perl remembers the prior package and restores it when that scope ends. Here's an example: 

[*] Perl doesn't make us create an explicit main( ) loop like C. Perl knows that every script needs one, so it gives it to us for free.  


 package Navigation; 


 {  # start scope block 
   package main;  # now in package main 


   sub turn_toward_heading {  # main::turn_toward_heading 
      #. . code here. .  
   } 


 }  # end scope block 


 # back to package Navigation 


 sub turn_toward_port { # Navigation::turn_toward_port 
    #. . code here. .  
 } 

The current package is lexically scoped, similar to the scope of my variables, narrowed to the innermost-enclosing brace pair or file in which we introduced the package.  

Most libraries have only one package declaration at the top of the file. Most programs leave the package as the default main package. However it's nice to know that we can temporarily have a different current package. [] 

[] Some names are always in package main regardless of the current package: ARGV, ARGVOUT, ENV, INC, SIG, STDERR, STDIN, and STDOUT. We can always refer to @INC and be assured of getting @main::INC. The punctuation mark variables, such as $_, $2, and $!, are either all lexicals or forced into package main, so when we write $. , we never get $Navigation::. by mistake.  

=head2 10. 9. Packages and Lexicals 

A lexical variable (a variable introduced with my) isn't prefixed by the current package because package variables are always global: we can always reference a package variable if we know its full name. A lexical variable is usually temporary and accessible for only a portion of the program. If we declare a lexical variable, then using that name without a package prefix gets the lexical variable. A package prefix ensures that we are accessing a package variable and never a lexical variable.  

For example, suppose a subroutine within navigation. pm declares a lexical @homeport variable. Any mention of @homeport will then be the newly introduced lexical variable, but a fully qualified mention of @Navigation::homeport accesses the package variable instead.  


 package Navigation; 
 @homeport = (21. 283, -157. 842); 


 sub get_me_home { 
   my @homeport; 


    #. . @homeport. . # refers to the lexical variable 
    #. . @Navigation::homeport. . # refers to the package variable 


 } 


  #. . @homeport. . # refers to the package variable 

Obviously, this can lead to confusing code, so we shouldn't introduce such duplication needlessly. The results are completely predictable, though.  

=head2 10. 10. Exercises 

You can find the answers to these exercises in "Answers for Chapter 10" in the Appendix.  

=head2 10. 10. 1. Exercise 1 [25 min] 

The Oogaboogoo natives on the island have unusual names for the days and months. Here is some simple but not very well-written code from Gilligan. Fix it up, add a conversion function for the month names, and make the whole thing into a library. For extra credit, add suitable error checking and consider what should be in the documentation.  


 @day = qw(ark dip wap sen pop sep kir); 
 sub number_to_day_name { my $num = shift @_; $day[$num]; } 
 @month = qw(diz pod bod rod sip wax lin sen kun fiz nap dep); 

=head2 10. 10. 2. Exercise 2 [15 min] 

Make a program that uses your library and the following code to print out a message, such as Today is dip, sen 15, 2011, meaning that today is a Monday in August. (Hint: the year and month numbers returned by localtime may not be what you'd expect, so you need to check the documentation. ) 


 my($sec, $min, $hour, $mday, $mon, $year, $wday) = localtime; 

