Chapter 12. Objects with Data 

Using the simple syntax introduced in Chapter 11, we have class methods, (multiple) inheritance, overriding, and extending. We've been able to factor out common code and provide a way to reuse implementations with variations. This is at the core of what objects provide, but objects also provide instance data, which we haven't even begun to cover.  

12. 1. A Horse Is a Horse, of Course of Courseor Is It? 

Let's look at the code used in Chapter 11 for the Animal classes and Horse classes: 


 { package Animal; 
   sub speak { 
     my $class = shift; 
     print "a $class goes ", $class->sound, "!\n" 
   } 
 } 
 { package Horse; 
   @ISA = qw(Animal); 
   sub sound { 'neigh' } 
 } 

This lets us invoke Horse->speak to ripple upward to Animal::speak, calling back to Horse::sound to get the specific sound, and the output of: 


 a Horse goes neigh! 

But all Horse objects would have to be absolutely identical. If we add a method, all horses automatically share it. That's great for making horses identical, but how do we capture the properties of an individual horse? For example, suppose we want to give our horse a name. There's got to be a way to keep its name separate from those of other horses.  

We can do so by establishing an instance. An instance is generally created by a class, much like a car is created by a car factory. An instance will have associated properties, called instance variables (or member variables, if you come from a C++ or Java background). An instance has a unique identity (like the serial number of a registered horse), shared properties (the color and talents of the horse), and common behavior (e. g. , pulling the reins back tells the horse to stop).  

In Perl, an instance must be a reference to one of the built-in types. Start with the simplest reference that can hold a horse's name, a scalar reference:[*] 

[*] It's the simplest, but rarely used in real code for reasons we'll show shortly.  


 my $name = 'Mr. Ed'; 
 my $tv_horse = \$name; 

Now $tv_horse is a reference to what will be the instance-specific data (the name). The final step in turning this into a real instance involves a special operator called bless: 


 bless $tv_horse, 'Horse'; 

The bless operator follows the reference to find what variable it points to in this case, the scalar $name. Then it "blesses" that variable, turning $tv_horse into an objecta Horse object, in fact. (Imagine that a little sticky-note that says Horse is now attached to $name. ) 

At this point, $tv_horse is an instance of Horse. [] That is, it's a specific horse. The reference is otherwise unchanged and can still be used with traditional dereferencing operators. [] 

[] Actually, $tv_horse points to the object, but, in common terms, we nearly always deal with objects by references to those objects. Hence, it's simpler to say that $tv_horse is the horse, not "the thing that $tv_horse references. " 

[] Although doing so outside the class is a bad idea, as we'll show later.  

12. 2. Invoking an Instance Method 

The method arrow can be used on instances, as well as names of packages (classes). Let's get the sound that $tv_horse makes: 


 my $noise = $tv_horse->sound; 

To invoke sound, Perl first notes that $tv_horse is a blessed reference, and thus an instance. Perl then constructs an argument list, similar to the way an argument list was constructed when we used the method arrow with a class name. In this case, it'll be just ($tv_horse). (Later we'll show that arguments will take their place following the instance variable, just as with classes. ) 

Now for the fun part: Perl takes the class in which the instance was blessed, in this case, Horse, and uses it to locate and invoke the method, as if we had said Horse->sound instead of $tv_horse->sound. The purpose of the original blessing is to associate a class with that reference to allow Perl to find the proper method.  

In this case, Perl finds Horse::sound directly (without using inheritance), yielding the final subroutine invocation: 


 Horse::sound($tv_horse) 

Note that the first parameter here is still the instance, not the name of the class as before. neigh is the return value, which ends up as the earlier $noise variable.  

If Perl did not find Horse::sound, it would walk up the @Horse::ISA list to try to find the method in one of the superclasses, just as for a class method. The only difference between a class method and an instance method is whether the first parameter is an instance (a blessed reference) or a class name (a string). [*] 

[*] This is perhaps different from other OOP languages with which you may be familiar.  

12. 3. Accessing the Instance Data 

Because we get the instance as the first parameter, we can now access the instance-specific data. In this case, let's add a way to get at the name: 


 { package Horse; 
   @ISA = qw(Animal); 
   sub sound { 'neigh' } 
   sub name { 
     my $self = shift; 
     $$self; 
   } 
 } 

Now we call for the name: 

print $tv_horse->name, " says ", $tv_horse->sound, "\n"; 

Inside Horse::name, the @_ array contains just $tv_horse, which the shift stores into $self. It's traditional to shift the first parameter into a variable named $self for instance methods, so stay with that unless you have strong reasons to do otherwise (Perl places no significance on the name $self, however). [] Then we dereference $self as a scalar reference, yielding Mr. Ed. The result is: 

[] If you come from another OO language background, you might choose $this or $me for the variable name, but you'll probably confuse most other Perl OO hackers.  


 Mr. Ed says neigh.  

12. 4. How to Build a Horse 

If we constructed all our horses by hand, we'd most likely make mistakes from time to time. Making the "inside guts" of a Horse visible also violates one of the principles of OOP. That's good if we're a veterinarian but not if we just like to own horses. We let the Horse class build a new horse: 


 { package Horse; 
   @ISA = qw(Animal); 
   sub sound { 'neigh' } 
   sub name { 
     my $self = shift; 
     $$self; 
   } 
   sub named { 
     my $class = shift; 
     my $name = shift; 
     bless \$name, $class; 
   } 
 } 

Now, with the new named method, we build a Horse: 


 my $tv_horse = Horse->named('Mr. Ed'); 

We're back to a class method, so the two arguments to Horse::named are "Horse" and "Mr. Ed". The bless operator not only blesses $name, it also returns the reference to $name, so that's fine as a return value. And that's how we build a horse.  

We called the constructor named here so it quickly denotes the constructor's argument as the name for this particular Horse. We can use different constructors with different names for different ways of "giving birth" to the object (such as recording its pedigree or date of birth). However, we'll find that most people use a single constructor named new, with various ways of interpreting the arguments to new. Either style is fine, as long as we document our particular way of giving birth to an object. Most core and CPAN modules use new, with notable exceptions, such as DBI's DBI->connect( ). It's really up to the author.  

12. 5. Inheriting the Constructor 

Was there anything specific to Horse in that method? No. Therefore, it's also the same recipe for building anything else inherited from Animal, so let's put it there: 


 { package Animal; 
   sub speak { 
     my $class = shift; 
     print "a $class goes ", $class->sound, "!\n" 
   } 
   sub name { 
     my $self = shift; 
     $$self; 
   } 
   sub named { 
     my $class = shift; 
     my $name = shift; 
     bless \$name, $class; 
   } 
 } 
 { package Horse; 
   @ISA = qw(Animal); 
   sub sound { 'neigh' } 
 } 

Ahh, but what happens if we invoke speak on an instance? 


 my $tv_horse = Horse->named('Mr. Ed'); 
 $tv_horse->speak; 

We get a debugging value: 


 a Horse=SCALAR(0xaca42ac) goes neigh! 

Why? Because the Animal::speak method expects a class name as its first parameter, not an instance. When we pass in the instance, we'll use a blessed scalar reference as a string, which shows up as we showed it just now similar to a stringified reference, but with the class name in front.  

12. 6. Making a Method Work with Either Classes or Instances 

All we need to fix this is a way to detect whether the method is called on a class or an instance. The most straightforward way to find out is with the ref operator. This operator returns a string (the class name) when used on a blessed reference, and undef when used on a string (like a class name). We modify the name method first to notice the change: 


 sub name { 
   my $either = shift; 
   ref $either 
     ? $$either                # it's an instance, return name 
     : "an unnamed $either";   # it's a class, return generic 
 } 

Here the ?: operator selects either the dereference or a derived string. Now we can use it with either an instance or a class. Note that we changed the first parameter holder to $either to show that it is intentional: 


 print Horse->name, "\n";      # prints "an unnamed Horse\n" 


 my $tv_horse = Horse->named('Mr. Ed'); 
 print $tv_horse->name, "\n";   # prints "Mr. Ed. \n" 

and now we'll fix speak to use this: 


 sub speak { 
   my $either = shift; 
   print $either->name, ' goes ', $either->sound, "\n"; 
 } 

Since sound already worked with either a class or an instance, we're done! 

12. 7. Adding Parameters to a Method 

Let's train our animals to eat: 


 { package Animal; 
   sub named { 
     my $class = shift; 
     my $name = shift; 
     bless \$name, $class; 
   } 
   sub name { 
     my $either = shift; 
     ref $either 
       ? $$either # it's an instance, return name 
       : "an unnamed $either"; # it's a class, return generic 
   } 
   sub speak { 
     my $either = shift; 
     print $either->name, ' goes ', $either->sound, "\n"; 
   } 
   sub eat { 
     my $either = shift; 
     my $food = shift; 
     print $either->name, " eats $food. \n"; 
   } 
 } 
 { package Horse; 
   @ISA = qw(Animal); 
   sub sound { 'neigh' } 
 } 
 { package Sheep; 
   @ISA = qw(Animal); 
   sub sound { 'baaaah' } 
 } 

Now try it out: 


 my $tv_horse = Horse->named('Mr. Ed'); 
 $tv_horse->eat('hay'); 
 Sheep->eat('grass'); 

It prints: 


 Mr. Ed eats hay.  
 an unnamed Sheep eats grass.  

An instance method with parameters gets invoked with the instance, and then the list of parameters. That first invocation is like: 


 Animal::eat($tv_horse, 'hay'); 

The instance methods form the Application Programming Interface (API) for an object. Most of the effort involved in designing a good object class goes into the API design, because the API defines how reusable and maintainable the object and its subclasses will be. Don't rush to freeze an API design before you've considered how you (or others) will use the object.  

12. 8. More Interesting Instances 

What if an instance needs more data? Most interesting instances are made of many items, each of which can, in turn, be a reference or another object. The easiest way to store these items is often in a hash. The keys of the hash serve as the names of parts of the object (also called instance or member variables), and the corresponding values are, well, the values.  

How do we turn the horse into a hash?[*] Recall that an object is any blessed reference. We can just as easily make it a blessed hash reference as a blessed scalar reference, as long as everything that looks at the reference is changed accordingly.  

[*] Other than calling on a butcher, that is.  

Let's make a sheep that has a name and a color: 


 my $lost = bless { Name => 'Bo', Color => 'white' }, Sheep; 

$lost->{Name} has Bo, and $lost->{Color} has white. But we want to make $lost->name access the name, and that's now messed up because it's expecting a scalar reference. Not to worry, because it's pretty easy to fix: 


 ## in Animal 
 sub name { 
   my $either = shift; 
   ref $either 
     ? $either->{Name} 
     : "an unnamed $either"; 
 } 

named still builds a scalar sheep, so let's fix that as well: 


 ## in Animal 
 sub named { 
   my $class = shift; 
   my $name = shift; 
   my $self = { Name => $name, Color => $class->default_color }; 
   bless $self, $class; 
 } 

What's this default_color? If named has only the name, we still need to set a color, so we'll have a class-specific initial color. For a sheep, we might define it as white: 


 ## in Sheep 
 sub default_color { 'white' } 

Then, to keep from having to define one for each additional class, define a backstop method, which serves as the "default default, " directly in Animal: 


 ## in Animal 
 sub default_color { 'brown' } 

Thus, all animals are brown (muddy, perhaps), unless a specific animal class gives a specific override to this method.  

Now, because name and named were the only methods that referenced the structure of the object, the remaining methods can stay the same, so speak still works as before. This supports another basic rule of OOP: if only the object accesses its internal data, there's less code to change when it's time to modify that structure.  

12. 9. A Horse of a Different Color 

Having all horses be brown would be boring. Let's add a method or two to get and set the color: 


 ## in Animal 
 sub color { 
   my $self = shift; 
   $self->{Color}; 
 } 
 sub set_color { 
   my $self = shift; 
   $self->{Color} = shift; 
 } 

Now we can fix that color for Mr. Ed: 


 my $tv_horse = Horse->named('Mr. Ed'); 
 $tv_horse->set_color('black-and-white'); 
 print $tv_horse->name, ' is colored ', $tv_horse->color, "\n"; 

which results in: 


 Mr. Ed is colored black-and-white 

12. 10. Getting Our Deposit Back Because of the way the code is written, the setter also returns the updated value. Think about this (and document it) when we write a setter. What does the setter return? Here are some common variations: 

The updated parameter (same as what was passed in) 

The previous value (similar to the way umask or the single-argument form of select works) 

The object itself 

A success/fail code 

Each has advantages and disadvantages. For example, if we return the updated parameter, we can use it again for another object: 


 $tv_horse->set_color( $eating->set_color( color_from_user(  ) )); 

The implementation given earlier returns the newly updated value. Frequently, this is the easiest code to write, and often the fastest to execute.  

If we return the previous parameter, we can easily create "set this value temporarily to that" functions: 


 { 
   my $old_color = $tv_horse->set_color('orange'); . . . do things with $tv_horse. . .  
   $tv_horse->set_color($old_color); 
 } 

This is implemented as: 


 sub set_color { 
   my $self = shift; 
   my $old = $self->{Color}; 
   $self->{Color} = shift; 
   $old; 
 } 

For more efficiency, we can avoid stashing the previous value when in a void context using the wantarray function: 


 sub set_color { 
   my $self = shift; 
   if (defined wantarray) { 
     # this method call is not in void context, so 
     # the return value matters 
     my $old = $self->{Color}; 
     $self->{Color} = shift; 
     $old; 
   } else { 
     # this method call is in void context 
     $self->{Color} = shift; 
   } 
 } 

If we return the object itself, we can chain settings: 


 my $tv_horse = 
   Horse->named('Mr. Ed') 
        ->set_color('grey') 
        ->set_age(4) 
        ->set_height('17 hands'); 

This works because the output of each setter is the original object, becoming the object for the next method call. Implementing this is, again, relatively easy: 


 sub set_color { 
   my $self = shift; 
   $self->{Color} = shift; 
   $self; 
 } 

The void context trick can be used here too, although with questionable value because we've already established $self.  

Finally, returning a success status is useful if it's fairly common for an update to fail, rather than an exceptional event. The other variations would have to indicate failure by throwing an exception with die.  

In summary: use what you want, be consistent if you can, but document it nonetheless (and don't change it after you've already released one version).  

12. 11. Don't Look Inside the Box 

We might have obtained or set the color outside the class simply by following the hash reference: $tv_horse->{Color}. However, this violates the encapsulation of the object by exposing its internal structure. The object is supposed to be a black box, but we've pried off the hinges and looked inside.  

One purpose of OOP is to enable the maintainer of Animal or Horse to make reasonably independent changes to the implementation of the methods and still have the exported interface work properly. To see why accessing the hash directly violates this, let's say that Animal no longer uses a simple color name for the color, but instead changes to use a computed RGB triple to store the color (holding it as an arrayref). In this example, we use a fictional (at the time of this writing) Color::Conversions module to change the format of the color data behind the scenes: 


 use Color::Conversions qw(color_name_to_rgb rgb_to_color_name); . . .  
 sub set_color { 
   my $self = shift; 
   my $new_color = shift; 
   $self->{Color} = color_name_to_rgb($new_color);  # arrayref 
 } 
 sub color { 
   my $self = shift; 
   rgb_to_color_name($self->{Color});               # takes arrayref 
 } 

We can still maintain the old interface if we use a setter and getter, because they can perform the translations without the user knowing about it. We can also add new interfaces now to enable the direct setting and getting of the RGB triple: 


 sub set_color_rgb { 
   my $self = shift; 
   $self->{Color} = [@_];                # set colors to remaining parameters 
 } 
 sub get_color_rgb { 
   my $self = shift; 
   @{ $self->{Color} };                  # return RGB list 
 } 

If we use code outside the class that looks at $tv_horse->{Color} directly, this change is no longer possible. It won't work to store a string ('blue') where an arrayref is needed ([0, 0, 255]) or to use an arrayref as a string. This is why OO programming encourages you to call getters and setters, even if they take some time.  

12. 12. Faster Getters and Setters 

Because we're going to play nice and always call the getters and setters instead of reaching into the data structure, getters and setters are called frequently. To save a teeny-tiny bit of time, we might see these getters and setters written as: 


 ## in Animal 
 sub color     { $_[0]->{Color} } 
 sub set_color { $_[0]->{Color} = $_[1] } 

We save a bit of typing when we do this, and the code is slightly faster, although probably not enough for us to notice it with everything else that's going on in our program. The $_[0] is just the single element access to the @_ array. Instead of using shift to put the argument into another variable, we can simply use it directly.  

12. 13. Getters That Double as Setters 

Another alternative to the pattern of creating two different methods for getting and setting a parameter is to create one method that notes whether or not it gets any additional arguments. If the arguments are absent, it's a get operation; if the arguments are present, it's a set operation. A simple version looks like: 


 sub color { 
   my $self = shift; 
   if (@_) {              # are there any more parameters? 
     # yes, it's a setter: 
     $self->{Color} = shift; 
   } else { 
     # no, it's a getter: 
     $self->{Color}; 
   } 
 } 

Now we can say: 


 my $tv_horse = Horse->named('Mr. Ed'); 
 $tv_horse->color('black-and-white'); 
 print $tv_horse->name, ' is colored ', $tv_horse->color, "\n"; 

The presence of the parameter in the second line denotes that we are setting the color, while its absence in the third line indicates a getter.  

This strategy is attractive because of its simplicity, but it also has disadvantages. It complicates the actions of the getter, which is called frequently. It also makes it difficult to search through our code to find the setters of a particular parameter, which are often more important than the getters. We've been burned in the past when a setter became a getter because another function returned more parameters than expected after an upgrade.  

12. 14. Restricting a Method to Class-Only or Instance-Only 

Setting the name of an unnameable generic Horse is probably not a good idea; neither is calling named on an instance. Nothing in the Perl method definition says "this is a class method" or "this is an instance method. " Fortunately, the ref operator lets us throw an exception when called incorrectly. As an example of instance- or class-only methods, consider the following, where we check the argument to see what to do: 


 use Carp qw(croak); 


 sub instance_only { 
   ref(my $self = shift) or croak "instance variable needed"; . . . use $self as the instance. . .  
 } 


 sub class_only { 
   ref(my $class = shift) and croak "class name needed"; . . . use $class as the class. . .  
 } 

The ref function returns true for an instance, which is just a blessed reference, or false for a class, which is just a string. If it returns an undesired value, we use the croak function from the Carp module (which comes in the standard distribution). The croak function places the blame on the caller by making the error message look like it came from the spot where we called the method instead of the spot where we issued the error. The caller will get an error message like this, giving the line number in their code where the wrong method was called: 


 instance variable needed at their_code line 1234 

Just as croak is provided as the alternate form of die, Carp also provides carp as a replacement for warn. Each tells the user which line of code called the code that caused the problem. Instead of using die or warn in your modules, use the Carp functions instead. Your users will thank you for it.  

12. 15. Exercise 

You can find the answer to this exercise in "Answer for Chapter 12" in the Appendix.  

12. 15. 1. Exercise [45 min] 

Give the Animal class the ability to get and set the name and color. Be sure that your result works under use strict. Also make sure your get methods work with both a generic animal and a specific animal instance. Test your work with: 


 my $tv_horse = Horse->named('Mr. Ed'); 
 $tv_horse->set_name('Mister Ed'); 
 $tv_horse->set_color('grey'); 
 print $tv_horse->name, ' is ', $tv_horse->color, "\n"; 
 print Sheep->name, ' colored ', Sheep->color, ' goes ', Sheep->sound, "\n"; 

What should you do if you're asked to set the name or color of a generic animal? 

