=EN Building Recursively Defined Data
=CN 构建嵌套定义的数据

=EN Suppose we wanted to capture information about a filesystem, including the filenames and directory names, and their included contents.
=CN 我们可能要收集一个文件系统的信息, 包括文件名和目录名, 以及他们的内容.

=EN Represent a directory as a hash, in which the keys are the names of the entries within the directory, and values are undef for plain files.
=CN 用一个散列代表目录, 在其中, 键代表条目名字, 其值如果是未定义则代表是一般的文件. 

=EN A sample /bin directory looks like:
=CN 以/bin目录为例：

=EN Similarly, the Skipper's home directory might also contain a personal bin directory (at something like ~skipper/bin) that contains personal tools:
=CN 类似的, Skipper的主目录同样包括一个属于他自己的bin目录（多少象~/skipper/bin）, 其中有些他个人的工具：

=EN Nothing in either structure tells where the directory is located in the hierarchy. It just represents the contents of some directory. 
=CN 上面两个例子没有说目录是否是在一个层次结构里面. 它仅仅表示了一个目录里的一些内容. 

=EN Go up one level to the Skipper's home directory, which is likely to contain a few files along with the personal bin directory:
=CN 我们往上跑一级, 到Skipper的主目录, 里面有些文件, 并且有他自己的一个bin目录：

=EN Ahh, notice that we have three files, but the fourth entry bin doesn't have undef for a value but rather the hash reference created earlier for the Skipper's personal bin directory.
=CN 哈, 注意, 我们现在有三个文件, 但是第四个条目bin没有含有未定义值, 而是一个散列引用, 这个引用是先前建立的指向Skipper的个人的bin目录.

=EN This is how we indicate subdirectories. If the value is undef, it's a plain file; 
=CN 这就是我们标识子目录的方法. 如果值不是未定义, 则它是一个文件;

=EN if it's a hash reference, we have a subdirectory, with its own files and subdirectories. 
=CN 如果是个散列引用, 我们就是指向一个子目录, 其拥有自己的文件和其它子目录.

=EN Of course, we can have combined these two initializations:
=CN 当然, 我们可以把两者合在一起：

=EN Now the hierarchical nature of the data starts to come into play
=CN 现在分层性质的数据开始起作用了
=EN Obviously, we don't want to create and maintain a data structure by changing literals in the program.
=CN 显然, 我们不必在程序里用硬编码的形式来构建和维护这个结构.

=EN We should fetch the data by using a subroutine.
=CN 我们可以用子程序来获取这些数据. 

=EN Write a subroutine that returns undef for a given pathname if the path is a file, or a hash reference of the directory contents if the path is a directory.
=CN 写个子程序, 如果找到的是文件, 则返回未定义值, 如果是目录的话, 则返回一个散列引用.

=EN The base case of looking at a file is the easiest, so let's write that:
=CN 最基本的查看文件的例子是最简单的, 所以我们可以这样写：

=EN If the Skipper calls this on. cshrc, he'll get back an undef value, indicating that a file was seen. 
=CN 如果Skipper调用这个时找到. cshrc, 我们返回未定义值, 表示看到一个文件. 

=EN Now for the directory part. We need a hash reference, which we declare as a named hash inside the subroutine. 
=CN 现在要对付目录部份了. 我们需要一个散列引用, 我们声明一个命名散列放在子程序中.

=EN For each element of the hash, we call ourselves to populate the value of that hash element. It goes something like this:
=CN 为散列中每个元素, 我们调用自己来发布元素值. 程序如下：

=EN The base cases in this recursive algorithm are the files and symbolic links.
=CN 这个递归算法中的基础情况是文件和符号链接. 

=EN This algorithm wouldn't correctly traverse the filesystem if it followed symbolic links to directories as if they were true (hard) links, since it could end up in a circular loop if the symlink pointed to a directory that contained the symlink.
=CN 如果文件系统中的符号链接指向目录, 好像是真的（硬）连接, 这个算法不能正确遍历文件系统. 因为如果符号链接指向一个包含着符号链接的目录的话, 它会最终走向一个循环.

=EN It would also fail to correctly traverse a malformed filesystem that is, one in which the directories form a ring rather than a tree structure, say.
=CN 在遍历一个错误格式的文件系统时也会出错. 所谓错误格式的文件系统是指, 目录形成一个循环结构, 而不是树形结构.

=EN Although malformed filesystems may not often be an issue, recursive algorithms in general are vulnerable to errors in the structure of the recursive data. 
=CN 尽管错误格式的文件不一定成为问题, 递归算法一般来说在遇到循环数据结构时会有麻烦. 

=EN Not that any of us have ever done that and wondered why the program took forever. The second time really wasn't our fault anyway, and the third time was just bad luck. That's our story and we're sticking to it. 
=CN 这并不是说我们任何人都没有碰到过, 并奇怪为什么程序一直运行. 第二次确实不是我们的错, 第三次只是运气不好. 这就是我们的故事而且挥之不去. 

=EN For each file within the directory being examined, the response from the recursive call to data_for_path is undef. 
=CN 对于目录中的每个文件都会查一下, 从递归调用data_for_path得到的结果就是未定义值. 

=EN This populates most elements of the hash.
=CN 这就生成了散列中大部份的值. 

=EN When the reference to the named hash is returned, the reference becomes a reference to an anonymous hash because the name immediately goes out of scope. 
=CN 当一个命名引用返回时, 引用立即跑出程序范围, 所以成为对一个匿名散列的引用. 

=EN The data itself doesn't change, but the number of ways in which we can access the data changes.
=CN 数据本身并没有改变, 但是我们可以有多种方法来访问数据变化.

=EN If there is a subdirectory, the nested subroutine call uses readdir to extract the contents of that directory and returns a hash reference, which is inserted into the hash structure created by the caller. 
=CN 如果这其中是个子目录, 则嵌套子程序调用使用readdir抽出目录内容, 并返回一个散列引用, 并由调用者放到散列结构中. 

=EN At first, it may look a bit mystifying, but if we walk through the code slowly, we'll see it's always doing the right thing.
=CN 一开始, 这看上去好像很搞, 但是, 只要我们慢慢读完这个程序, 我们会发现它总能完成任务.

=EN Test the results of this subroutine by calling it on. (the current directory) and inspecting the result:
=CN 调用它一下, 看看结果如何. （在当前目录中）检查一下结果：

=EN Obviously, this will be more interesting if our current directory contains subdirectories. 
=CN 显然, 如果我们自己的目录里有子目录的话, 那看上去就有趣多了. 
