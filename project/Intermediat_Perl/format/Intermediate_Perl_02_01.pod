=EN 2. 1. List Operators
=CN 2. 1. 列表操作符
=EN You already know about several list operators in Perl, but you may not have thought of them as working with lists. The most common list operator is probably print. We give it one or more arguments, and it puts them together for us. 
=CN 你可能已经知道Perl的一些列表操作符, 但并没有想过他们是怎么同列表一起工作的. 最常用的列表操作符应该是print了. 我们给它一些参数, 然后它把他们合在一起显示出来. 
=EN There are several other list operators that you already know about from Learning Perl. The sort operator puts its input list in order. In their theme song, the castaways don't come in alphabetical order, but sort can fix that for us. 
=CN 在Learning Perl这本书里, 你可能知道了另外一些列表操作符. 如sort操作符将输入的列表按顺序列出. 在Gilligan's Island的主题歌中的那些求生者没有按字母次序出场, sort可以为我们修正这一点. 
=EN The reverse operator returns a list in the opposite order. 
=CN reverse操作符返回反向排序的列表. 
=EN Perl has many other operators that work with lists, and, once you get used to them, you'll find yourself typing less and expressing your intent more clearly. 
=CN Perl 还有其它与列表打交道的操作符. 而且一旦你使用他们, 你会发现这些语句会使你表达得更清楚, 写更少的代码. 
=EN 2. 1. 1. List Filtering with grep
=CN 2. 1. 1. 用grep操作符来过滤列表
=EN The grep operator takes a list of values and a "testing expression. " It takes one item after another in the list and places it into the $_ variable. It then evaluates the testing expression in a scalar context. If the expression evaluates to a true value, grep passes $_ on to the output list. 
=CN grep操作符取一个列表和一个"测试表达式". 它一个一个地从列表中把元素取出来放到$_变量中, 并在标量环境中, 用"测试表达式"来检验这个值. 如果检验出来是个"真"值, grep会把$_变量送到输出列表中. 
=EN In a list context, the grep operator returns a list of all such selected items. In a scalar context, grep returns the number of selected items. 
=CN 在一个列表上下文中, grep操作符会返回所有被选出元素的列表. 而在一个标量上下文中, grep返回被选出元素的个数. 
=EN Here, EXPR stands in for any scalar expression that should refer to $_ (explicitly or implicitly). For example, to find all the numbers greater than 10, in our grep expression we check if $_ is greater than 10. 
=CN 在下面的例子中, EXPR代表一个返回标量的表达式, 它引用$_变量（显式或隐式的）. 比如找出大于10的数, EXPR表达式来处理$_是否大于10. 
=EN The result is just 16, 32, and 64. This uses an explicit reference to $_. Here's an example of an implicit reference to $_ from the pattern match operator:
=CN 输出结果当然是：16, 32 和64. 上例中显式地引用了变量$_. 下面有个隐式引用变量$_的例子, 在正则表达式中隐式引用了变量$_:
=EN And now we get just 4 and 64. 
=CN 现在我们得到的输出是4和64. 
=EN While the grep is running, it shadows any existing value in $_, which is to say that grep borrows the use of this variable but puts the original value back when it's done. The variable $_ isn't a mere copy of the data item, though; it is an alias for the actual data element, similar to the control variable in a foreach loop. 
=CN 当grep工作的时候, 它是从$_变量中把值"借"出来用. 就是说grep把$_的值"借"过来用一下, 用完后再把原值放回$_变量中. 所以$_变量仅仅是拷贝一下值而己. 是实际数据元素的一个别名. 就像foreach loop中的控制变量. 
=EN If the testing expression is complex, we can hide it in a subroutine:
=CN 如果检验表达式太复杂, 我们可以把检验代码隐藏到一个子例程里去：
=EN Now we get back the list of 1, 16, and 32. These numbers have a digit sum with a remainder of "1" in the last line of the subroutine, which counts as true. 
=CN 对于这个例子, 我们得到的输出是1, 16和32. 程序把这些数据的数位加起来后, 因为最后一行返回的余数都是"1", 所以返回值为"真". 
=EN The syntax comes in two forms, though: we just showed you the expression form, and now here's the block form. Rather than define an explicit subroutine that we'd use for only a single test, we can put the body of a subroutine directly in line in the grep operator, using the block forms:[*]
=CN 所以, grep语法有两种形式：前面秀给你们看的表达式形式和下面要展示给你们看的代码块形式. 因为代码只用一次, 我们现在不把代码放到子例程中, 而是以代码块的形式直接放在grep语法里, 所谓的块形式：[*]
=EN [*] In the block form of grep, there's no comma between the block and the input list. In the expression form of grep, there must be a comma between the expression and the list. 
=CN [*] 在grep的块形式中, 代码块和输入数组中间是没有逗号的. 而在grep的表达式形式中, 表达式和输入数组中间必须要有一个逗号. 区别如下：
=EN Just like the expression form, grep temporarily places each element of the input list into $_. Next, it evaluates the entire block of code. The last evaluated expression in the block is the testing expression. (And like all testing expressions, it's evaluated in a scalar context. ) Because it's a full block, we can introduce variables that are scoped to the block. Let's rewrite that last example to use the block form:
=CN 同grep的表达式形式一样, grep临时把输入数组中每个元素放到$_中去, 然后, 它用代码块来处理这个值. 代码块里最后一个表达式来检验值. 就像所有的测试表达式一样, 在标量上下文来检验值. 因为是完整的块, 所以我们可以在其中用以块为范围的变量. 我们来用块形式重写上面的例子：
=EN Note the two changes: the input value comes in via $_ rather than an argument list, and we removed the keyword return. In fact, we would have been wrong to keep the return because we're no longer in a separate subroutine: just a block of code. [*] Of course, we can optimize a few things out of that routine since we don't need the intermediate variables:
=CN 注意与用子例程的方法有两个地方的变化：输入值是通过变量$_, 而不是输入参数列表, 而且在代码块形式中我们去掉了return关键字. 实际上如果我们保留return的话是会出错的, 因为我们不是在用一个子例程, 仅仅是一个代码块. [*]当然, 这个例子我们还可以优化一下, 去掉中间变量：
=EN [*] The return would have exited the subroutine that contains this entire section of code. And yes, some of us have been bitten by that mistake in real, live coding on the first draft. 
=CN [*] 保留return的结果会导致Perl从包含这个代码块的子例程中退出. 当然, 我们中有些人在最初编程的时候就深受其苦. 
=EN Feel free to crank up the explicitness if it helps you and your coworkers understand and maintain the code. That's the main thing that matters. 
=CN 如果显式使用中间变量能使代码让你和你的同事更易理解和维护代码的话, 尽管用它. 好代码才是主要的. 
=EN 2. 1. 2. Transforming Lists with map
=CN 2. 1. 2. 用map作列表的转换
=EN The map operator has a very similar syntax to the grep operator and shares a lot of the same operational steps. For example, it temporarily places items from a list into $_ one at a time, and the syntax allows both the expression block forms. 
=CN map操作符的语法同grep操作符非常相像, 他们有相同的操作步骤. 例如它们都是把输入列表中的元素临时地放到$_变量中去, 而且他们的语法中都有表达式形式和代码块形式. 
=EN However, the testing expression becomes a mapping expression. The map operator evaluates the expression in a list context (not a scalar context like grep). Each evaluation of the expression gives a portion of the many results. The overall result is the list concatenation of all individual results. In a scalar context, map returns the number of elements that are returned in a list context. But map should rarely, if ever, be used in anything but a list context. )
=CN 然而, grep中的测试表达式在map中变成了映射表达式. map操作符在列表环境中为表达式求值（而不是像grep那样在标量环境下求值）. 每次表达式求值都成为整个输出结果的一部分. 为各个元素求值结果连在一起成为完整全部的输出. 在标量环境下, map返回在输入列表里多少个元素被处理. 但是map应该总是用在列表环境下, 很少用在标量环境下. 
=EN Let's start with a simple example:
=CN 让我们开始一个简单的实例：
