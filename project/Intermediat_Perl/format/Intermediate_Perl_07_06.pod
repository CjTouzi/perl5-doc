=EN Closure Variables as Inputs
=CN 作为输入参数的闭包变量
=EN While the previous examples showed closure variables being modified, closure variables are also useful to provide initial or lasting input to the subroutine. For example, let us write a subroutine to create a File::Find callback that prints files exceeding a certain size:
=CN 上一章的例子展示了闭包中变量如何被修改的, 而闭包变量还可以被用来初始化变量或给匿名子程序提供参数输入（类似静态局部变量）. 比如, 我们来写一个子程序来创建File::Find回调, 打印出所有超过一定大小的文件名：
use File::Find;
sub print_bigger_than {
 my $minimum_size = shift;
 return sub { print "$File::Find::name\n" if -f and -s >= $minimum_size };
}
my $bigger_than_1024 = print_bigger_than(1024);
find($bigger_than_1024, 'bin');
=EN We pass the 1024 parameter into the print_bigger_than, which then gets shifted into the $minimum_size lexical variable. Because we access this variable within the subroutine referenced by the return value of the print_bigger_than variable, it becomes a closure variable, with a value that persists for the duration of that subroutine reference. Again, invoking this subroutine multiple times creates distinct "locked-in" values for $minimum_size, each bound to its corresponding subroutine reference. 
=CN 我们把1024作为参数传给子程序print_bigger_than, 这个子程序将其传给词法变量$minimum_size. 因为我们在匿名子程序中引用这个变量, 然后再返回匿名子程序的引用, 所以这成为一个闭包变量, 只要匿名子程序引用它, 它的值就一直保持着. 同样, 多次调用这个程序会为$minimum_size锁定不同的值, 每个都和他们各自的匿名子程序引用绑定. 
=EN Closures are "closed" only on lexical variables, since lexical variables eventually go out of scope. Because a package variable (which is a global) never goes out of scope, a closure never closes on a package variable. All subroutines refer to the same single instance of the global variable. 
=CN 闭包是仅对词法变量跑出程序范围时"关闭". 因为一个包变量（因为是全局）总是在范围之内, 一个闭包不可能"关闭"一个包变量. 对于所有的子程序来说, 他们都引用全局变量的同一个实例. 
