=EN 5. 4. When Reference Counting Goes Bad
=CN 5. 4. 当引用计数出问题了
=EN Reference counting as a way to manage memory has been around for a long time. A really long time. The downside of reference counting is that it breaks when the data structure is not a directed graph that is, when some parts of the structure point back in to other parts in a looping way. For example, suppose each of two data structures contains a reference to the other (see Figure 5-1):
=CN 用引用计数的办法来管理内存长久以来一直很受欢迎. 的确使用了很长一段时间. 引用计数有一个缺点, 就是在数据结构不是单向引用的时候, 它会有问题. 所谓非单向引用的数据结构就是：这个数据结构中的一些部份引用与其指向的数据存在循环引用. 比如：这两块数据结构中都有互相指向对方的引用（参考图5-1)：
my @data1 = qw(one won);
my @data2 = qw(two too to);
push @data2, \@data1;
push @data1, \@data2;
=EN Figure 5-1. When the references in a data structure form a loop, Perl's reference-counting system may not be able to recognize and recycle the no-longer-needed memory space
=CN 图 5-1. 当一个数据结构中的引用出现循环调用的时候, Perl的引用计数系统可能不能识别出来, 从而不能回收不再需要的内存空间
=EN At this point, we have two names for the data in @data1: @data1 itself and @{$data2[3]}, and two names for the data in @data2: @data2 itself and @{$data1[2]}. We've created a loop. In fact, we can access won with an infinite number of names, such as $data1[2][3][2][3][2][3][1]. 
=CN 像这种情况, 我们会有两个名字为@data1中的数据块命名：@data1自身和@{$data2[3]}, 另外有两个名字为@data2中的数据块命名：@data2自身和@{$data1[2]}. 我们创建了一个循环. 实际上我们可以用可怕多的下标来访问这块数据： $data1[2][3][2][3][2][3][1]. 
=EN What happens when these two array names go out of scope? Well, the reference count for the two arrays goes down from two to one, but not zero. And because it's not zero, Perl thinks there might still be a way to get to the data, even though there isn't! Thus, we've created a memory leak. A memory leak in a program causes the program to consume more and more memory over time. Ugh. 
=CN 那这两个数组跑出范围会发生什么事？ 噢, 这两个数组的引用计数会从2降为1, 但不是0. 正因为没有归到零, Perl会认为仍有引用会指向这些数据, 尽管已经没有了. 所以, 我们已经创建了一个内存泄漏. 一个程序有内存泄漏会导致消耗越来越多的内存, 噢！
=EN At this point, you're right to think that example is contrived. Of course we would never make a looped data structure in a real program! Actually, programmers often make these loops as part of doubly linked lists, linked rings, or a number of other data structures. The key is that Perl programmers rarely do so because the most important reasons to use those data structures don't apply in Perl. Most of that deals with managing memory and connecting discontiguous memory blocks, which Perl does for us. If you've used other languages, you may have noticed programming tasks that are comparatively easy in Perl. For example, it's easy to sort a list of items or to add or remove items, even in the middle of the list. Those tasks are difficult in some other languages, and using a looped data structure is a common way to get around the language's limitations. 
=CN 现在, 你会想例子总是有意设计出来的. 当然, 我们不会在真实的程序中有意设计一个引用循环. 而实际上, 程序员经常在用双向链表、循环列表或其它一些数据结构时创建这些引用循环. 问题是Perl的程序员罕有犯这种错误的, 重要的原因是Perl不太会用到这些数据结构. 大多数处理内存操作及连接内存碎片的操作已经被Perl自动处理了. 如果你曾使用过其它的语言, 你可能会注意到在Perl中的编程相对比较容易. 比如, 对列表中的元素排序或（甚至在列表中间）添加、删除元素都很方便. 同样的任务在其它语言中会很困难, 而用循环数据结构是绕开这些语言限制的常用方法. 
=EN Why mention it here? Well, even Perl programmers sometimes copy an algorithm from another programming language. There's nothing inherently wrong with doing this, although it would be better to decide why the original author used a "loopy" data structure and then recode the algorithm to use Perl's strengths. Perhaps you should use a hash instead, or perhaps the data should go into an array that will be sorted later. 
=CN 那为什么要在这儿提这些呢？ 是这样的, 因为有些Perl程序员有时也会从其它程序语言中把算法拷贝过来. 这样做当然不会继承错误, 尽管考虑一下原来作者用"循环"数据结构是为什么, 然后用Perl的强项来处理这什算法. 可能你要用个散列, 或用数组, 然后以后进行排序. 
=EN Some upcoming version of Perl is likely to use garbage collection in addition to, or instead of, referencing counting. [*] Until then, we must be careful not to create circular references or, if we do, break the circle before the variables go out of scope. For example, the following code doesn't leak:
=CN 另外, 经后的Perl可能会使用垃圾收集器来代替计数引用. [*] 不过到现在, 我们必须注意不要建立循环引用, 或者, 如果我们做的话, 在变量跑出范围时, 要去掉循环引用. 比如, 下面的代码不会造成内存泄漏：
=EN [*] Just don't ask us about it. We wrote this book a long time before you got a chance to read it, so we didn't exactly know the details back then. 
=CN [*] 不要问我们为什么, 在你有机会读到此书时, 相对我们写书的时间已经是很长久了. 所以我能不能肯定. 
{
 my @data1 = qw(one won);
 my @data2 = qw(two too to);
 push @data2, \@data1;
 push @data1, \@data2;
 … use @data1, @data2 …
 # at the end:
 @data1 = ( );
 @data2 = ( );
}
=EN We eliminated the reference to @data2 from within @data1, and vice versa. Now the data have only one reference each, which all go to zero references at the end of the block. In fact, we can clear out either one and not the other, and it still works nicely. Chapter 13 shows how to create weak references, which can help with many of these problems. 
=CN 我们在@data1中对@data2的引用, 相反也一样. 现在两块数据只有一个引用, 在跑出块范围的时候, 引用计数会归零. 实际上, 我们清除任何一个引用就可以了, 程序一样工作得很好. 第13章会展示如何建立弱引用, 可以对这些问题有些帮助. 
