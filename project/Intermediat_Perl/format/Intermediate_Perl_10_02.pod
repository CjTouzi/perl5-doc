=EN 10. 2. Inserting Code with eval
=CN 10. 2. 用eval插入代码
=EN The Skipper can save disk space (and brain space) by bringing the definition for turn_toward_heading out into a separate file. For example, suppose the Skipper figures out a half-dozen common subroutines related to navigating the Minnow that he seems to use in most or all of the programs he's writing for the task. He can put them in a separate file called navigation. pm, which consists only of the needed subroutines. 
=CN Skipper可以把程序turn_toward_heading的定义独立出为另一个文件以节省磁盘空间（也是脑力空间）. 比如, 如果Skipper发现与导航相关的半打通用子程序, 他可能用在大多数或所有的程序中. 他可以把它们放在一个分开的文件叫做navigation. pm中, 只包含有需要的子程序. 
=EN But now, how can we tell Perl to pull in that program snippet from another file? We could do it the hard way, using the string form of eval that we discussed in Chapter 2. 
=CN 到目前为止, 我们如何告诉Perl从另外一个程序中拉出一块程序代码呢？ 我们可以用硬编码, 第二章所讨论过的用eval的形式来求一个字串的值. 
sub load_common_subroutines {
 open MORE_CODE, 'navigation. pm' or die "navigation. pm: $!";
 undef $/; # enable slurp mode
 my $more_code = <MORE_CODE>;
 close MORE_CODE;
 eval $more_code;
 die $@ if $@;
}
=EN Perl reads the code from navigation. pm into the $more_code variable. We then use eval to process that text as Perl code. Any lexical variables in $more_code remain local to the evaluated code. [*] If there's a syntax error, Perl sets the $@ variable and causes the subroutine to die with the appropriate error message. 
=CN Perl把navigation. pm程序的代码写入变量$more_code. 我们用eval来让Perl把这段文本以代码来处理. 任何$more_code变量中的词法变量被当作本地变量来求值. ［＊］如果其中有语法错误, Perl会设置$@变量, 并且导致程序以适当的出错信息退出. 
=EN [*] Oddly, the variable $more_code is also visible to the evaluated code, not that it is of any use to change that variable during the eval. 
=CN ［＊］奇怪的是, 变量$morecode同样对于求值代码可见, 不像其它eval求值时会改变变量. 
=EN Now, instead of a few dozen lines of common subroutines to place in each file, we simply have one subroutine to insert in each file. 
=CN 现在, 不必在每个文件里的打上几十行通用代码, 我们方便地把一个子程序放到每个文件中. 
=EN But that's not very nice, especially if we need to keep doing this kind of task repeatedly. Luckily, Perl has several ways to help us out. 
=CN 不过这不是最漂亮的, 特别是当我们需要重复这些工作的时候. 好在, Perl 有多种途径来帮助我们. 
