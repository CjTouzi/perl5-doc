=EN Simplifying Nested Element References with Arrows
=CN 用箭头号简化嵌套数组引用
=EN Look at the curly-brace dereferencing again. As in our earlier example, the array reference for Gilligan's provision list is ${$all_with_names[2]}[1]. 
=CN 我们再来看一下用大括号的还原过程. 像先前的例子, 我们对Gilligan的装备清单的数组引用是${$all_with_names[2]}[1]. 
=EN Now, what if we want to know Gilligan's first provision? We need to dereference this item one more level, so it's yet another layer of braces: ${${$all_with_names[2]}[1]}[0]. That's a really noisy piece of syntax. Can we shorten that? Yes!
=CN 那么, 我们现在要访问Gilligan的第一个装备的话, 会怎么样呢？我们需要把这个引用再还原一下, 所以要加上另一层大括号：${${$all_with_names[2]}[1]}[0]. 这样的语法太麻烦了！我们不能简化一下吗？当然可以！
=EN Everywhere we write ${DUMMY}[$y], we can write DUMMY->[$y] instead. In other words, we can dereference an array reference, picking out a particular element of that array by simply following the expression defining the array reference with an arrow and a square-bracketed subscript. 
=CN 在任何写成${DUMMY}[$y]样子的地方, 我们都可以用DUMMY->[$y]这种形式代替. 换句话说, 我们可以这样还原一个数组引用： 用定义一个带箭头的数组引用和一个方括号指定下标的形式表达数组里一个特定的元素. 
=EN For this example, this means we can pick out the array reference for Gilligan with a simple $all_with_names[2]->[1], and Gilligan's first provision with $all_with_names[2]->[1]->[0]. Wow, that's definitely easier on the eyes. 
=CN 对于我们现在的例子来说, 如果我们要得到对Gilligan数组的引用的话, 我们可以简单写成：$all_with_names[2]->[1], 而指明Gilligan的第一个装备清单的写法是：$all_with_names[2]->[1]->[0]. 哇, 看上去真是好多了. 
=EN If that weren't already simple enough, there's one more rule: if the arrow ends up between "subscripty kinds of things, " such as square brackets, we can also drop the arrow. $all_with_names[2]->[1]->[0] becomes $all_with_names[2][1][0]. Now it's looking even easier on the eyes. 
=CN 如果你觉得还不够简洁的话？那我们还有条规则：如果箭头是在"类似于下标"中间的话, 那么箭头也可以省去. $all_with_names[2]->[1]->[0]变成了$all_with_names[2][1][0]. 现在样子看上去更简洁了. 
=EN The arrow has to be between non-subscripty things. Why wouldn't it be between subscripty things? Well, imagine a reference to the array @all_with_names:
=CN 那为什么箭头必须在非下标符号间存在呢?好, 如果我们有一个指向数组@all_with_names的引用：
=EN Now how do we get to Gilligan's first item?
=CN 现在我们如何时取得Gilligan的第一个装备呢？
=EN More simply, using the "drop arrow" rule, we can use:
=CN 很简单, 用"去箭头"规则, 我们可以写成：
=EN We cannot drop the first arrow, however, because that would mean an array @root's third element, an entirely unrelated data structure. Let's compare this to the full curly-brace form again:
=CN 然而, 第一个箭头不能舍去, 因为这会表示root数组的第三个元素, 成了一个完全无关的数据结构. 让我们再与它"全包装"的形式再做一个比较：
=EN It looks much better with the arrow. Note, however, that no shortcut gets the entire array from an array reference. If we want all of Gilligan's provisions, we say:
=CN 看来用箭头比较爽. 不过, 注意, 没有快捷办法从一个数组引用中取出整个数组内容. 比如, 我们要找出Gilligan装备清单的话, 可以这样写：
=EN Reading this from the inside out, we can think of it like this:
=CN 应该按下面的顺序来从里往外读：
=EN Take $root. 
=CN 取变量$root. 
=EN Dereference it as an array reference, taking the third element of that array (index number 2). 
=CN 把它先还原成一个指向数组的引用, 取出那个数组中第三个元素（序号为2）
=EN Dereference that as an array reference, taking the second element of that array (index number 1). 
=CN 用同样的方法取出那个数组第二个元素（序号为1）
=EN Dereference that as an array reference, taking the entire array. 
=CN 然后把整个数组还原出来. 
=EN The last step doesn't have a shortcut arrow form. Oh well. [*]
=CN 得, 最后一步不必要箭头快捷方式了. 
=EN It's not that it hasn't been discussed repeatedly by the Perl developers; it's just that nobody has come up with a nice backward-compatible syntax with universal appeal. 
=CN 这并非没有被Perl开发者重复讨论过;那只不过是没有人能提供一个得到广泛认可的向后兼容的办法. 
