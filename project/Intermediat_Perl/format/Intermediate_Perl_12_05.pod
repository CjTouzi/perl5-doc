=EN 12. 5. Inheriting the Constructor
=CN 12. 5. 继承构建函数
=EN Was there anything specific to Horse in that method? No. Therefore, it's also the same recipe for building anything else inherited from Animal, so let's put it there:
=CN 对于那个方法中Horse类有其它特殊的吗？ 没有. 因此, 它同样可以继承自Animal类, 所以我们可以把它放到这儿：
{ package Animal;
 sub speak {
 my $class = shift;
 print "a $class goes ", $class->sound, "!\n"
 }
 sub name {
 my $self = shift;
 $$self;
 }
 sub named {
 my $class = shift;
 my $name = shift;
 bless \$name, $class;
 }
}
{ package Horse;
 @ISA = qw(Animal);
 sub sound { 'neigh' }
}
=EN Ahh, but what happens if we invoke speak on an instance?
=CN 嗯, 但如果我们在实例上调用speak会发生什么呢？
my $tv_horse = Horse->named('Mr. Ed');
$tv_horse->speak;
=EN We get a debugging value:
=CN 我们会得到一个测试值：
a Horse=SCALAR(0xaca42ac) goes neigh!
=EN Why? Because the Animal::speak method expects a class name as its first parameter, not an instance. When we pass in the instance, we'll use a blessed scalar reference as a string, which shows up as we showed it just now similar to a stringified reference, but with the class name in front. 
=CN 为什么呢?因为Animal::speak方法期一个类名作为它的第一个参数, 而不是一个实例. 当我们传一个实例时, 我们会把"祝福"过的标量引用当作一个字串, 就像我们直接打印一个引用一样, 不过是前面有个类名提示. 
