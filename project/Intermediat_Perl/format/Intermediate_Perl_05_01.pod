=EN More Than One Reference to Data
=CN 更多有关对数据进行引用的故事
=EN Chapter 4 explored how to take a reference to an array @skipper and place it into a new scalar variable
=CN 在第四章里, 我们了解了如何取一个数组@skipper的引用, 并把它放到一个新建的标量变量中
=EN We can then copy the reference or take additional references, and they'll all refer to the same thing and are interchangeable:
=CN 我们现在就可以拷贝这个引用或把它传给另外一些引用, 并且, 它们全都指向同一数据, 并且是互相可替换的：
=EN At this point, we have four different ways to access the data contained in @skipper:
=CN 现在, 我们有四种途径来访问保存在@skipper中的数据：
=EN Perl tracks how many ways it can access the data through a mechanism called reference counting. The original name counts as one, and each additional reference that we create (including copies of references) also counts as one. The total number of references to the array of provisions is now four. 
=CN Perl跟踪有多少途径在访问数据的机制叫做"引用计数". 原来的名字计数为1, 其它我们创建的每一个引用（包括对引用的拷贝）同样被计数. 就目前的例子, 装备清单数组的目前引用数是4. 
=EN We can add and remove references as we wish, and as long as the reference count doesn't hit zero, Perl maintains the array in memory and it is still accessible via any of the other access paths. For example, we might have a temporary reference:
=CN 我们可以任意添加和删除引用, 并且, 只要引用计算不减到0, Perl就会在内存中保留这个数组, 并且能通过任何其它的途径来访问这个数组. 比如, 我们可能有一个临时引用：
=EN When this subroutine executes, Perl creates a fifth reference to the data and copies it into @_ for the subroutine. The subroutine is free to create additional copies of that reference, which Perl notes as needed. Typically, when the subroutine returns, Perl discards all such references automatically, and you're back to four references again. 
=CN 当这个子程序执行的时候, Perl会创建指向这个数组的第五个引用, 并将其拷贝到这个子程序的特殊变量@_中. 子程序可以很自由的为那个引用创建更多的拷贝, 而Perl则会适时的关注. 一般来说, 当子程序返回的时候, Perl会自动扔掉所有这些子程序创建的引用, 这样你又回到了4个引用. 
=EN We can kill off each reference by using the variable for something other than a reference to the value of @skipper. For example, we can assign undef to the variable:
=CN 我们用给引用赋任何一个与指向@skipper引用无关的其它的变量就可以切断引用关系了. 比如, 我们可以给变量分配一个undef给变量：
$reference_to_skipper = undef;
=EN Or, maybe we just let the variable go out of scope:
=CN 或者, 我们可以仅仅让变量跑出范围就可以了：
=EN In particular, a reference held in a subroutine's private (lexical) variable goes away at the end of the subroutine. 
=CN 要指出的是, 在一个子程序的私有（词法）变量保存的一个引用, 会在子程序结束时被释放. 
=EN Whether we change the value, or the variable itself goes away, Perl notes it as an appropriate reduction in the number of references to the data. 
=CN 不管是我们改变变量的值, 或者变量跑出范围, Perl会注意到这些, 并且适当的减少对数据的引用计数. 
=EN Perl recycles the memory for the array only when all references (including the name of the array) go away
=CN 只有这个数组的所有引用（包括数组名）都没有了, Perl才会回收这个数组占用的内存 
=EN In this case, Perl only reclaims memory when @skipper and all the references we created to it disappear
=CN 在上例中, 只有在@skipper数组及我们所有对它的引用全消失后, Perl才会回收内存
=EN Such memory is available to Perl for other data later in this program invocation, and generally Perl doesn't give it back to the operating system. 
=CN 这些被释放的内存会被Perl安排用在程序中之后的其它数据的调用, 一般来说Perl不会把这些内存还给操作系统. 
