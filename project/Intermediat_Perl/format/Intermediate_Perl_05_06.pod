=EN Creating an Anonymous Hash
=CN 创建匿名散列
=EN Similar to creating an anonymous array, you can also create an anonymous hash. Consider the crew roster from Chapter 4:
=CN 同创建匿名数组类似, 你也可以建立一个匿名散列. 考虑一下第四章的船员注册程序：
=EN The variables %gilligan_info and %skipper_info are just temporaries we needed to create the hashes for the final data structure. We can construct the reference directly with the anonymous hash constructor, which is yet another meaning for curly braces, as we'll see. We can replace this:
=CN 散列变量%gilligan_info和%skipper_info是为了最终数据结构而建立的临时变量. 下面我们就构造一个对匿名散列的直接引用, 正像我们看到的, 花括号的另一项功能. 替代代码如下：
=EN with the anonymous hash constructor:
=CN 如果用匿名散列的话：
=EN The value between the open and closing curly braces is an eight-element list. The eight-element list becomes a four-element anonymous hash (four key/value pairs). Perl takes a reference to this hash and returns as a single scalar value, which we assign to the scalar variable. Thus, we can rewrite the roster creation as:
=CN 被花括号括起来的是八个元素的列表. 八个元素的列表也就变成了四个元素的匿名数组（四个键／值对）. Perl会取这个散列的引用, 并返回一个标量值, 并送给一个标量变量. 所以我们可以改写程序如下：
=EN As before, we can now avoid the temporary variables and insert the values directly into the top-level list:
=CN 同前面一样, 我们还是可以避免使用临时变量, 把散列值直接放到列表里：
=EN Note we use trailing commas on the lists when the element is not immediately next to the closing brace, bracket, or parenthesis. This is a nice style element to adopt because it allows for easy maintenance. We can add or rearrange lines quickly, or comment out lines without destroying the integrity of our list. 
=CN 注意列表结束时的元素并非马上连着关闭的花括号, 方括号或小括号, 而是以逗号结尾. 这是很好的编程风格, 因为这样做有利于代码维护. 我们可以很方便的添加或重排行, 或者不破坏列表完整性的情况下注释掉代码. 
=EN Now @crew is identical to the value it had before, but we no longer need to invent names for the intermediate data structures. As before, the @crew variable contains two elements, each of which is a reference to a hash containing keyword-based information about a particular crew member. 
=CN 现在@crew里所包含的值同先前是一样的, 但不再需要为中间数据结构起名字了. 就像上一个版本一样, @crew包含两个元素, 每个元素都是一个指向一个包含以键为基础的散列, 表示了船上成员的特殊信息. 
=EN The anonymous hash constructor always evaluates its contents in a list context and then constructs a hash from key/value pairs, just as if we had assigned that list to a named hash. Perl returns a reference to that hash as a single value that fits wherever a scalar fits. 
=CN 匿名散列构造器总是把内容放在列表环境, 并把他们以键／值对的形式输出, 就像我们分配那个列表给命名散列一样. Perl返回一个那个散列的引用, 并将其作为标量值, 并适合任何标量合适的地方. 
=EN Now, a word from our parser:
=CN 现在, 下面一些话是从我们的解释器那里来：
=EN because blocks and anonymous hash constructors both use curly braces in roughly the same places in the syntax tree, the compiler has to make ad hoc determinations about which of the two you mean.
=CN 因为代码块和匿名散列构造器都用花括号, 在语法树中大致相同的位置, 编译器不得不即时判断你到底是要用哪一个.
=EN If the compiler ever decides incorrectly, you might need to provide a hint to get what you want. 
=CN 如果编译器没法决定, 就需要你给个暗示, 你到底是用哪个.
=EN To show the compiler that you want an anonymous hash constructor, put a plus sign before the opening curly brace: +{. . . }.
=CN 如果你是要用匿名散列, 那你要在花括号前加一个正号：+{…}. 
=EN To be sure to get a block of code, just put a semicolon (representing an empty statement) at the beginning of the block: {;. . . }. 
=CN 如果你是用代码块, 则要在花括号后加上分号：{; … }. 
