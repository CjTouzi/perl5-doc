=EN 3. 2. Using Modules
=CN 3. 2. 使用模块
=EN Almost every Perl module comes with documentation, and even though we might not know how all of the behind-the-scenes magic works, we really don't have to worry about that stuff if we know how to use the interface. That's why the interface is there, after all: to hide the details. 
=CN 几乎所有的Perl模块都带有文档说明. 所以尽管我们可能不知道那些模块背后的戏法是怎么变的, 如果我们知道如何使用接口, 我们就不必去担心那些细节. 这就是在这里介绍接口的原因, 毕竟：它屏蔽了复杂性. 
=EN On our local machine, we can read the module documentation with the perldoc command. We give it the module name we're interested in, and it prints out its documentation. 
=CN 在我们的本机当中, 我们可以用perldoc命令来调出模块文档. 我们输入我们要查的模块的名字, 然后perldoc打印出文档内容：
=EN We've included the top portion of the documentation to show you the most important section (at least, the most important when you're starting). Module documentation typically follows the old Unix manpage format, which starts with a NAME and SYNOPSIS section. 
=CN 我们在这里列出了文档的一般结构（至少是最重要的部分）. 模块文档是按Unix旧文档格式组织的, 以NAME和SYNOPSIS开始. 
=EN The synopsis gives us examples of the module's use, and if we can suspend understanding for a bit and follow the example, we can use the module. That is to say, it may be that you're not yet familiar with some of the Perl techniques and syntax in the synopsis, but you can generally just follow the example and make everything work. 
=CN synopsis节给我们关于这个模块的用法的例子, 这样我们就可以稍微理解了用法就可以使用这个模块. 就是说, 这可以使你在还没有熟悉Perl技术和语法的情况下, 仅仅看这些例子, 就可以使程序工作起来. 
=EN Now, since Perl is a mix of procedural, functional, object-oriented, and other sorts of language types, Perl modules come in a variety of different interfaces. We'll employ these modules in slightly different fashions, but as long as we can check the documentation, we shouldn't have a problem. 
=CN 如今, 因为Perl成了一个过程的、函数的、面向对象和其它各种语言类型的混合体, Perl模块文档开始有不同的接口. 我们会在不同的模块使用稍微不同风格的文档, 但是只要我们可以查文档, 我们就不会有问题. 
