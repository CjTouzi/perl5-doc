=EN Nested Data Structures
=CN 数据结构嵌套
=EN In this example, the array @_ contains two elements, one of which is also an array. What if we take a reference to an array that also contains a reference to an array? We end up with a complex data structure, which can be quite useful. 
=CN 在前例中, 我们的数组@_有两个元素, 其中一个同样是个数组. 如果一个引用所指向的数组中还包含着另外一个指向数组的引用会是什么情况？那就成了非常有用的所谓复杂数据结构. 
=EN For example, we can iterate over the data for the Skipper, Gilligan, and the Professor by first building a larger data structure holding the entire list of provision lists:
=CN 举个例子, 我们首先用个更大点儿的数据结构包含skipper, Gilligan和Professor供应清单的整个列表. 
=EN At this point, @skipper_with_name has two elements, the second of which is an array reference similar to what we passed to the subroutine. Now we group them all:
=CN 现在, @skipper_with_name有两个元素, 第二个元素就是指向数组的引用, 就是上例中我们传给子例程的那个. 现在, 我们把它们组织起来：
=EN Note that we have just three elements, each of which is a reference to an array that has two elements: the name and its corresponding initial provisions. A picture of that is in Figure 4-1. 
=CN 注意, 现在我们的结构中有三个元素, 其中每个元素指向另外一个数组, 而那个数组又包含两个元素：名字和相名字相应的初始装备清单. 具体的样子可以看图例4-1:
=EN Figure 4-1. The array @all_with_names holds a multilevel data structure containing strings and references to arrays
=CN 图 4-1. 数组@all_with_name包含一个多层的数据结构, 包括字串和指向另一数组的引用. 
=EN Therefore, $all_with_names[2] will be the array reference for the Gilligan's data. If you dereference it as @{$all_with_names[2]}, you get a two-element array, "Gilligan" and another array reference. 
=CN 这样, $all_with_names[2]里放的是指向数组的引用, 内中存放的是Gilligan的数据. 如果将其还原, 像这样：@{$all_with_names[2]}, 你就是得到一个有两个元素的数组：Gilligan和另一个数组引用. 
=EN How do we access that array reference? Using our rules again, it's ${$all_with_names[2]}[1]. In other words, taking $all_with_names[2], we dereference it in an expression that would be something like $DUMMY[1] as an ordinary array, so we'll place {$all_with_names[2]} in place of DUMMY. 
=CN 我们如何才能访问那个数组引用呢？用我们的老规矩：${$all_with_names[2]}[1]. 换句话说, 我们在一个表达式中像$DUMMY[1]形式那样把$all_with_names[2]还原成一个一平常的数组, 就是说用{$all_with_names[2]}代替DUMMY的位置. 
=EN How do we call the existing check_required_items( ) with this data structure? The following code is easy enough. 
=CN 那我们如何用这个数据结构来调用现存的check_required_items( )? 下面的代码足够简单：
=EN This requires no changes to the subroutine. The control variable $person will be each of $all_with_names[0], $all_with_names[1], and $all_with_names[2], as the loop progresses. When we dereference $$person[0], we get "Skipper, " "Professor, " and "Gilligan, " respectively. $$person[1] is the corresponding array reference of provisions for that person. 
=CN 这样对于以前写的子例程不需要做任何改变. 随着循环进程, 控制变量$person将会是$all_with_names[0], $all_with_names[1]和$all_with_names[2]. 当我们还原$$person[0], 我们会得到"Skipper, ""Professor, "和"Gilligan, "相应的, $$persion[1]是各个乘客所对应的装备清单数组. 
=EN Of course, we can shorten this as well, since the entire dereferenced array matches the argument list precisely:
=CN 当然, 我们可以把这个过程再简化, 因为整个还原数组与参数清单精确对应：
=EN or even:
=CN 甚至还可以更过分：
check_required_items(@$_) for @all_with_names;
=EN As you can see, various levels of optimization can lead to obfuscation. Be sure to consider where your head will be a month from now when you have to reread your own code. If that's not enough, consider the new person who will take over your job after you have left. [*]
=CN 正如你们看到的那样, 不同的优化层次会导致代码明晰性的困惑. 所以写代码的时候要考虑一下一个月后, 当你重读这些代码的时候你会如何理解. 或者, 当你离开这个岗位后, 接替你的人是否会看懂这段代码. 
=EN O'Reilly Media has a great book to help you be nice to the next guy. Perl Best Practices by Damian Conway has 256 tips on writing more readable and maintainable Perl code. 
=CN 奥莱利公司有一大坨的书来帮助你写出好读的代码来应付接替你的家伙. Damian Conway ＜Perl 最佳实践＞列出了有关代码可读性和可维护性的256条锦囊妙计. 
