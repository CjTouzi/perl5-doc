=EN 7. 2. Anonymous Subroutines
=CN 7. 2. 匿名子程序
=EN In that last example, we never explicitly called subroutines such as professor_greets( ), we only called them indirectly through the coderef. Thus, we wasted some brain cells to come up with a name for the subroutine used only in one other place, to initialize the data structure. But, just as we can create anonymous hashes and arrays, we can create anonymous subroutines !
=CN 在最后那个例子中, 我们并没有显式的调用子程序, 如profressor_greets( ), 我们只是间接通过代码引用来调用它. 所以, 为了初始化一个数据结构, 我们仅仅因为在其它地方使用而给子程序提供名字纯属浪费脑筋. 但是, 就像我们可以建立匿名数组和匿名散列一样, 我们也可能建立一个匿名的子程序！
=EN Let us add another island inhabitant: Ginger. But rather than define her greeting behavior as a named subroutine, we create an anonymous subroutine:
=CN 让我们再添加一个岛上的居民：Ginger. 但是不同于用命名子程序来给她定义行为, 我们可能建立一个匿名子程序：
my $ginger = sub {
 my $person = shift;
 print "Ginger: (in a sultry voice) Well hello, $person!\n";
};
$ginger->('Skipper');
=EN An anonymous subroutine looks like an ordinary sub declaration, but there's no name (or prototype) between sub and the block that follows. It's also part of a statement, so we need a trailing semicolon or other expression separator after it in most cases. 
=CN 一个匿名子程序看上去像一个平常的子程序声明, 只是没有名字（或原型声明）在sub关键字和紧随的代码块之间. 这同样是声明的一部份, 所以在大多数情况下, 我们需要结尾的分号, 或者其它的表达式分隔符. 
sub { … body of subroutine … };
=EN The value in $ginger is a coderef, just as if we had defined the following block as a subroutine and then taken a reference to it. When we reach the last statement, we see:
=CN $ginger的值是一个代码引用, 就像我们在其后定义了子程序一样, 然后返回引用给它. 当我们到达最后一行, 我们看到：
Ginger: (in a sultry voice) Well hello, Skipper!
=EN Although we kept the value in a scalar variable, we could have put that sub { ... } construct directly into the initialization of the greetings hash:
=CN 尽管我们可以把代码引用作为标量值保存, 但我们也可以直接把sub {...} 代码块直接放在初始化的greetings散列中：
my %greets = (
 Skipper => sub {
 my $person = shift;
 print "Skipper: Hey there, $person!\n";
 }, 
 Gilligan => sub {
 my $person = shift;
 if ($person eq 'Skipper') {
 print "Gilligan: Sir, yes, sir, $person!\n";
 } else {
 print "Gilligan: Hi, $person!\n";
 }
 }, 
 Professor => sub {
 my $person = shift;
 print "Professor: By my calculations, you must be $person!\n";
 }, 
 Ginger => sub {
 my $person = shift;
 print "Ginger: (in a sultry voice) Well hello, $person!\n";
 }, 
);
my @room; # initially empty
for my $person (qw(Gilligan Skipper Professor Ginger)) {
 print "\n";
 print "$person walks into the room. \n";
 for my $room_person (@room) {
 $greets{$person}->($room_person); # speaks
 $greets{$room_person}->($person); # gets reply
 }
 push @room, $person; # come in, get comfy
}
=EN Notice how much it simplifies the code. The subroutine definitions are right within the only data structure that references them directly. The result is straightforward:
=CN 注意我们简化了多少行代码. 子程序的定义现在直接放在数据结构中. 结果相当直观：
Gilligan walks into the room. 
Skipper walks into the room. 
Skipper: Hey there, Gilligan!
Gilligan: Sir, yes, sir, Skipper!
Professor walks into the room. 
Professor: By my calculations, you must be Gilligan!
Gilligan: Hi, Professor!
Professor: By my calculations, you must be Skipper!
Skipper: Hey there, Professor!
Ginger walks into the room. 
Ginger: (in a sultry voice) Well hello, Gilligan!
Gilligan: Hi, Ginger!
Ginger: (in a sultry voice) Well hello, Skipper!
Skipper: Hey there, Ginger!
Ginger: (in a sultry voice) Well hello, Professor!
Professor: By my calculations, you must be Ginger!
=EN Adding a few more castaways is as simple as putting the entry for the greeting behavior into the hash and adding them into the list of people entering the room. We get this scaling of effort because we have preserved the behavior as data over which you can iterate and look up, thanks to your friendly subroutine references. 
=CN 添加更多的旅客就变成了简单的把问候行为放到散列中, 并把他们加入到进入房间的人名清单中. 我们在效率上得到扩展, 因为我们把程序行为保存为数据, 并通过它可以查找和迭代, 这要感谢友好的子程序引用. 
