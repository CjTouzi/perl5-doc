=EN A Horse Is a Horse, of Course of Courseor Is It?
=CN 一匹马属于马类, 各从其类是吗？
=EN Let's look at the code used in Chapter 11 for the Animal classes and Horse classes:
=CN 让我们看一下我们在第11章用于表示动物类和马类的代码：
=EN This lets us invoke Horse->speak to ripple upward to Animal::speak, calling back to Horse::sound to get the specific sound, and the output of:
=CN 这样, 让我们调用Horse->speak从而会找到Animal::speak, 然后会回调Horse::sound来取得特定的声音, 其输出是：
=EN But all Horse objects would have to be absolutely identical. 
=CN 但是所有的Horse对象都必须完全相同. 
=EN If we add a method, all horses automatically share it.
=CN 如果我们加了一个方法, 则所有的horses对象都自动共享它.
=EN That's great for making horses identical, but how do we capture the properties of an individual horse?
=CN 这对于保持对象都有的共性这点很好, 但是如何捕捉到每个horse个体的属性呢？
=EN For example, suppose we want to give our horse a name.
=CN 比如说, 假定我们要给我们的马取个名字. 
=EN There's got to be a way to keep its name separate from those of other horses. 
=CN 应该有个方法来区分它的名字与其它马的名字. 
=EN We can do so by establishing an instance.
=CN 我们可以建立一个实例来实现这个功能.
=EN An instance is generally created by a class, much like a car is created by a car factory.
=CN 一个实例一般来说根据一个类创建, 就是汽车由汽车工厂生产一样.
=EN An instance will have associated properties, called instance variables
=CN 一个实例有其关联的属性, 称为实例的变量
=EN or member variables, if you come from a C++ or Java background 
=CN 或者叫成员变量, 如果你有C++或Java背景的话
=EN An instance has a unique identity (like the serial number of a registered horse), shared properties (the color and talents of the horse), and common behavior
=CN 每个实例有个惟一标识（有些像注册过的赛马的序列号一样）, 共享属性（赛马的毛色与出色的体力）, 和一般的行为
=EN e. g. , pulling the reins back tells the horse to stop 
=CN 比如拉缰绳告诉马要停下 
=EN In Perl, an instance must be a reference to one of the built-in types. Start with the simplest reference that can hold a horse's name, a scalar reference:
=CN 在Perl中, 一个实例必须是一个对内建类的引用. 通过最简单的引用可以保存马的名字, 一个标量引用：
=EN It's the simplest, but rarely used in real code for reasons we'll show shortly. 
=CN 这是最简单的, 但鲜有在实际的代码中使用, 原因我们后面会说到. 
=EN Now $tv_horse is a reference to what will be the instance-specific data (the name). The final step in turning this into a real instance involves a special operator called bless:
=CN 现在$tv_horse是对一个实例数据（马的名字）的引用. 最后一步就是把它变成一个真实的实例, 这要么一个专门的操作符叫bless:
bless $tv_horse, 'Horse';
=EN The bless operator follows the reference to find what variable it points to in this case, the scalar $name.
=CN bless操作符根据引用找到其指的变量, 在这个例子中, 是标量$name.
=EN Then it "blesses" that variable, turning $tv_horse into an object a Horse object, in fact. 
=CN 那么它就"祝福"那个变量, 将$tv_horse转变成一个Horse对象.
=EN Imagine that a little sticky-note that says Horse is now attached to $name.
=CN 想象一个小的标签说那匹马现在与$name关联在一起了.
=EN At this point, $tv_horse is an instance of Horse. [] That is, it's a specific horse. The reference is otherwise unchanged and can still be used with traditional dereferencing operators.
=CN 这下, $tv_horse现在是Horse的一个实例. [+] 那就是, 它现在是一个不同的马了. 而引用并没有改变什么, 它仍然可以以传统的还原操作符还原. [+]
=EN Actually, $tv_horse points to the object, but, in common terms, we nearly always deal with objects by references to those objects. Hence, it's simpler to say that $tv_horse is the horse, not "the thing that $tv_horse references. "
=CN 实际上, $tv_horse指向一个对象, 但是, 在常用的术语来说, 我们几乎总是用引用与对象打交道来处理对象的. 之后, 我们就可以简单地说$tv_horse就是马, 而不是"$tv_horse引用的那个东西"
=EN Although doing so outside the class is a bad idea, as we'll show later. 
=CN 尽管在一个类之外做这事是个糟糕的想法, 这个我们会在后面解说. 
