=EN The Problem of Namespace Collisions
=CN 名字空间冲突的问题
=EN Sometimes the Skipper runs a ship into an island, but sometimes the collision involved is just a couple of names in a Perl program.
=CN 有时候Sipper要把船开进一个小岛, 但有时程序里会发生一对名字发生冲突的情况. 
=EN Suppose that the Skipper has added all his cool and useful routines to navigation. pm and that Gilligan has incorporated the library into his own navigation package, head_toward_island:
=CN 假定Skipper把他的所有的有用和酷的子程序加到navigation. pm中, 而Gilligan已经导入他自己的导航程序包, head_toward_island:
=EN Gilligan then has his program debugged (perhaps with the aid of a smart person whom we'll call "the Professor"), and everything works well. 
=CN Gilligan开始调试自己的程序（可能有一个有个聪明的人在帮他, 我们叫他"教授"）, 一切顺利. 
=EN However, now the Skipper decides to modify his navigation. pm library, adding a routine called turn_toward_port that makes a 45-degree turn toward the left (known as "port" in nautical jargon). 
=CN 然而, 现在Skipper决定修改他的navigation. pm库, 加一个子程序：turn_toward_port, 使船可以以45度角向左舷转向（航海术语, 左舷是靠向岸的舷）. 
=EN Gilligan's program will fail in a catastrophic way as soon as he tries to head to port: he'll start steering the ship in circles!
=CN Gilligan的程序总是在他准备转向岸时就出现灾难：他会使船总是转圈！
=EN The problem is that the Perl compiler first compiles turn_toward_port from Gilligan's main program, then when Perl evaluates the require at runtime, it redefines turn_toward_port as the Skipper's definition.
=CN 问题在于Perl编译器开始编译Gilligan主程序中的turn_toward_port, 然后当Perl在运行时解析require时, 它以Skipper的定义的turn_toward_port重新定义了这个程序. 
=EN Sure, if Gilligan has warnings enabled, he'll notice something is wrong, but why should he have to count on that
=CN 当然, 录果Gilligan打开了警告, 他会注意有出错信息, 但他为什要仰赖这个呢
=EN The problem is that Gilligan defined turn_toward_port as meaning "turn toward the port on the island, " while the Skipper defined it as "turn toward the left. "
=CN 问题在于Gilligan定义的turn_toward_port的作用是"把左舷靠向岛", 而Skipper的定义是"向左转".
=EN How do we resolve this?
=CN 如何来解决这个问题呢？
=EN One way is to require that the Skipper put an explicit prefix in front of every name defined in the library, say, navigation_. Thus, Gilligan's program ends up looking like:
=CN 一种方法是需要Skipper加个显式的前缀在每个他定义的库中的程序名上, 比如, navigation_. 这样, Gilligan的程序看上去是这样的：
=EN Clearly, the navigation_turn_toward_heading comes from the navigation. pm file.
=CN 这样就明白了, navigation_turn_toward_heading来自于navigation. pm文件. 
=EN This is great for Gilligan but awkward for the Skipper, as his file now has longer subroutine names:
=CN 这对Gilligan是不错, 不过让Skipper很窘, 因为他的程序现在有很长的程序名：
=EN Yes, every scalar, array, hash, filehandle, or subroutine now has to have a navigation_ prefix in front of it to guarantee that the names won't collide with any potential users of the library.
=CN 是的, 每个标量, 数组名, 散列, 文件句柄或者子程序现在都必须加上一个navigation_ 前缀, 这样才能保证不与其它的库里潜在的用户发生冲突.
=EN Obviously, for that old sailor, this ain't gonna float his boat. What do we do instead?
=CN 显然, 对于老水手来说, 他是不会干这种事的. 我们能用什么替代方案呢？
