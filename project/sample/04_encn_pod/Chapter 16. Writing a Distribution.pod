=EN Writing a Distribution In Chapter 15, we created a fictional Island::Plotting::Maps module and built the right support for Exporter so that we could include use Island::Plotting::Maps in a program.

=CN Writing a Distribution In Chapter 15, We Created a 虚构的 Island::Plotting::Maps Module And Built The Right Support For Exporter So That We Could Include Use Island::Plotting::Maps In a Program.

=EN While the resulting .pm file was useful, it wasn't very practical.

=CN While The 造成 .Pm File Was Useful, It Wasn't Very 实用的.

=EN We have a lot more work to do before we can share our work, whether that means simply installing it ourselves on another one of our machines or giving it to someone else to use.

=CN We Have a 许多 More Work To Do Before We Can 份 Our Work, Whether That Means Simply installing It 我们自己 On 另一个 One Of Our Machines Or Giving It To Someone Else To Use.

=EN Installation location

=CN Installation 地点

=EN How does everything get in the right place so Perl can find it?

=CN How Does Everything Get In The Right Place So Perl Can 寻找 It?

=EN Where is our code going to be stored on the system?

=CN Where Is Our Code Going To Be Stored On The System?

=EN Can users make it available to everyone on the system because they have root or administrator privileges, or do they have to install it in their own directories?

=CN Can Users Make It Available To Everyone On The System Because They Have Root Or administrator privileges, Or Do They Have To 安装 It In Their Own directories?

=EN Documentation

=CN 文档

=EN Where is the documentation for the module?

=CN Where Is The 提供文件 For The Module?

=EN How is the documentation installed so the user can read it?

=CN How Is The 提供文件 安装 So The User Can Read It?

=EN Archive completeness

=CN 存档文件 completeness

=EN Is there anything extra that the users of our software will need?

=CN Is There Anything Extra That The Users Of Our 软件 Will Need?

=EN What else do I have to include with my code to make it usable?

=CN What Else Do I Have To Include With My Code To Make It Usable?

=EN How do we know our software works?

=CN How Do We Know Our 软件 Works?

=EN Have we verified that it does what we say it does?

=CN Have We verified That It Does What We Say It Does?

=EN How do we know it works the same on other operating systems or versions of Perl?

=CN How Do We Know It Works The Same On Other Operating 系统 Or Versions Of Perl?

=EN C-language interfaces

=CN C-语言 接口

=EN If our module contains C or C++ code (not covered here), how can the developer describe how to compile and link the code in the developer's environment or the end user environment?

=CN If Our Module 包含 C Or C++ Code (Not covered Here), How Can The developer 描写 How To Compile And 联系 The Code In The developer's 环境 Or The End User 环境?

=EN There's More Than One Way To Do It A distribution contains the module (or collection of related modules), plus all the support files required to document, test, ship, and install the module.

=CN There's More Than One Way To Do It A 分配 包含 The Module (Or Collection Of Related Modules), Plus All The Support Files 要求 To Document, Test, 船, And 安装 The Module.

=EN While you could potentially construct all these files by hand, it's much simpler to use something to do it for you.

=CN While You Could 潜在 Construct All These Files By Hand, It's Much simpler To Use Something To Do It For You.

=EN In the beginning, [*] we had to create modules by hand.

=CN In The 开端, [*] We Had To Create Modules By Hand.

=EN Soon after, the h2xs program grew into a module distribution creator, and that worked well for a while.

=CN Soon After, The h2xs Program grew Into a Module 分配 creator, And That 工作 Well For a While.

=EN Andy Lester created Module::Starter to make a better starter distribution, Jim Keenan created ExtUtils::ModuleMaker to make a better h2xs, and many other module creation systems popped up.[]

=CN Andy Lester Created Module::Starter To Make a Better starter 分配, Jim Keenan Created ExtUtils::ModuleMaker To Make a Better h2xs, And Many Other Module 创造 系统 popped Up.[]

=EN [*] Well, since Perl 5 at least, when the third party module system came into being.

=CN [*] Well, Since Perl 5 At Least, When The 第三 聚会 Module System 来 Into Being.

=EN [] brian simply creates a template directory he processes with ttree from Template::Toolkit.

=CN [] brian Simply Creates a template Directory 他 Processes With ttree From Template::Toolkit.

=EN You can read about it in the December 2004 issue of The Perl Journal at http://www.tpj.com/documents/s=9622/tpj0412e/0412e.html.

=CN You Can Read About It In The December 2004 发行发布 Of The Perl Journal At http://www.tpj.com/documents/s=9622/tpj0412e/0412e.html.

=EN No matter which way we create our distribution or which tools we use, the process is the same.

=CN No Matter Which Way We Create Our 分配 Or Which Tools We Use, The 程序 Is The Same.

=EN We run a Perl script that creates a file that pulls together all the information it needs to prepare and install the code.

=CN We Run a Perl 临时单据 That Creates a File That pulls Together All The Information It Needs To 准备 And 安装 The Code.

=EN From there, we can test and install the modules.

=CN From There, We Can Test And 安装 The Modules.

=EN If we are using the traditional Makefile.PL, we start the installation with:

=CN If We Are Using The 传统的 Makefile.PL, We Start The 安装 With:

=EN $ perl Makefile.PL

=CN $ Perl Makefile.PL

=EN After that, we can test and install the module by telling make to perform the actions for those targets.[]

=CN After That, We Can Test And 安装 The Module By telling Make To 执行 The 行动 For Those targets.[]

=EN [] We can specify the test and install targets in the same make invocation.

=CN [] We Can Specify The Test And 安装 targets In The Same Make 调用.

=EN If make encounters an error, it won't go on.

=CN If Make encounters An Error, It Won't Go On.

=EN $ make all test install

=CN $ Make All Test 安装

=EN We may not want to use a Makefile.PL, though.

=CN We May Not Want To Use a Makefile.PL, Though.

=EN It relies on the external program make, which, since it started life as a Unix tool, may not be available on all systems.[Â§] Ken Williams created the pure-Perl Module::Build system as a make replacement.

=CN It relies On The External Program Make, Which, Since It 开始 生活 As a Unix 工具, May Not Be Available On All 系统.[Â§] Ken Williams Created The 纯洁的-Perl Module::Build System As a Make Replacement.

=EN Since we know that we must already have Perl installed and that Perl is portable, we can use it to install modules.

=CN Since We Know That We Must Already Have Perl 安装 And That Perl Is 手提的, We Can Use It To 安装 Modules.

=EN [Â§] There is an nmake for Windows that is available from Microsoft.

=CN [Â§] There Is An nmake For 微软视窗操作系统 That Is Available From Microsoft.

=EN The Module::Build process looks the same, except that we start with a Build.PL file.

=CN The Module::Build 程序 Looks The Same, Except That We Start With a Build.PL File.

=EN $ perl Build.PL

=CN $ Perl Build.PL

=EN From there, we do the same sort of thing we did before.

=CN From There, We Do The Same Sort Of Thing We Did Before.

=EN perl Build perl Build test perl Build install

=CN Perl Build Perl Build Test Perl Build 安装

=EN There are reasons to decide to use one or the other.

=CN There Are Reasons To Decide To Use One Or The Other.

=EN The Makefile.PL method has been around for a long time, and it mostly works, except in odd cases.

=CN The Makefile.PL Method Has Been Around For a Long Time, And It Mostly Works, Except In 古怪的 Cases.

=EN Its underpinnings depend on ExtUtils::Makemaker, which comes with Perl.

=CN Its underpinnings 依靠 On ExtUtils::Makemaker, Which 来 With Perl.

=EN Unfortunately, ExtUtils::Makemaker has become a bear to maintain, since it has to handle all of the special cases for the many, many systems on which Perl works.

=CN Unfortunately, ExtUtils::Makemaker Has 变成 a 负担 To Maintain, Since It Has To Handle All Of The Special Cases For The Many, Many 系统 On Which Perl Works.

=EN The Module::Build method is much newer, so it's still maturing and not as many people use it.[*] However, since Module::Build doesn't require an external program, it's easier for some people to use.

=CN The Module::Build Method Is Much newer, So It's Still maturing And Not As Many People Use It.[*] However, Since Module::Build Doesn't Require An External Program, It's Easier For Some People To Use.

=EN Module::Build will be part of the Perl standard distribution starting with Perl 5.10 and is likely the future for Perl modules.

=CN Module::Build Will Be Part Of The Perl Standard 分配 Starting With Perl 5.10 And Is Likely The Future For Perl Modules.

=EN Using h2xs We'll explain the Makefile.PL process using the awkwardly named h2xs.[] We use h2xs to create a set of template files that are a starting point for our distribution files.

=CN Using h2xs We'我 Explain The Makefile.PL 程序 Using The 笨拙地 Named h2xs.[] We Use h2xs To Create a Set Of template Files That Are a Starting 尖 For Our 分配 Files.

=EN We simply need to say H2xs -XAn, followed by the name of the modulein this case, Island::Plotting::Maps.[] Here's what the output looks like:[Â§]

=CN We Simply Need To Say H2xs -XAn, 跟着 By The Name Of The modulein This Case, Island::Plotting::Maps.[] Here's What The 出产 Looks Like:[Â§]

=EN [] The name h2xs has an interesting pedigree.

=CN [] The Name h2xs Has An Interesting pedigree.

=EN Back in the early days of Perl 5, Larry invented the XS language to describe the glue code that Perl needs to talk to C-language functions and libraries.

=CN Back In The Early 天 Of Perl 5, Larry 发明 The XS 语言 To 描写 The 胶水n Code That Perl Needs To 谈话 To C-语言 Functions And 库.

=EN Originally, this code was written entirely by hand, but the h2xs tool was written to scan simple C-include header files (ending in .h) and generate most of the XS directly.

=CN Originally, This Code Was Written 完全地 By Hand, But The h2xs 工具 Was Written To 浏览 Simple C-Include Header Files (结局 In .h) And Generate Most Of The XS 直接地.

=EN Hence, h 2 (to) XS.

=CN Hence, h 2 (To) XS.

=EN Over time, more functions were added, including generating template files for the rest of the distribution.

=CN Over Time, More Functions Were added, Including Generating template Files For The 休息 Of The 分配.

=EN Now here we are, about to describe how to use h2xs for things that aren't either h or XS.

=CN Now Here We Are, About To 描写 How To Use h2xs For Things That 还't Either h Or XS.

=EN [] If there's more than one module in the distribution, it should be the name of the most important module.

=CN [] If There's More Than One Module In The 分配, It Should Be The Name Of The Most Important Module.

=EN Others can be added later.

=CN Others Can Be added 更晚.

=EN [Â§] The exact behavior and output of h2xs may vary depending upon the version of Perl.

=CN [Â§] The Exact Behavior And 出产 Of h2xs May 变化 Depending Upon The Version Of Perl.

=EN Defaulting to backwards compatibility with perl 5.8.7 If you intend this module to be compatible with earlier perl versions, please specify a minimum perl version with the -b option.

=CN Defaulting To backwards 兼容性 With Perl 5.8.7 If You 打算 This Module To Be Compatible With Earlier Perl Versions, 使高兴 Specify a 最少量 Perl Version With The -b 选择.

=EN MANIFEST The h2xs program created a directory and several files.

=CN MANIFEST The h2xs Program Created a Directory And Several Files.

=EN These are mostly the same files that the other module creation tools set up for us, so even if you decide not to use h2xs, you still need to understand these files.

=CN These Are Mostly The Same Files That The Other Module 创造 Tools Set Up For Us, So Even If You Decide Not To Use h2xs, You Still Need To Understand These Files.

=EN Let's examine the MANIFEST file, which contains the list of files that the distribution will contain.

=CN Let's 检查 The MANIFEST File, Which 包含 The List Of Files That The 分配 Will Contain.

=EN At the start, our MANIFEST contains:[**]

=CN At The Start, Our MANIFEST 包含:[**]

=EN [**] Again, there may be slight variations based on tool and Perl versions.

=CN [**] Again, There May Be 轻微的 variations 基于 On 工具 And Perl Versions.

=EN The MANIFEST file is really a table of contents for our distribution.

=CN The MANIFEST File Is Really a Table Of Contents For Our 分配.

=EN When we decide to bundle the archive, all of the files in MANIFEST go into the archive.

=CN When We Decide To 捆 The archive, All Of The Files In MANIFEST Go Into The archive.

=EN When the end user unpacks the distribution, the module installer tool verifies that all of the files in MANIFEST are in the archive.

=CN When The End User unpacks The 分配, The Module 安装 工具 verifies That All Of The Files In MANIFEST Are In The archive.

=EN In fact, we're ready to make an archive right now.

=CN In Fact, We'Re 准备好的 To Make An archive Right Now.

=EN First, we need to run the Makefile.PL. After that, we find a new file, Makefile, in our directory.

=CN First, We Need To Run The Makefile.PL. After That, We 寻找 a New File, Makefile, In Our Directory.

=EN $ perl Makefile.PL $ make tardist

=CN $ Perl Makefile.PL $ Make tardist

=EN If we don't want to make a tar achive, we can create a zip file.

=CN If We Don't Want To Make a 沥青 achive, We Can Create a 活动 File.

=EN $ make ziptest

=CN $ Make ziptest

=EN While maintaining a MANIFEST sounds like it might be painful, we know that we won't accidentally include our "notes to self" in the distribution just because those files happened to be in the wrong directory.

=CN While maintaining a MANIFEST 听起来 Like It Might Be 痛苦的, We Know That We Won't 偶尔 Include Our "备忘 To 自己" In The 分配 Just Because Those Files Happened To Be In The 错误的 Directory.

=EN Later, we'll show you how to update MANIFEST.

=CN Later, We'我 Show You How To Update MANIFEST.

=EN README The next file is README, which is a standard name for the first bit of information you want all users of your module to read.

=CN README The 下一次 File Is README, Which Is a Standard Name For The First Bit Of Information You Want All Users Of Your Module To Read.

=EN It's customary to include at least a brief description of the module, installation instructions, and licensing details.

=CN It's 习惯的 To Include At Least a 简短的 描述 Of The Module, 安装 instructions, And 许可 Details.

=EN Island-Plotting-Maps version 0.01 = == == == == == == == == == == == == == == == ==

=CN Island-Plotting-Maps Version 0.01 = == == == == == == == == == == == == == == == ==

=EN The README is used to introduce the module and provide instructions on how to install the module, any machine dependencies it may have (for example C compilers and installed libraries) and any other information that should be provided before the module is installed.

=CN The README Is Used To 介绍 The Module And Provide instructions On How To 安装 The Module, Any 机器 dependencies It May Have (For Example C compilers And 安装 库) And Any Other Information That Should Be Provided Before The Module Is 安装.

=EN A README file

=CN A README File

=EN To install this module type the following:

=CN To 安装 This Module Type The Following:

=EN This module requires these other modules and libraries:

=CN This Module Requires These Other Modules And 库:

=EN COPYRIGHT AND LICENSE

=CN 版权 AND LICENSE

=EN Put the correct copyright and license information here.

=CN Put The 正确的 copyright And 许可（证） Information Here.

=EN Copyright (C) 2005 by Ginger Grant

=CN Copyright (C) 2005 By Ginger Grant

=EN This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself, either Perl Version 5.8.7 or, at your option, any later version of Perl 5 you may have available.

=CN This Library Is Free 软件; You Can redistribute It And/Or Modify It 在 The Same Terms As Perl Itself, Either Perl 版本 5.8.7 Or, At Your 选择, Any 更晚 Version Of Perl 5 You May Have Available.

=EN Obviously, you will want to edit this file to be whatever you want it to be.

=CN Obviously, You Will Want To 校订 This File To Be Whatever You Want It To Be.

=EN The phrase "blah blah blah" is often used in the templates to indicate things that must be changed.[*] If we leave unchanged the blah blah blah and other placeholder notes from h2xs, potential users will suspect that bugs in our code have also escaped our scrutiny, so we should proofread this stuff (along with our code) before we distribute our module.

=CN The 词组 "blah blah blah" Is Often Used In The templates To 指明 Things That Must Be 改变.[*] If We 出发 unchanged The blah blah blah And Other placeholder 备忘 From h2xs, 潜在的 Users Will 怀疑 That bugs In Our Code Have Also escaped Our 细看, So We Should proofread This 材料 (沿着 With Our Code) Before We 分配 Our Module.

=EN [*] When you're bored, you might find it amusing to do a search on CPAN for all places in which blah blah blah occurs.

=CN [*] When You'Re 无聊, You Might 寻找 It amusing To Do a 搜查 On Perl综合典藏网 For All Places In Which blah blah blah Occurs.

=EN Pay special attention to the copyright and license section.

=CN Pay Special 注意 To The copyright And 许可（证） Section.

=EN (It should have your name in place of Ginger's name, unless your machine is very confused about who is sitting at the keyboard.)

=CN (It Should Have Your Name In Place Of Ginger's Name, Unless Your 机器 Is Very 困惑 About Who Is sitting At The 键盘.)

=EN Your employer may require you to change the copyright notice to include your company name rather than your name, for example.

=CN Your 雇主 May Require You To Change The copyright Notice To Include Your 公司 Name Rather Than Your Name, For Example.

=EN Or, if you're including someone else's code in your module, you may need to mention their copyright (or lack thereof) as well.

=CN Or, If You'Re Including Someone Else's Code In Your Module, You May Need To 提及 Their copyright (Or 缺少 及其) As Well.

=EN The README file also has a special responsibility: the master CPAN archiving tools pull out the README file as a separate entry automatically, permitting the search engines on the various worldwide archives to index them.

=CN The README File Also Has a Special 责任: The 主人 Perl综合典藏网 archiving Tools 拖 Out The README File As a Separate Entry Automatically, permitting The 搜查 engines On The 各种各样的 全世界的 archives To Index Them.

=EN The CPAN installation tools can download it and display it without downloading the entire distribution.

=CN The Perl综合典藏网 安装 Tools Can download It And 陈列 It Without downloading The 完全的 分配.

=EN In the CPAN.pm shell, for example, you can say:[]

=CN In The Perl综合典藏网.Pm 壳, For Example, You Can Say:[]

=EN [] Well, you would be able to do this, if there were actually a module on CPAN named Island::Plotting::Maps.

=CN [] Well, You Would Be Able To Do This, If There Were Actually a Module On Perl综合典藏网 Named Island::Plotting::Maps.

=EN $ perl -MCPAN -eshell cpan> readme Island::Plotting::Maps

=CN $ Perl -MPerl综合典藏网 -eshell Cpan> readme Island::Plotting::Maps

=EN In CPANPLUS, the successor to CPAN.pm, we do something similar:

=CN In Perl综合典藏网PLUS, The 继承人 To Perl综合典藏网.Pm, We Do Something Similar:

=EN $ perl -MCPANPLUS -eshell cpanp> r Island::Plotting::Maps

=CN $ Perl -MPerl综合典藏网PLUS -eshell cpanp> r Island::Plotting::Maps

=EN Depending on your version of Perl, you might have the cpan or cpanp programs:

=CN Depending On Your Version Of Perl, You Might Have The Cpan Or cpanp Programs:

=EN $ cpan cpan> readme Island::Plotting::Maps

=CN $ Cpan Cpan> readme Island::Plotting::Maps

=EN Changes The Changes file tracks the evolution of our code.

=CN Changes The Changes File 轨迹 The 发展 Of Our Code.

=EN Users typically check this file to see what's new with the module and to decide if they want to upgrade.[*] In this file, we note any bugs we fixed, features we added, and how important the changes are (i.e., should everyone upgrade right away?).

=CN Users 典型的 Check This File To See What's New With The Module And To Decide If They Want To upgrade.[*] In This File, We Note Any bugs We Fixed, 特征 We added, And How Important The Changes Are (i.e., Should Everyone upgrade Right Away?).

=EN [*] Why not upgrade?

=CN [*] Why Not upgrade?

=EN Some people are content, and rightfully so, with something they already know works.

=CN Some People Are 含量, And rightfully So, With Something They Already Know Works.

=EN Why chance breaking anything if you don't need to?

=CN Why Chance 打破 Anything If You Don't Need To?

=EN $ cat Changes Revision history for Perl extension Island::Plotting::Maps.

=CN $ 猫 Changes Revision 历史 For Perl 延伸 Island::Plotting::Maps.

=EN We need to maintain this file manually unless our interactive development environment has automated tools for such maintenance.

=CN We Need To Maintain This File manually Unless Our 互动 进展 环境 Has automated Tools For Such 保养.

=EN We can also use this file to help us track changes and their effects: if we realize that a certain bug turned up three releases back, we can look here to remind ourselves of new features or bug fixes that we introduced in that release.

=CN We Can Also Use This File To Help Us 径赛 Changes And Their Effects: If We 认识到 That a 确信的 臭虫 转 Up Three Releases Back, We Can Look Here To 提醒 我们自己 Of New 特征 Or 臭虫 fixes That We Introduced In That Release.

=EN META.yml Recent versions of the module tools create a file named META.yml that presents the module information in a human-readable form that is also easy to parse.

=CN META.yml Recent Versions Of The Module Tools Create a File Named META.yml That presents The Module Information In a 人的-可读性 Form That Is Also Easy To Parse.

=EN It uses the YAML format we told you about in Chapter 6.

=CN It Uses The YAML Format We told You About In Chapter 6.

=EN # http://module-build.sourceforge.net/META-spec.html #XXXXXXX This is a prototype!!!

=CN # http://module-build.sourceforge.net/META-spec.html #XXXXXXX This Is a 原型!!!

=EN It will change in the future!!!

=CN It Will Change In The Future!!!

=EN XXXXX# name: HTTP-Size version: 0.91 version_from: lib/Size.pm installdirs: site requires:

=CN XXXXX# Name: HTTP-Size Version: 0.91 version_from: lib/Size.pm installdirs: 场所 Requires:

=EN distribution_type: module generated_by: ExtUtils::MakeMaker version 6.17

=CN distribution_type: Module generated_by: ExtUtils::MakeMaker Version 6.17

=EN In this case, ExtUtils::MakeMaker automatically created this file for me.

=CN In This Case, ExtUtils::MakeMaker Automatically Created This File For Me.

=EN When we create the distribution archive, the Makefile creates this file, ensures that it's in MANIFEST, and includes it in distribution.

=CN When We Create The 分配 archive, The Makefile Creates This File, ensures That It's In MANIFEST, And 包括 It In 分配.

=EN Other tools and services, including the ones we cover in Chapter 19, can use this file to discover things about the module without having to run any of the distribution code.

=CN Other Tools And services, Including The Ones We 盖 In Chapter 19, Can Use This File To 发现 Things About The Module Without Having To Run Any Of The 分配 Code.

=EN There is a lot more to this file, and its format documentation reference is right there in the file.

=CN There Is a 许多 More To This File, And Its Format 提供文件 Reference Is Right There In The File.

=EN The Prototype Module Itself Finally we come to the most important part of the distribution, which is the actual code:

=CN The Prototype Module Itself Finally We 来到 To The Most Important Part Of The 分配, Which Is The Actual Code:

=EN package Island::Plotting::Maps;

=CN Package Island::Plotting::Maps;

=EN It looks good so far.

=CN It Looks Good So Far.

=EN The module automatically starts with an appropriate package directive.

=CN The Module Automatically Starts With An 恰当的 Package 命令.

=EN Following that, we get the standard, good-practice pragmas.

=CN Following That, We Get The Standard, Good-Practice 的.

=EN use 5.008007; use strict; use warnings;

=CN Use 5.008007; Use Strict; Use 警告;

=EN Now we're declaring that the module is compatible with Perl 5.8.7 or later and that the compiler restrictions and warnings are enabled automatically.

=CN Now We'Re 宣布 That The Module Is Compatible With Perl 5.8.7 Or 更晚 And That The Compiler 限制 And 警告 Are Enabled Automatically.

=EN We like to encourage good practices.

=CN We Like To Encourage Good 实践.

=EN Obviously, we're free to delete or modify anything inappropriate.

=CN Obviously, We'Re Free To Delete Or Modify Anything inappropriate.

=EN If we know that our module works with earlier versions of Perl, we can modify the use 5.008007; line (or delete it altogether).

=CN If We Know That Our Module Works With Earlier Versions Of Perl, We Can Modify The Use 5.008007; Line (Or Delete It 全部地).

=EN Next comes the mechanism by which we can make our functions and variables show up in the package that called the module.

=CN Next 来 The Mechanism By Which We Can Make Our Functions And Variables Show Up In The Package That Called The Module.

=EN The Exporter function takes care of all of that for us by providing the import method that we talked about in Chapter 15.

=CN The Exporter Function Takes Care Of All Of That For Us By 提供 The Import Method That We 谈了 About In Chapter 15.

=EN require Exporter;

=CN Require Exporter;

=EN our @ISA = qw(Exporter);

=CN Our @ISA = qw(Exporter);

=EN This is fine for non-object-oriented modules, but object-oriented modules typically don't export anything since they require the user to call methods on an object.

=CN This Is Fine For Non-Object-Oriented Modules, But Object-Oriented Modules 典型的 Don't Export Anything Since They Require The User To Call Methods On An Object.

=EN We'll replace the Exporter lines with one that declares the class that we inherit from, if any.

=CN We'我 归还原处 The Exporter Lines With One That Declares The Class That We 继承 From, If Any.

=EN use base qw(Geo::Maps);

=CN Use Base Qw(Geo::Maps);

=EN We have to include some information for Exporter, and h2xs sets that up for us.

=CN We Have To Include Some Information For Exporter, And h2xs Sets That Up For Us.

=EN We have to fill in (or not fill in) three variables:

=CN We Have To 装满 In (Or Not 装满 In) Three Variables:

=EN our %EXPORT_TAGS = ( 'all' => [ qw(

=CN Our %EXPORT_TAGS = ( 'All' => [ Qw(

=EN our @EXPORT_OK = ( @{ $EXPORT_TAGS{'all'} } );

=CN Our @EXPORT_OK = ( @{ $EXPORT_TAGS{'All'} } );

=EN our @EXPORT = qw(

=CN Our @EXPORT = Qw(

=EN The @EXPORT array contains the names of all the variables and subroutines that use will automatically import into the caller by default.

=CN The @EXPORT Array 包含 The Names Of All The Variables And Subroutines That Use Will Automatically Import Into The Caller By Default.

=EN All of those show up in the calling package unless we tell use otherwise.

=CN All Of Those Show Up In The Calling Package Unless We Tell Use Otherwise.

=EN use Island::Plotting::Maps; # import everything in @EXPORT

=CN Use Island::Plotting::Maps; # Import Everything In @EXPORT

=EN We won't get anything imported if we give use an empty import list.

=CN We Won't Get Anything Imported If We Give Use An Empty Import List.

=EN use Island::Plotting::Maps ( ); # import nothing

=CN Use Island::Plotting::Maps ( ); # Import Nothing

=EN The @EXPORT_OK array contains the names of all the variables and subroutines that use can import if the user asks for them by name (and @EXPORT_OK implicitly contains @EXPORT).

=CN The @EXPORT_OK Array 包含 The Names Of All The Variables And Subroutines That Use Can Import If The User 问 For Them By Name (And @EXPORT_OK Implicitly 包含 @EXPORT).

=EN If the variables or subroutines are not in one of these arrays, use won't be able to import them.

=CN If The Variables Or Subroutines Are Not In One Of These Arrays, Use Won't Be Able To Import Them.

=EN The %EXPORT_TAGS hash lets us give names to sets of variables and functions so we can export groups of symbols without making the user type too much.

=CN The %EXPORT_TAGS Hash Lets Us Give Names To Sets Of Variables And Functions So We Can Export groups Of Symbols Without 制作 The User Type Too Much.

=EN The keys to %EXPORT_TAGS are the group labels, and the hash values are anonymous arrays of symbols that belong to that tag.

=CN The Keys To %EXPORT_TAGS Are The Group labels, And The Hash Values Are Anonymous Arrays Of Symbols That 属于 To That 标签.

=EN In the use statement's import list, we include the tag name preceded by a colon.[*]

=CN In The Use Statement's Import List, We Include The 标签 Name preceded By a 结肠.[*]

=EN [*] Technically, you don't need :all because /^/ (include all symbols that match at least a beginning of string) does the same.

=CN [*] Technically, You Don't Need :All Because /^/ (Include All Symbols That Match At Least a 开端 Of String) Does The Same.

=EN Many people are familiar with typing :all, and it's far more self-documenting than /^/ is, so include it if you can.

=CN Many People Are 熟悉的 With 打字 :All, And It's Far More 自己-记录 Than /^/ Is, So Include It If You Can.

=EN use Island::Plotting::Maps qw(:all)

=CN Use Island::Plotting::Maps Qw(:All)

=EN After the Exporter setup, we get the version number for our new module.

=CN After The Exporter setup, We Get The Version Number For Our New Module.

=EN our $VERSION = '0.01';

=CN Our $VERSION = '0.01';

=EN This version number is important for many reasons, and we need to pay special attention to it.

=CN This Version Number Is Important For Many Reasons, And We Need To 支付 Special 注意 To It.

=EN Choose the version number carefully, because many other things use it and depend on it:

=CN Choose The Version Number 仔细, Because Many Other Things Use It And 依靠 On It:

=EN Unique identification

=CN Unique 识别

=EN The version number identifies a particular release of a particular module as it floats around the Internet.

=CN The Version Number identifies a Particular Release Of a Particular Module As It floats Around The Internet.

=EN Filename generation

=CN Filename Generation

=EN The archive of the distribution includes the version number of the primary module by default.

=CN The archive Of The 分配 包括 The Version Number Of The 首要的 Module By Default.

=EN PAUSE won't let us upload the same filename twice, either, so if our code changes but our version number doesn't, we'll have some trouble there.

=CN PAUSE Won't Let Us upload The Same 文件名 两次, Either, So If Our Code Changes But Our Version Number Doesn't, We'我 Have Some Trouble There.

=EN Upgrade indication

=CN Upgrade 表示

=EN Generally, numbers that increase numerically supersede previous versions.

=CN Generally, 编号 That 增加 数值 代替 Previous Versions.

=EN For this test, the number is considered a floating-point number, so 2.10 (which is really 2.1) is less than 2.9 (which must be the same as 2.90, by the same logic).

=CN For This Test, The Number Is Considered a Floating-尖 Number, So 2.10 (Which Is Really 2.1) Is 更少的 Than 2.9 (Which Must Be The Same As 2.90, By The Same 逻辑).

=EN To avoid confusion, if we've have two digits after the decimal point in one release, we should have two digits in the next release.[]

=CN To Avoid 混乱, If We'Ve Have Two digits After The 十进制的 尖 In One Release, We Should Have Two digits In The 下一次 Release.[]

=EN [] Perl Best Practices recommends using a three-part version string, such as qv(1.2.3), but their use is not widespread, requires version.pm (a non-core module as of Perl 5.8), does not integrate with common tools yet, and has lexical issues.

=CN [] Perl Best Practices 推荐 Using a Three-Part Version String, Such As qv(1.2.3), But Their Use Is Not 流传广泛的, Requires version.pm (a Non-Core Module As Of Perl 5.8), Does Not 整合 With Common Tools 仍然, And Has Lexical Issues.

=EN Interface stability

=CN Interface 稳定性

=EN Generally, numbers that begin with 0 are alpha or beta, with external interfaces that may still be in flux.

=CN Generally, 编号 That 开始 With 0 Are alpha Or Beta, With External 接口 That May Still Be In 流动.

=EN Also, most people use a major version number change (from 1.x to 2.x, etc.) to indicate a potential break in upward compatibility.

=CN Also, Most People Use a 主要的 Version Number Change (From 1.x To 2.x, Etc.) To 指明 a 潜在的 打破 In 向上（的） 兼容性.

=EN Recognition by the various CPAN tools

=CN Recognition By The 各种各样的 Perl综合典藏网 Tools

=EN The CPAN distribution management tools use the version number to track a particular release, and the CPAN installation tools can determine missing or out-of-date distributions.

=CN The Perl综合典藏网 分配 管理（人员） Tools Use The Version Number To 径赛 a Particular Release, And The Perl综合典藏网 安装 Tools Can 决心 Missing Or Out-Of-Date 分布.

=EN Perl's own operators

=CN Perl's Own Operators

=EN The use operator can be given a version number in addition to (or instead of) the import list, forcing the use operation to fail if the imported module is not equal to or greater than that version:

=CN The Use Operator Can Be Given a Version Number In 增加 To (Or Instead Of) The Import List, 迫使 The Use Operation To 失败 If The Imported Module Is Not Equal To Or 更大的 Than That Version:

=EN use Island::Plotting::Maps 1.10 qw{ map_debugger };

=CN Use Island::Plotting::Maps 1.10 Qw{ map_debugger };

=EN Generally, you can start with the 0.01 given by the template and increase it consistently with each new test release.[*] Now you're past the header information and down to the core of your module.

=CN Generally, You Can Start With The 0.01 Given By The template And 增加 It consistently With Each New Test Release.[*] Now You'Re 过去的 The Header Information And 向下 To The Core Of Your Module.

=EN In the template, it is indicated by a simple comment:

=CN In The template, It Is 表明 By a Simple Comment:

=EN [*] The perlmod page includes an example that extracts the CVS/RCS version number for the module's version number.

=CN [*] The perlmod 页 包括 An Example That extracts The CVS/RCS Version Number For The Module's Version Number.

=EN # Preloaded methods go here.

=CN # Preloaded Methods Go Here.

=EN You didn't think the h2xs tool would even write the module for you, now did you?

=CN You Didn't 想 The h2xs 工具 Would Even Write The Module For You, Now Did You?

=EN Anyway, this is where the code goes, usually as a series of subroutines, possibly preceded by some shared module data (using my declarations) and perhaps a few package variables (using our declarations in recent Perl versions).

=CN Anyway, This Is Where The Code 去, Usually As a 系列 Of Subroutines, Possibly preceded By Some Shared Module Data (Using My Declarations) And 也许 a Few Package Variables (Using Our Declarations In 近来的 Perl Versions).

=EN Following the code, you'll find your necessary true value:

=CN Following The Code, You'我 寻找 Your 必要的 True Value:

=EN so the require (inside the use) doesn't abort.

=CN So The Require (里面 The Use) Doesn't abort.

=EN Embedded Documentation Immediately following the mandatory true value in the file, you'll find the _ _END_ _ marker.

=CN Embedded 文档 Immediately Following The 强制性 True Value In The File, You'我 寻找 The _ _END_ _ marker.

=EN That's double underscore followed by END followed by another double underscore.

=CN That's 两倍的 underscore 跟着 By END 跟着 By 另一个 两倍的 underscore.

=EN It's at the beginning of the line and has a newline immediately following it:

=CN It's At The 开端 Of The Line And Has a 换行符 立即 Following It:

=EN This marker tells Perl that there's no Perl code anywhere later in the file and that the Perl parser can stop now.[] Following the _ _END_ _ marker, you'll find the embedded documentation for the module:

=CN This marker 告诉 Perl That There's No Perl Code Anywhere 更晚 In The File And That The Perl Parser Can Stop Now.[] Following The _ _END_ _ marker, You'我 寻找 The embedded 提供文件 For The Module:

=EN [] The data immediately following the _ _END_ _ marker is available by reading from the DATA filehandle, which is a great way to include a small amount of constant data with your program.

=CN [] The Data 立即 Following The _ _END_ _ marker Is Available By 读书 From The DATA Filehandle, Which Is a 大的 Way To Include a Small 数量 Of Constant Data With Your Program.

=EN However, that's not why we're using it here.

=CN However, That's Not Why We'Re Using It Here.

=EN # Below is stub documentation for your module.

=CN # Below Is 存根 提供文件 For Your Module.

=EN You'd better edit it!

=CN You'd Better 校订 It!

=EN NAME

=CN 标题

=EN Island::Plotting::Maps - Perl extension for blah blah blah

=CN Island::Plotting::Maps - Perl 延伸 For blah blah blah

=EN SYNOPSIS

=CN 概述

=EN DESCRIPTION

=CN 描述 

=EN Stub documentation for Island::Plotting::Maps, created by h2xs.

=CN Stub 提供文件 For Island::Plotting::Maps, Created By h2xs.

=EN It looks like the author of the extension was negligent enough to leave the stub unedited.

=CN It Looks Like The 作者 Of The 延伸 Was 粗心大意的 Enough To 出发 The 存根 unedited.

=EN None by default.

=CN None By Default.

=EN SEE ALSO

=CN 引申阅读

=EN Mention other useful documentation such as the documentation of related modules or operating system documentation (such as manpages in UNIX), or any relevant external documentation such as RFCs or standards.

=CN Mention Other Useful 提供文件 Such As The 提供文件 Of Related Modules Or Operating System 提供文件 (Such As 帮助文档 In UNIX), Or Any 相关的 External 提供文件 Such As RFCs Or standards.

=EN If you have a mailing list set up for your module, mention it here.

=CN If You Have a 邮寄 List Set Up For Your Module, 提及 It Here.

=EN If you have a web site set up for your module, mention it here.

=CN If You Have a 网 场所 Set Up For Your Module, 提及 It Here.

=EN AUTHOR

=CN 作者

=EN COPYRIGHT AND LICENSE

=CN 版权 AND LICENSE

=EN Copyright 2006 by Ginger Grant

=CN Copyright 2006 By Ginger Grant

=EN This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=CN This Library Is Free 软件; You Can redistribute It And/Or Modify It 在 The Same Terms As Perl Itself.

=EN This documentation is in POD format .

=CN This 提供文件 Is In POD Format .

=EN The perlpod manpage describes the POD format in detail.

=CN The perlpod manpage describes The POD Format In 细节.

=EN Like Perl itself, POD is said to mean various things, such as Perl Online Documentation or Plain Old Documentation, and so on.

=CN Like Perl Itself, POD Is Said To Mean 各种各样的 Things, Such As Perl Online 文档 Or Plain Old 文档, And So On.

=EN To most of us, it's just POD.

=CN To Most Of Us, It's Just POD.

=EN As the template describes, you're expected to edit portions of this text to fit your particular module.

=CN As The template describes, You'Re Expected To 校订 portions Of This 正文 To 适合的 Your Particular Module.

=EN In particular, leaving the blah blah blah is considered bad form.

=CN In Particular, 离开 The blah blah blah Is Considered 坏的 Form.

=EN The POD information is extracted automatically by the installation process to create the native documentation format, such as Unix manpages or HTML.

=CN The POD Information Is extracted Automatically By The 安装 程序 To Create The Native 提供文件 Format, Such As Unix 帮助文档 Or HTML.

=EN Also, the perldoc command can locate POD in the installed scripts and modules and format it for the screen.

=CN Also, The perldoc 命令 Can Locate POD In The 安装 Scripts And Modules And Format It For The 屏.

=EN One nice thing about POD is that it can be interspersed with the Perl implementation code it describes.

=CN One Nice Thing About POD Is That It Can Be interspersed With The Perl 实行 Code It describes.

=EN Each POD directive (a line beginning with an equals sign) switches from Perl mode (lines interpreted as Perl code) to POD mode (lines interpreted as documentation), and each line beginning with =cut switches back.

=CN Each POD 命令 (a Line 开端 With An equals Sign) Switches From Perl 方式 (Lines 解释 As Perl Code) To POD 方式 (Lines 解释 As 提供文件), And Each Line 开端 With =Cut Switches Back.

=EN For example, you had three subroutines in the Island::Plotting::Maps module.

=CN For Example, You Had Three Subroutines In The Island::Plotting::Maps Module.

=EN The resulting file with mixed code and documentation looks something like:

=CN The 造成 File With 混合 Code And 提供文件 Looks Something Like:

=EN package Island::Plotting::Maps; [... stuff down to the $VERSION setting above ...]

=CN Package Island::Plotting::Maps; [... 材料 向下 To The $VERSION Setting Above ...]

=EN Island::Plotting::Maps - Plot maps on the island

=CN Island::Plotting::Maps - Plot 地图 On The 岛屿

=EN This module draws maps. [ more here ]

=CN This Module draws 地图. [ More Here ]

=EN item load_map($filename)

=CN 条款 load_map($文件名)

=EN This function [ more here ].

=CN This Function [ More Here ].

=EN sub load_map {

=CN Sub load_map {

=EN sub scale_map {

=CN Sub scale_map {

=EN draw_map($filehandle)

=CN draw_map($Filehandle)

=EN sub draw_map {

=CN Sub draw_map {

=EN Map Reading for Dummies", "First Mates: why they're not the captain", and be sure to consult with the Professor.

=CN Map Reading For Dummies", "First Mates: Why They'Re Not The 队长", And Be Sure To 咨询 With The Professor.

=EN As you can see, the documentation for the subroutines is now very near the subroutine definition, in the hope that as one gets updated, the other will be similarly changed.

=CN As You Can See, The 提供文件 For The Subroutines Is Now Very 近 The Subroutine Definition, In The 希望 That As One Gets Updated, The Other Will Be 同样 改变.

=EN (Out-of-date documentation is often worse than no documentation at all, because at least with no documentation at all, the user is forced to look at the source code.)

=CN (Out-Of-Date 提供文件 Is Often 更坏的 Than No 提供文件 At All, Because At Least With No 提供文件 At All, The User Is 迫使 To Look At The Source Code.)

=EN Many modules in the CPAN do this.

=CN Many Modules In The Perl综合典藏网 Do This.

=EN The penalty is a very slight increase in compile-time activity because the Perl parser has to skip over the embedded POD directives.

=CN The 刑罚 Is a Very 轻微的 增加 In Compile-Time 活动 Because The Perl Parser Has To 跳过 在 The embedded POD directives.

=EN Whether you place your POD at the end of the file (as the template suggests) or intertwined with your code (as presented in the preceding paragraphs), the important thing to remember is always to document your code.

=CN Whether You Place Your POD At The End Of The File (As The template suggests) Or intertwined With Your Code (As 提出 In The 前面的 paragraphs), The Important Thing To 记得 Is Always To Document Your Code.

=EN Even if it's just for you, a few months later, when your brain has been 42, 000 other places before you look at the code again, you'll be glad to have those notes.

=CN Even If It's Just For You, a Few 月 更晚, When Your 脑子 Has Been 42, 000 Other Places Before You Look At The Code Again, You'我 Be 快乐的 To Have Those 备忘.

=EN Documentation is important.

=CN 文档 Is Important.

=EN Controlling the Distribution with Makefile.PL The Perl developers have chosen to rely on the standard Unix make utility to build and install Perl itself, and that same mechanism is used for additional modules.

=CN Controlling The Distribution With Makefile.PL The Perl 开发商 Have 选择 To 依靠 On The Standard Unix Make 效用 To Build And 安装 Perl Itself, And That Same Mechanism Is Used For Additional Modules.

=EN If you have a non-Unix system, a make-like utility should also be available.

=CN If You Have a Non-Unix System, a Make-Like 效用 Should Also Be Available.

=EN On Windows, for example, you may have dmake or another program.

=CN On 微软视窗操作系统, For Example, You May Have dmake Or 另一个 Program.

=EN The command perl -V:make will tell you the name of your make utility program; if it says make='nmake', simply use nmake wherever you use make.

=CN The 命令 Perl -V:Make Will Tell You The Name Of Your Make 效用 Program; If It 说 Make='nmake', Simply Use nmake 无论哪里 You Use Make.

=EN In any case, you should call the controlling file a Makefile, even though its name may vary as well.

=CN In Any Case, You Should Call The controlling File a Makefile, Even Though Its Name May 变化 As Well.

=EN However, crafting a Makefile is tricky but repetitive.

=CN However, crafting a Makefile Is 巧妙的 But 重复的.

=EN And what better way to accomplish a tricky but repetitive task than with a program?

=CN And What Better Way To 完成 a 巧妙的 But 重复的 工作 Than With a Program?

=EN Since you're talking about Perl add-on modules, you know that Perl is available, so how about a Perl program to generate the Makefile?

=CN Since You'Re 说话 About Perl 增添-On Modules, You Know That Perl Is Available, So How About a Perl Program To Generate The Makefile?

=EN That's exactly what happens.

=CN That's Exactly What Happens.

=EN The distribution is required to contain a Makefile.PL, which is a Perl program to build a Makefile.

=CN The 分配 Is 要求 To Contain a Makefile.PL, Which Is a Perl Program To Build a Makefile.

=EN Then from there, you use make (or something like it) to control all of the remaining tasks.

=CN Then From There, You Use Make (Or Something Like It) To Control All Of The Remaining Tasks.

=EN The h2xs tool generates a template Makefile.PL that you probably won't even need to touch for single-module distributions:

=CN The h2xs 工具 产生 a template Makefile.PL That You Probably Won't Even Need To 碰 For Single-Module 分布:

=EN $ cat Makefile.PL use 5.008; use ExtUtils::MakeMaker; # See lib/ExtUtils/MakeMaker.pm for details of how to influence # the contents of the Makefile that is written.

=CN $ 猫 Makefile.PL Use 5.008; Use ExtUtils::MakeMaker; # See lib/ExtUtils/MakeMaker.pm For Details Of How To 影响 # The Contents Of The Makefile That Is Written.

=EN  # finds $VERSION

=CN  # 发现 $VERSION

=EN  ## Add these new keywords supported since 5.005

=CN  ## Add These New Keywords Supported Since 5.005

=EN  # retrieve abstract from module

=CN  # retrieve 抽象的 From Module

=EN Yes, this is a Perl program.

=CN Yes, This Is a Perl Program.

=EN The WriteMakefile routine is defined by the ExtUtils::MakeMaker module (included with Perl) to generate a Makefile.

=CN The WriteMakefile Routine Is Defined By The ExtUtils::MakeMaker Module (包括 With Perl) To Generate a Makefile.

=EN As the developer of the module, use this makefile to build and test your module and prepare a distribution file:

=CN As The developer Of The Module, Use This makefile To Build And Test Your Module And 准备 a 分配 File:

=EN $ perl Makefile.PL Checking if your kit is complete...

=CN $ Perl Makefile.PL Checking If Your 全套工具、装备 Is Complete...

=EN Looks good Writing Makefile for Island::Plotting::Maps

=CN Looks Good Writing Makefile For Island::Plotting::Maps

=EN The ultimate user of your distribution will execute the identical command at his site.

=CN The 最终的 User Of Your 分配 Will Execute The 同一的 命令 At 他的 场所.

=EN However, the Makefile will most likely be different, reflecting the differences in installation locations, local policies, and even the C compiler and linking instructions appropriate for their architecture.

=CN However, The Makefile Will Most Likely Be Different, reflecting The 差异 In 安装 位置, Local 政策, And Even The C Compiler And linking instructions 恰当的 For Their 建筑学.

=EN It's a nice system that has worked quite well over the years.

=CN It's a Nice System That Has 工作 Quite Well 在 The Years.

=EN The creation of the Makefile.PL (and resulting Makefile) is quite flexible.

=CN The 创造 Of The Makefile.PL (And 造成 Makefile) Is Quite 柔韧的.

=EN For example, you can run code to ask the person installing your module about the locations of other installed libraries or tools, or get options for variations in activity.[*]

=CN For Example, You Can Run Code To 问 The 人 installing Your Module About The 位置 Of Other 安装 库 Or Tools, Or Get 选项 For variations In 活动.[*]

=EN [*] Please keep the number of questions to a minimum, however.

=CN [*] Please 保持 The Number Of Questions To a 最少量, However.

=EN Most people are irritated when asked a series of questions, especially when they are just upgrading your module.

=CN Most People Are irritated When 问 a 系列 Of Questions, Especially When They Are Just upgrading Your Module.

=EN If possible, store the answers in a configuration module that you install, so that a later invocation of your installer can pull the previous answers as defaults.

=CN If Possible, 商店 The answers In a Configuration Module That You 安装, So That a 更晚 调用 Of Your 安装 Can 拖 The Previous answers As Defaults.

=EN The PREREQ_PM setting is important if your module depends on non-core Perl modules, especially if you plan to upload your code to the CPAN.

=CN The PREREQ_PM Setting Is Important If Your Module Depends On Non-Core Perl Modules, Especially If You 计划平面图 To upload Your Code To The Perl综合典藏网.

=EN Proper use of the prerequisites list can make installing your module nearly painless, and your user community will thank you.

=CN Proper Use Of The prerequisites List Can Make installing Your Module 几乎 painless, And Your User 团体 Will 谢谢 You.

=EN The Makefile built by the default invocation of Makefile.PL presumes that the module will be installed in the system-wide Perl directory that all Perl programs can access directly with the built-in @INC path.

=CN The Makefile Built By The Default 调用 Of Makefile.PL 假设 That The Module Will Be 安装 In The System-宽的 Perl Directory That All Perl Programs Can Access 直接地 With The Built-In @INC Path.

=EN However, if you are testing a module, you certainly don't want to install it into the system directories, possibly corrupting a previous version of your module and breaking production programs.

=CN However, If You Are testing a Module, You Certainly Don't Want To 安装 It Into The System directories, Possibly corrupting a Previous Version Of Your Module And 打破 生产 Programs.

=EN Also, if you're not the system administrator, it's unlikely that you can change those central Perl directories, because that would be a great way to insert a Trojan horse for privileged users to stumble across.[]

=CN Also, If You'Re Not The System administrator, It's 未必的 That You Can Change Those 中心的 Perl directories, Because That Would Be a 大的 Way To 插入 a Trojan 马 For 有特权的 Users To 绊跌 横越.[]

=EN [] Even if you weren't the system administrator, you'd soon have all the powers of the system administrator.

=CN [] Even If You 傻乎乎的't The System administrator, You'd 不久 Have All The powers Of The System administrator.

=EN Luckily, the Makefile contains provisions for considering an alternate installation location for scripts, manpages, and libraries.

=CN Luckily, The Makefile 包含 provisions For considering An 轮流 安装 地点 For Scripts, 帮助文档, And 库.

=EN The easiest way to specify an alternate location is with a PREFIX value as a parameter on the command line:

=CN The easiest Way To Specify An 轮流 地点 Is With a PREFIX Value As a Parameter On The 命令 Line:

=EN $ perl Makefile.PL PREFIX=~/Testing Checking if your kit is complete...

=CN $ Perl Makefile.PL PREFIX=~/Testing Checking If Your 全套工具、装备 Is Complete...

=EN Looks good Writing Makefile for Island::Plotting::Maps

=CN Looks Good Writing Makefile For Island::Plotting::Maps

=EN Although the messages don't indicate anything different, the Makefile will now install scripts to $PREFIX/bin, manpages below $PREFIX/man, and libraries below $PREFIX/lib/site_perl.

=CN Although The Messages Don't 指明 Anything Different, The Makefile Will Now 安装 Scripts To $PREFIX/bin, 帮助文档 Below $PREFIX/人, And 库 Below $PREFIX/lib/site_perl.

=EN In this case, you've selected a subdirectory of your home directory called Testing as the value of $PREFIX.

=CN In This Case, You'Ve 选定 a 子目录 Of Your 家 Directory Called Testing As The Value Of $PREFIX.

=EN If you were a project librarian, managing code for a team of developers, you might instead say something like:

=CN If You Were a 计划 图书管理员, managing Code For a 小队 Of 开发商, You Might Instead Say Something Like:

=EN $ perl Makefile.PL PREFIX=/path/to/shared/area

=CN $ Perl Makefile.PL PREFIX=/Path/To/Shared/Area

=EN which then builds the files into a shared area.

=CN Which Then builds The Files Into a Shared Area.

=EN Of course, you'd need write privileges to such a directory, and the rest of the team would have to add the bin subdirectory to their PATH, the man subdirectory to their MANPATH, and the lib/site_perl directory to their @INC path, as you'll see shortly.

=CN Of Course, You'd Need Write privileges To Such a Directory, And The 休息 Of The 小队 Would Have To 增添 The bin 子目录 To Their PATH, The 人 子目录 To Their MANPATH, And The lib/site_perl Directory To Their @INC Path, As You'我 See 立刻.

=EN Trivial make test Testing.

=CN Trivial Make Test Testing.

=EN We talk more about testing in depth in Chapters 17 and 18, but here's a brief introduction.

=CN We 谈话 More About testing In 深度 In Chapters 17 And 18, But Here's a 简短的 介绍.

=EN Testing is important.

=CN Testing Is Important.

=EN First, you should at least ensure that the code you've written even compiles before you install it and start playing with it.

=CN First, You Should At Least Ensure That The Code You'Ve Written Even compiles Before You 安装 It And Start 玩 With It.

=EN That test is free.

=CN That Test Is Free.

=EN You can invoke it directly from the newly created Makefile by simply typing make test, as in:

=CN You Can 调用 It 直接地 From The 新 Created Makefile By Simply 打字 Make Test, As In:

=EN $ make test cp Maps.pm blib/lib/Island/Plotting/Maps.pm PERL_DL_NONLAZY=1 /usr/local/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'blib/lib', 'blib/arch')" t/*.t t/1....ok All tests successful.

=CN $ Make Test cp Maps.pm blib/lib/Island/Plotting/Maps.pm PERL_DL_NONLAZY=1 /usr/Local/bin/Perl "-MExtUtils::Command::MM" "-g" "test_harness(0, 'blib/lib', 'blib/拱门')" t/*.t t/1....Ok All 测试 成功的.

=EN But what happened there?

=CN But What Happened There?

=EN First, the .pm file was copied to the testing staging area: the area headed by blib (build library) below the current directory.[*] Next, the perl that invoked the Makefile.PL is called upon to run the test harnessa program that manages all test invocations and reports the results at the end.[]

=CN First, The .Pm File Was 复制 To The testing staging Area: The Area headed By blib (Build Library) Below The Current Directory.[*] Next, The Perl That invoked The Makefile.PL Is Called Upon To Run The Test harnessa Program That 管理 All Test invocations And Reports The Results At The End.[]

=EN [*] Had there been XS files or other more complex build steps, these also would have happened here.

=CN [*] Had There Been XS Files Or Other More 综合的 Build 步骤, These Also Would Have Happened Here.

=EN [] The perl that invoked the Makefile.PL is used for all configuration decisions.

=CN [] The Perl That invoked The Makefile.PL Is Used For All Configuration 决定.

=EN If you have more than one version of Perl installed on your system, be sure to execute the Makefile.PL with the correct one.

=CN If You Have More Than One Version Of Perl 安装 On Your System, Be Sure To Execute The Makefile.PL With The 正确的 One.

=EN From there, full paths are always used, so there's no chance of mixing anything else up.

=CN From There, Full paths Are Always Used, So There's No Chance Of 混合 Anything Else Up.

=EN The test harness runs all files in the t subdirectory that end in .t in their natural order.

=CN The Test 支配 跑 All Files In The t 子目录 That End In .t In Their 自然的 Order.

=EN You have only one file (created by h2xs), which looks like this:

=CN You Have Only One File (Created By h2xs), Which Looks Like This:

=EN $ cat t/1.t # Before 'make install' is performed this script should be runnable with # 'make test'.

=CN $ 猫 t/1.t # Before 'Make 安装' Is 进行 This 临时单据 Should Be runnable With # 'Make Test'.

=EN After 'make install' it should work as 'perl 1.t'

=CN After 'Make 安装' It Should Work As 'Perl 1.t'

=EN # change 'tests => 1' to 'tests => last_test_to_print';

=CN # Change '测试 => 1' To '测试 => last_test_to_print';

=EN use Test::More tests => 1; BEGIN { use_ok('Island::Plotting::Maps') };

=CN Use Test::More 测试 => 1; BEGIN { use_ok('Island::Plotting::Maps') };

=EN # Insert your test code below, the Test::More module is use( )ed here so read # its manpage ( perldoc Test::More ) for help writing this test script.

=CN # Insert Your Test Code Below, The Test::More Module Is Use( )艾德 Here So Read # Its manpage ( perldoc Test::More ) For Help 写作 This Test 临时单据.

=EN It's a simple test program.

=CN It's a Simple Test Program.

=EN The test pulls in the Test::More module, described further in Chapter 17.

=CN The Test pulls In The Test::More Module, Described Further In Chapter 17.

=EN The import list for the module is treated specially; you're declaring that this test file consists of only one "test."

=CN The Import List For The Module Is treated Specially; You'Re 宣布 That This Test File consists Of Only One "Test."

=EN The test is given in the following line and attempts to use the module.

=CN The Test Is Given In The Following Line And Attempts To Use The Module.

=EN If this succeeds, you get an "OK" sign, and the overall test file succeeds.

=CN If This 成功, You Get An "OK" Sign, And The 总的 Test File 成功.

=EN This would fail if the module had a syntax error, or if you forgot to have that true value at the end of the file.

=CN This Would 失败 If The Module Had a Syntax Error, Or If You forgot To Have That True Value At The End Of The File.

=EN In this example, the test succeeds, so you get a message for it and a summary of the CPU time used for the test.

=CN In This Example, The Test 成功, So You Get a 音讯 For It And a 概要 Of The CPU Time Used For The Test.

=EN Trivial make install Since you know the module can at least compile, let's be daring and install it.

=CN Trivial Make 安装 Since You Know The Module Can At Least Compile, Let's Be 大胆的 And 安装 It.

=EN Of course, you're installing it only into the path specified by the PREFIX in the earlier step, but that's enough to show how it would have worked for the user's installation .[*] The installation is triggered with make install:

=CN Of Course, You'Re installing It Only Into The Path 指定 By The PREFIX In The Earlier 脚步, But That's Enough To Show How It Would Have 工作 For The User's 安装 .[*] The 安装 Is 触发 With Make 安装:

=EN [*] If you're playing along at home, be sure not to install this pretend module anywhere but in a temporary, testing directory.

=CN [*] If You'Re 玩 沿着 At 家, Be Sure Not To 安装 This 假装 Module Anywhere But In a temporary, testing Directory.

=EN Although removing an installed module is generally difficult, you'll be able to simply delete the testing directory, along with its contents.

=CN Although removing An 安装 Module Is Generally 困难的, You'我 Be Able To Simply Delete The testing Directory, 沿着 With Its Contents.

=EN $ make install Manifying blib/man3/Island::Plotting::Maps.3 Installing /home/ginger/Testing/lib/site_perl/5.8.7/Island/Plotting/Maps.pm Installing /home/ginger/Testing/man/man3/Island::Plotting::Maps.3 Writing /home/ginger/Testing/lib/site_perl/5.8.7/darwin/auto/Island/Plotting/Maps/. packlist Appending installation info to /home/ginger/Testing/lib/site_perl/5.8.7/darwin/ perllocal.pod

=CN $ Make 安装 Manifying blib/man3/Island::Plotting::Maps.3 Installing /家/姜/Testing/lib/site_perl/5.8.7/Island/Plotting/Maps.pm Installing /家/姜/Testing/人/man3/Island::Plotting::Maps.3 Writing /家/姜/Testing/lib/site_perl/5.8.7/darwin/Auto/Island/Plotting/Maps/. packlist Appending 安装 信息 To /家/姜/Testing/lib/site_perl/5.8.7/darwin/ perllocal.pod

=EN Note that you're installing the module below the $PREFIX/lib/site_lib directory (presuming a PREFIX of /home/ginger/Testing from earlier) and a manpage below $PREFIX/man (on Unix machines, in the Section 3 area for subroutines, for example).

=CN Note That You'Re installing The Module Below The $PREFIX/lib/site_lib Directory (就算 a PREFIX Of /家/姜/Testing From Earlier) And a manpage Below $PREFIX/人 (On Unix Machines, In The Section 3 Area For Subroutines, For Example).

=EN The manpage comes automatically when you extract the module's POD data and convert it to TRoff -man code, making it compatible with the Unix man command.[]

=CN The manpage 来 Automatically When You 取出 The Module's POD Data And Convert It To TRoff -人 Code, 制作 It Compatible With The Unix 人 命令.[]

=EN [] On a non-Unix system, or even a few odd Unix systems, you'll see different behavior but roughly the same overall result.

=CN [] On a Non-Unix System, Or Even a Few 古怪的 Unix 系统, You'我 See Different Behavior But 大约地 The Same 总的 Result.

=EN Trivial make dist After some testing, you may decide it's time to share your work with friends and associates.

=CN Trivial Make dist After Some testing, You May Decide It's Time To 份 Your Work With 朋友 And Associates.

=EN To do this, make a single distribution file.

=CN To Do This, Make a Single 分配 File.

=EN Many mechanisms are available to do this, but the most common one on most modern Unix platforms is the GNU gzip compressed tar archive, commonly named with a .tar.gz or .tgz extension.

=CN Many 机制 Are Available To Do This, But The Most Common One On Most Modern Unix Platforms Is The GNU gzip compressed 沥青 archive, 通常 Named With a .tar.gz Or .tgz 延伸.

=EN Again, with a simple make invocation (make dist), you end up with the required file:

=CN Again, With a Simple Make 调用 (Make dist), You End Up With The 要求 File:

=EN $ make dist rm -rf Island-Plotting-Maps-0.01 /usr/local/bin/perl "-MExtUtils::Manifest=manicopy, maniread" \

=CN $ Make dist rm -rf Island-Plotting-Maps-0.01 /usr/Local/bin/Perl "-MExtUtils::Manifest=manicopy, maniread" \

=EN Now there's a file named Island-Plotting-Maps-0.01.tar.gz in the directory.

=CN Now There's a File Named Island-Plotting-Maps-0.01.tar.gz In The Directory.

=EN The version number in the name comes from the module's $VERSION variable.[*]

=CN The Version Number In The Name 来 From The Module's $VERSION Variable.[*]

=EN [*] If there's more than one module, you need to designate the primary module in the Makefile.PL.

=CN [*] If There's More Than One Module, You Need To 指明 The 首要的 Module In The Makefile.PL.

=EN Using the Alternate Library Location The libraries are installed relative to the PREFIX specified earlier.

=CN Using The Alternate Library Location The 库 Are 安装 亲戚 To The PREFIX 指定 Earlier.

=EN If Ginger used a PREFIX of /home/ginger/Testing, you need to add the appropriate directory below it to the search path.

=CN If Ginger Used a PREFIX Of /家/姜/Testing, You Need To 增添 The 恰当的 Directory Below It To The 搜查 Path.

=EN The use lib directive of:

=CN The Use lib 命令 Of:

=EN use lib '/home/ginger/Testing/lib/site_perl';

=CN Use lib '/家/姜/Testing/lib/site_perl';

=EN does the right thing to find the version-specific directory below it, as well as the architecture-specific directory below it, if needed (usually for architecture-specific files, such as compiled binaries).

=CN Does The Right Thing To 寻找 The Version-特殊的 Directory Below It, As Well As The 建筑学-特殊的 Directory Below It, If Needed (Usually For 建筑学-特殊的 Files, Such As Compiled binaries).

=EN You can also specify the include directory on the command line with a -M option:

=CN You Can Also Specify The Include Directory On The 命令 Line With a -M 选择:

=EN $ perl -Mlib=/home/ginger/Testing/lib/site_perl myproggy

=CN $ Perl -Mlib=/家/姜/Testing/lib/site_perl myproggy

=EN or a -I option:

=CN Or a -I 选择:

=EN $ perl -I /home/ginger/Testing/lib/site_perl myproggy

=CN $ Perl -I /家/姜/Testing/lib/site_perl myproggy

=EN or even by setting the PERL5LIB environment variable (using sh-like syntax here):

=CN Or Even By Setting The PERL5LIB 环境 Variable (Using sh-Like Syntax Here):

=EN $ PERL5LIB=/home/ginger/Testing/lib/site_perl; export PERL5LIB $ ./myproggy

=CN $ PERL5LIB=/家/姜/Testing/lib/site_perl; Export PERL5LIB $ ./myproggy

=EN However, the downside of any of these methods (other than the use lib method) is that they require you to do something more than just execute the file.

=CN However, The downside Of Any Of These Methods (Other Than The Use lib Method) Is That They Require You To Do Something More Than Just Execute The File.

=EN If someone (or something) else (such as a coworker or a web server) executes your program, it's unlikely that the proper environment variable or command-line option will be present.

=CN If Someone (Or Something) Else (Such As a coworker Or a 网 server) 实行 Your Program, It's 未必的 That The 合适的 环境 Variable Or 命令-Line 选择 Will Be 在场的.

=EN Your program will fail because it can't find your locally installed module.

=CN Your Program Will 失败 Because It Can't 寻找 Your Locally 安装 Module.

=EN Use use lib when you can.

=CN Use Use lib When You Can.

=EN The other ways are useful mainly for trying out a new version of an old module before replacing the old module (and possibly breaking the programs that use it).

=CN The Other Ways Are Useful 主要地 For 尝试 Out a New Version Of An Old Module Before replacing The Old Module (And Possibly 打破 The Programs That Use It).

=EN Exercise You can find the answer to this exercise in "Answer for Chapter 16" in the Appendix.

=CN Exercise You Can 寻找 The Answer To This 锻炼 In "Answer For Chapter 16" In The Appendix.

=EN Exercise [30 min] Package up the Animal and Horse classes from Chapter 12 as a distribution.

=CN Exercise [30 min] Package Up The Animal And Horse 类 From Chapter 12 As a 分配.

=EN Be sure to add the proper POD documentation for the subroutine.

=CN Be Sure To 增添 The 合适的 POD 提供文件 For The Subroutine.

=EN Test the module, install it locally, and then build a distribution file.

=CN Test The Module, 安装 It Locally, And Then Build a 分配 File.

=EN If you have time, unpack the distribution into a different directory, pick a new prefix, and install it again to verify that the distribution archive contains everything necessary.

=CN If You Have Time, unpack The 分配 Into a Different Directory, 拣 a New 前缀, And 安装 It Again To 检验 That The 分配 archive 包含 Everything 必要的.

