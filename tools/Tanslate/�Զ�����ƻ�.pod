=encoding utf8

# ============== POD 内容介绍===============
# 自动翻译计划 
# =========================================

# 日期：Thu Sep  1 16:17:38 2011
# 作者: 宋志泉 songzhiquan@hotmail.com

=head1 自动文本翻译计划

将一种语言的文本，翻译成另外一种语言。英语=中文
可以扩展成从一种编程语言翻译成另外一种语言。

=head2 文本解析

将文本解析成较小的单位，这个单位不是最小的单位，但是规范的单位。
可能是句子，可能是一段标题，可能是一个段落。

=head3 需要组件

sqlite 数据库保存查询，文本自动断行，自动排版。
文本解析，POD解析技术

=head3 数据结构

类似如下的数据结构（数据库）
 
 word1 单词1
 word2 单词2
 sentense1 句子1
 token1 标点1

=head2 需要完成的任务

=head3 文本编码判断

将一个文件的编码进行判断，并转换成 C<utf8> 格式，因为Perl内部都是用 utf8 处理。
将文件放入 C<txt> 目录，执行脚本 F<Format_utf8.pl>, 系统会自动生成 C<gbk> 
C<utf8> 两个目录，如果源文件是 gb2312 的编码，则在 gbk 目录中的文件应当是
正确的，如果源文件是 utf8 的编码，则在 utf8 目录中的文件是正常的。

=head3 基本数据结构

 书名 : 章名 : 节名 : 内容
 1 : 2 : 3: English Sentense

=head3 将英文素材进行处理

这个项目的目标是将英文资料翻译成中文文档。
先从POD文档入手，翻译成的中文也转换成POD文档，便于转换和维护。
维护结果，可以按照标准数据结构来进行维护。

=head3 如果按照 POD 的格式保存格式信息。

 1. 高亮显示的特殊字符L<>,C<>,F<>做成特殊字符字典。不翻译。
 2. 使用文本 Sentense 模块解析英文资料，解析成一句一句的格式。
 3. 将段落信息保存成一个数据结构。
 4. 将head信息单独保存起来。
 5. 根据保存的数据结构可以恢复POD文档。

=head2 自动断句模块使用

将一段英文文档，按照语句分离成一句一句的。

=head2 文本预处理

 自动拼写检查
 重新格式化
 去除连续的空行
 去除后缀的空格
 将所有的标点符号替换成半角的 ASCII 空格

=head3 POD 检查
 
 podchecker 检查语法
 Pod::Text 转换成文本
 Pod::Simple 的接口一定要搞明白，将各种解析中间量保存。

=head3 C<pod> C<sen> C<stb> 文件格式

使用复制或黏贴或其他手段将英文文档保存为 C<pod> 文件格式。
通过手工处理，将文件结构添加进去。
使用处理脚本转换成 C<sen> 文件格式。这个格式用于手工翻译使用。
翻译完后，将 C<sen> 文件格式转换成 C<stb> 数据库格式，用于查询。
根据转换成 C<pod> 文件的脚本，同时检索 C<stb> 数据库格式。
获取自动翻译对照文件 C<sen> 格式。

=head3 C<Pod> 格式

PerlDoc 的格式是 Pod 格式，可以将 Pod 格式转换成 C<sen> 格式。
将所有的文件处理从 C<Pod> 开始, 

=head4 手工修改文本文件

将原始英文文档按照以下规则进行修改：
 
 1. 断句：独立意思的语句
 2. 标题设置：按照层次分类
 3. 不需要翻译的单词列表

先制作一个脚本，按照一定规则，自动生成 POD 文档
使用 AutoFormat 进行预先格式化。没有达到预期效果。

=head2 自动断句模块

L<Lingua::Sentence> 是最新的断句模块，可以支持
 
 Catalan
 Dutch
 English
 French
 German
 Greek
 Italian
 Portuguese
 Spanish

=head2 自动翻译格式

若不匹配，将其中的单词拆分，把相应的意思放到 C<#> 后面。将相关信息放置进去。

=head2 词典累计过程

从基本单词入手，词组，常用词，常用结构，另一方面，从段落入手，到语句，到
习惯性用法，两方面完善匹配数据库。

=head2 stable 文件的集成

每个翻译文件生成一个 C<stb> 文件。制作一个脚本，将所有 C<stb> 文件集成在一起。
生成一个大的 C<stb> 文件。或者采取一些技巧，优化这个频繁读取的过程。
这个处理数据量很大的过程，需要一些判断技巧
 
 设立文件列表和日期数据结构，如果有更新，就加载，如相同，就不加载。

=head2 文件镜像建立

建立一个文件夹的文件序列，再次加载时，输出有更新的文件名。

=cut
# vim:tw=78:ts=8:ft=pod:norl:


