前言

错误，就像稻草，漂浮在水面上；搜寻珍珠的人必须潜入水下。--约翰.德莱登（一切为了爱，序曲）

写这本书有两个目的；一是使你成为Perl专家，二是在更广泛的意义上，为你补充编写应用系统的技能和工具。本书讲述了Perl语言的高级特性，教你学习perl解释器的工作原理，以及诸如网络计算，用户界面，对象的持续存储(Persistence)与代码生成等现代计算技术。

从这本书中，你不仅仅会涉及Perl语言的语法和各种模块的API(应用程序接口），你同样要花费相当的时间来处理现实情况中的问题，如在远程过程调用中避免死锁，在平面文件（flat file)或数据库的存储方式之间进行平滑的切换。同时，你将熟练使用诸如运行时（run-time)计算，嵌套数据结构，对象以及闭包（closure)一类的技巧。

在你读这本书以前，你需要了解Perl的基本知识，实际上只需要其中关键的一小部分就可以了。你必须熟知其基本数据类型（标准标量，数组和散列表），正则表达式，子例程，基本控制结构（if,while,unless,for, foreach), 文件的输入输出，以及一些标准变量如@ARGV和$_等。如果你对这些不甚了解的话，我向你推荐Randal Schwartz与Tom Christiansen所著的优秀辅导教程<<Learning Perl>>第二版。

这本书，特别是这段序言，将详细阐述我的两条理念。

第一条理念是，对于处理哪些典型的大型应用系统的工程而言，同时采用两种语言的方案，也就是将Perl，Visual Basic，Python或Tcl这样的脚本语言，同系统编程语言（C，C++, JAVA)结合起来的方案最为合适。脚本语言没有严格的编译时（compile-time)类型检查，拥有高级数据结构（例如Perl中作为基本数据类型的散列表，C语言中就没有这种东西），一般没有附加的编译与链接过程。系统编程语言则往往更加贴近操作系统，具有精细的数据类型（如C语言中就有short, int, long, unsigned int, float, double等等， 而Perl中却只有标量变量类型），通常要比解释语言运行块，Perl拥有多种编程语言的许多特性。作为脚本语言他表现出色，然而他也提供低级的 访问操作系统API的功能，其速度要比Java快许多，而且需要的话还可以进行编译。

讨论骄傲本语言与系统编程语言的差异是一个 有争议的话题，但是实践中我却因此获益匪浅。这一点将在最后三章中着重阐述。

我相信这两种语言没有一种具备足够的特性，可以独立处理复杂应用项目的开发。而且我希望能够将前面提到的结合两类语言的方案以Perl和C/C++为例阐述清楚，即便是你选择使用其他语言，如果本书中所讲述的涉及思想和教训对你有所帮助的话，那么就像孩子们常说的，“这样真值，这太棒了”。

我的第二条理念就是：要想部署更为有效的应用系统，仅熟知编程语言的语法是不够的。你必须更进一步了解语言的内部机制，必须扎实额掌握诸如网络，用户界面，数据库等技术领域的知识（尤其是那些超出特定语言功能库的知识）。

让我们来更详细的阐述一下这两条理念。

脚本编程语言

我的职业生涯始于用汇编语言来创建整个应用系统。那时我不时担心的是如何节省100个字节的空间和优化删除一条指令。后来C和PL/M改变了我的世界观。使自己有机会从工程项目的生命周期和最终用户如何使用等方面，从整体上把握应用系统。对于中断服务例程而言，当运行效率是最首要的需求时，我依旧使用汇编语言（回首过去，我曾怀疑过PL/M编译器产生的汇编指令是否能比我手工编制的更为出色，我的虚荣心使我始终无法承认这一点）。

我参与的应用系统需求越来越复杂；除了要处理图形用户界面，事务，安全，网络无关和异构平台的问题，我又开始着手进行诸如航空调度和网络管理一类问题的软件体系结构设计。我自己的工作效率却要比应用系统的更成问题。虽然面向对象计数使我在设计上更有效率，而系统实现语言C++,还有那些功能库和工具并没有帮助我提高编程水平。我仍旧需要处理诸如为动态数组，元数据，文本操纵和内存管理等创建应用框架之类的底层问题。不幸的是，能够很好的处理此类问题的计算环境如Eiffel, Smalltalk和NeXT系统对我的组织而言并不实用。你也许现在可以理解，为什么我会成为支持选择Java语言作为应用开发语言的嗓门嘶哑的啦啦队长了，尽管这还不是最终的结果。

近来我渐渐发现自己忽略了软件生命周期中的两大时间黑洞，在设计阶段，有时你要想清楚的理解问题，就需要创建“电子情节串联图版”（也就是原型）。在该软件完成后，用户 通常很会对他们所看到的一切挑三拣四。这就意味着即便是基于窗体的简单界面也会被不时的修改，不停的产生新的需求报告。于是，那些急于求成的开发人员就希望在该软件的开发一完成就进入另一个项目。这里就是脚本语言的用武之地。他能够提供快速的代码修改，动态用户界面，绝佳的文本处理功能，运行时计算和良好的数据库与网络连通性，最重要的是，他们不需要细致的程序员的精心呵护。你可以将注意力放在如何使应用更加以用户为中心，而不是如何用Xlib库（X Windows函数库）来画饼图上。

显而易见，单独使用脚本语言来开发复杂的应用并不可行。你仍需要那些诸如运行效率，精细的数据结构和类型安全之类的特性。（这一点在多个程序员处理同一个问题时尤为重要。）这也是我热心支持将脚本语言同C/C++(当性能达到实际应用水平时，Java也是一种选择）结合起来使用的原因。许多人从这种基于组件的形式的开发中获益匪浅，这是一种用C语言来书写组件代码，然后使用脚本语言将将组件连接起来的方法。你去问一下那些众多的Visual Basic，PowerBuilder，Delphi，Tcl和Perl程序员们就知道了。哦，对了，还有微软的Office和Emacs用户们。

要寻找对使用脚本编程更为详尽而雄辩的，根据切身体会描述的文章，你可以读一读John Outterhout博士的文章，地址在http://www.scripttics.com/people/john.ousterhout.

想要更真切的体味一下这种论断的话，请试用一下在上面的哪个地址中提到的Netscape的Tcl插件，看一看Tcl小应用程序（Tclets)的代码，你会发现用它来解决一些简单问题是多么的简洁。一个包含用户界面的计算器小应用程序只花费了100行代码，恐怕与同样功能的Java小应用程序的代码量不会低于800行，而且远没有前者灵活。

为什么要选择Perl语言

那么为什恶魔要选择使用Perl而不是Visual Basic,Tcl或Python呢？

尽管Visual Basic在Intel的PC上是一种优秀的选择额，但是它无法在其他平台上运行，因此对我来说，他就不是一种实际可行的选择。

Tcl会使我更频繁的使用C语言，主要就是因为数据和代码结构的原因。TCL的性能对我来说并不是一种关键因素。因为我通常考虑到这一实际情况，所以只用它来书写哪些对性能要求不高的部分。我向你推荐Brian Kernighan的文章“Tcl在科学与工程可视化中的应用经验谈”中有关Tcl和Visual Basic的论述。他的获取地址为http://inferno.bell-labs.com/cm/cs/who/bw/.

大多数的Tcl用户基本上都离不开Tk用户界面包。我也不例外。在Perl中同样也可以使用Tk，因此我可以在首选的语言中使用另一种语言环境中的最为优秀的特性。

我是个不折不扣的Python的崇拜者。这是一种由Guido van Rossum开发的脚本语言。Python语言拥有清晰的语法结构，李爱那个号的面向对象机制和线程安全，拥有大量的功能库及与C语言的完美接口。我之所以更倾向于Perl是出于实用而不是工程上的原因。在工程方面，Perl语言在文本处理上快速而无可替代。其语言高度专业化，也就意味着比一般用其他语言编写出的代码更为紧凑。后者或许不是种好事，这要看你持何种观点（尤其对于Python程序员来说）。所有这些特性使Perl成为一种构造工具的优秀编程语言。在其他方面，Python则拥有更多的优势。我建议你进行认真的分析。Mark Lutz的《Programming Python》（O'Reilly公司1996年出版）一书对Python的语言和功能库进行了很好的描述。

从实用角度讲，你当地的书店和报纸上的招工信息已经表明了Perl语言的流行性，基本上说，这就意味着更容易雇佣到perl程序员，或是人们可以很快的学习这种语言。我敢打赌，95%的程序员甚至从没听说过Python语言，不幸的是，这种情况是真的。

把玩这些语言并得出你自己的结论是必要的；毕竟，前面的一些观察都带有我个人的色彩。正如Byron Langenfeld所说的：“很少有人能不经实地测量而发现别人的错误。”本书将把Tcl,Python,Java,Perl在具体特性上做一比较，我要强调的是，对语言和开发工具的选择，从来没有定论，也不是非此即彼的，我还要说明，大多数时候，你可以使用其中一种，也可以使用另外一种。

我必须要了解什么？
我想在应用系统中更有效的使用Perl语言，你必须熟知以下三方面信息：

语言的语法及语言所提供的专业术语

Perl解释器本身，这是为了书写Perl脚本程序的C语言扩展，或是将Perl解释器嵌入到你的C/C++应用系统中。

诸如网络，用户界面，万维网和持续性存储等相关技术问题

语言语法
指针（Pointer)或引用(reference)可以使你创建非常复杂的数据结构。Perl语言支持引用，而且还允许你无须进行繁琐的声明，即可直接书写代码，因此成为一种功能极其强大的编程语言，例如，你只用一行代码就能创建由数组的散列表所组成的数组。

Perl支持对子例程的引用和一种成为闭包的强大结构。LISP程序员对此可能比较熟悉，这实际上是一种没有名字的子例程，通过上下文环境来交换信息。这种机制极其相关专业用语将在第四章“子例程引用与闭包”中予以澄清并加以很好的利用。

引用只是一种间接存取的方式。标量变量中可以包含指向C数据结构的嵌入式指针。Tie代表着另外一种形式的间接存取：所有Perl的值在创建，存取或释放时都可以有选择的触发特定的Perl子例程。

Perl解释器
有三个章节用以讲述使用和理解Perl解释器，如此深入研究Perl的内部工作情况，主要有两方面的原因。一个是为了扩展Perl，也就是通过书写C模块的方式，来完成不适合Perl来做的或者速度不够快的功能。另一个原因就是为了在C中嵌入Perl执行环境，这样，C程序就可以调用Perl，完成诸如处理正则表达式替换等，你或许不想通过编写C代码来完成的特定任务。

第十八章 “扩展Perl：第一课“， 讲解了两个用于扩展Perl解释器而创建动态加载C功能库的工具（xsubpp和SWIG).









