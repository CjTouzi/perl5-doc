第十八章 扩展Perl 第一课

与使用系统编程语言相比，脚本语言差不多总是一种更加令人愉快和多产的另类解决方案。然而脚本语言并不是天生就能做任何事情，你有时候仍然需要深入C/C++来获得速度优势，精细的数据结构，类型安全以及对现有功能库的存取。与awk和早期的版本的BASIC相比，Perl，Visual Basi，Python和Tcl这些语言因为具有很好的与C语言结合的能力，获得了严肃开发语言的地位，而前者则人少用于产品化应用系统的开发。

在这一章，我们来查看一下将Perl与C代码粘合在一起的是些什么东西，然后在来学习两个帮助我们完成大量此类联编任务的工具集。其中第一个是一对称做 hexs 和 xsubpp 的工具，他们与Perl发行版捆绑在一起。我们将对这对工具简称为XS,因为他还涉及了一种与之具有相同名字的中间语言。另一种工具就是由犹他大学的Dave Beazley编写的SWIG(Simplified Wrapper and Interface Generator, 简化包裹程序和接口生成程序）。

内存管理

Perl自动的管理为用户定义变量分配的内存空间，而C则要求程序员来处理所有的细节。当数据跨越Perl与C的接口时显得尤为重要。不幸的是，C函数从外表看不能提供任何有关其内存管理的方式的线索；开发人员都很难推测出来，更不要说想SWIG和XS这样的自动工具了。让我们假定C矩阵库

引导与初始化
对伊要在Perl中调用的C库来说，它需要被静态的或动态的连接到Perl解释器中。由于XS和SWIG所产生的Perl模块就包含了用于进行引导和初始化C库的代码。（上面所描述的其他函数均出现在C包裹代码中。）

扩展流程
C头文件（如Matrix.h）中包含了数据结构声明，预处理宏，公共存取的变量以及函数原型 -- 实质上就是C库的接口。你通常不会允许从Perl脚本中存取所有的功能；没有比在Perl中尝试C编程更糟糕的了。在大多数情况下，开放一些公共函数的子集以及一些常量（一般以初始化过的常量，#define 或 enum的形式出现）就足够了。我们统一将它们称之为公共接口，并将它们抽取到ige公共头文件中。

公共头文件中可能包含复杂的C声明。SWIG需要作为扩展开发人员的你将其精简为比较简单的形式，并以接口定义语言的形式表达出来。幸运的是，这种语言与ANSI C和简单的C++如此接近，以至于大量的头文件都无须任何转换工作要做。SWIG将会从接口描述产生粘连代码；就Matrix的情况而言，产生的就是Matrix.pm和Matrix_wrap.c。如果你的系统支持动态连接(在Unix上就是共享库，在Windows上就是DLL),而且如果Perl可执行程序建立时支持使用他的话，那么所有要做的工作就是将粘连代码和你的C库转换成一个动态连接库。如果没有动态连接这个选项，那么将会通过静态的连接Perl功能集库（Unix上是指libperl.a，Windows上则是Perl.lib）与上面所提到的代码，来生成一个新的Perl可执行文件。

h2xs与xsubpp采用的方式稍有不同。hexs理解C头文件（但不是C++).并将所有的常量和函数原型都转换成一种称做XS的元语言。但是对于脚本编程来说，


SWIG的功能
在完成了一趟编写扩展模块的旅行之后，让我们再来仔细看一看SWIG的众多功能，我们前面提到过SWIG可以处理一部分有用的ANSI C/C++子集，也就是说他不但支持函数还支持数据结构。具体的讲，它支持下面的内容：

常量与全局变量
一个C变量可以以一个拥有相同名字的标量变量的形式，输入到Perl空间中。SWIG支持基础C数据类型，enum和#define常量。具有复杂或用户定义数据类型的变量，将会自动的映射到一对get/set存取函数。

指针
默认情况下，每个指针都被当作void *,而不管他是 char **还是Matrix * 或是double ***.这种策略对于用户定义的数据类型来说工作的非常好，这是因为大多数C库并不需要你来解析这些指针。例如, fopen返回一个 FILE *, 然后简单的交给 fread()和fwrite().在Perl中以标量变量的形式进行使用。而Perl不必知道该指针指向的是一个数组，还是结构，或是一个typedef.另一方面，如果你需要一个指向具有整数值标量变量的列表的Vector *的话，那么你就必须提供给SWIG一个类型映射。

类型映射
并不是所有的数据类型都是Perl与C之间的简单转换。SWIG为你提供了一种编写任意转换的方法，如把一个Perl数组转换成10X10的矩阵。要编写一个类型映射，你需要了解用于存取内部数据类型的Perl API.因此我们将在第二十章的”SWIG的类型映射“一节再来讨论这个话题。类型映射不仅可以应用于函数参考，还可以用在结构成员和全局变量中。你还可以选择创建有名类型映射，将其应用于特定的有名实体（函数参数，变量名，函数名），而不是那个类型的所有实体。

数组
无论是简单数组还是多为数组都被映射到一个简单的指针（Vector *).存在支持数组的类型映射，但是仍然存在许多SWIG不能提供一致解决方案的棘手问题：请你查阅SWIG文档来获得更详细的信息。


