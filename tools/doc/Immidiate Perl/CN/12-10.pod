12.10. Getting Our Deposit Back
12.10. 取回存储
Because of the way the code is written, the setter also returns the updated value. Think about this (and document it) when we write a setter. What does the setter return? Here are some common variations:
    *　    The updated parameter (same as what was passed in)
    *      The previous value (similar to the way umask or the single-argument form of select works)
    *      The object itself
    *      A success/fail code
根据代码的写法，　设置方法也可以返回更新的值。　当我们写设值代码时我们要考虑,或者要写下来。　设置代码应该返回什么？下面是一般的答案：
	＊	更新过的值（类似于传入的是什么）
	＊	以前的值（类似于用掩码的方法或选择工作时单值形式的参数）
	＊	对象自身
	＊	成功／失败码
Each has advantages and disadvantages. For example, if we return the updated parameter, we can use it again for another object:
$tv_horse->set_color( $eating->set_color( color_from_user(  ) ));
几种方法各有优缺点。　比如，如果我们返回更新的值，我们可以将其用于其它的对象：
$tv_horse->set_color( $eating->set_color( color_from_user(  ) ));
The implementation given earlier returns the newly updated value. Frequently, this is the easiest code to write, and often the fastest to execute.
上面的例子返回新更新的值。　一般来说，这样写代码是容易，执行起来也最快。
If we return the previous parameter, we can easily create "set this value temporarily to that" functions:
{
  my $old_color = $tv_horse->set_color(‘orange’);
  … do things with $tv_horse …
  $tv_horse->set_color($old_color);
}
如果我们返回更改前的值，我们可以容易地写临时处理程序：
{
  my $old_color = $tv_horse->set_color(‘orange’);
  … do things with $tv_horse …
  $tv_horse->set_color($old_color);
}
This is implemented as:
sub set_color {
  my $self = shift;
  my $old = $self->{Color};
  $self->{Color} = shift;
  $old;
}
实现结果是：
sub set_color {
  my $self = shift;
  my $old = $self->{Color};
  $self->{Color} = shift;
  $old;
}
For more efficiency, we can avoid stashing the previous value when in a void context using the wantarray function:
sub set_color {
  my $self = shift;
  if (defined wantarray) {
    # this method call is not in void context, so
    # the return value matters
    my $old = $self->{Color};
    $self->{Color} = shift;
    $old;
  } else {
    # this method call is in void context
    $self->{Color} = shift;
  }
}
为了效率，　我们可以用wantarray函数在没有返回值的情况下不存以前的值：
sub set_color {
  my $self = shift;
  if (defined wantarray) {
    # this method call is not in void context, so
    # the return value matters
    my $old = $self->{Color};
    $self->{Color} = shift;
    $old;
  } else {
    # this method call is in void context
    $self->{Color} = shift;
  }
}
If we return the object itself, we can chain settings:
my $tv_horse =
  Horse->named(‘Mr. Ed’)
       ->set_color(‘grey’)
       ->set_age(4)
       ->set_height(’17 hands’);
如果想返回对象自身，我们可以链式设置：
my $tv_horse =
  Horse->named(‘Mr. Ed’)
       ->set_color(‘grey’)
       ->set_age(4)
       ->set_height(’17 hands’);
This works because the output of each setter is the original object, becoming the object for the next method call. Implementing this is, again, relatively easy:
sub set_color {
  my $self = shift;
  $self->{Color} = shift;
  $self;
}
这样的代码是可行的，因为每个设置方法都是原始对象，　成为下个方法调用对象。　还可以这样：
sub set_color {
  my $self = shift;
  $self->{Color} = shift;
  $self;
}
The void context trick can be used here too, although with questionable value because we’ve already established $self.
避免无返回值的方法这里也可以使用，尽管我们已经建立了$self变量。
Finally, returning a success status is useful if it’s fairly common for an update to fail, rather than an exceptional event. The other variations would have to indicate failure by throwing an exception with die.
最后，　如果程序明显出错，返回一个返回状态要比一个意外报错要好。　其它的变化会发一个例外并终止程序，以示程序错误。
In summary: use what you want, be consistent if you can, but document it nonetheless (and don’t change it after you’ve already released one version).
总结：经过考虑后，按需要应用，　但无论如何要写下来（而且在发布后不要再改）。


