9.1. Review of Sorting
9.1. 再来看一下排序
Perl’s built-in sort operator sorts text strings in their natural text order, by default.[*] This is fine if we want to sort text strings:
    [*] My friends call that the "ASCIIbetical" ordering. Normally, modern Perl doesn’t use ASCII; instead, it uses a default sort order, depending on the current locale and character set. See the perllocale (not perllocal!) manpage.
my @sorted = sort qw(Gilligan Skipper Professor Ginger Mary_Ann);
Perl内建的sort排序操作符缺省情况下将文本字串以他们的字符顺序进行排序。[*] 这在我们进行字符排序时没有任何问题：
    [*] 我朋友把这叫做“按ASCII表顺序”排序。 通常来说， 当前的Perl已经不用ASCII字符表了； 它依照当前的缺省字符集的排序顺序来进行排序。 具体可以查看perllocale(不是perllocal!)文档页。
my @sorted = sort qw(Gilligan Skipper Professor Ginger Mary_Ann);
but gets pretty messy when we want to sort numbers:
my @wrongly_sorted = sort 1, 2, 4, 8, 16, 32;
可是，当我们对数字进行排序的时候却是一团糟：
my @wrongly_sorted = sort 1, 2, 4, 8, 16, 32;
The resulting list is 1, 16, 2, 32, 4, 8. Why didn’t sort order these properly? It treats each item as a string and sorts them in string order. Any string that begins with 3 sorts before any string that begins with 4.
排序的结果是：1, 16, 2, 32, 4, 8.  为什么不能按正确的顺序排序呢？ 是因为是把它们按字串对待，以字串的顺序进行排序。 任何以3开头的训是排在以4开头的字串之前。
If we don’t want the default sorting order, we don’t need to write an entire sorting algorithm, which is good news since Perl already has a good one of those. But no matter what sorting algorithm we use, at some point we have to look at item A and item B and decide which one comes first. That’s the part we’ll write: code to handle just two items. Perl will do the rest.
如果我们不想按缺省的排序顺序， 我们不必重写整个排序算法， 好消息是Perl已经有好的方法了来处理这件事情了。 因为不管我们采用什么算法， 从某种程序上说，这本质是个Ａ和Ｂ谁靠前的问题。 这就是我们要写的那部分代码：处理两个元素的代码。 然后Perl来处理余下的事情。
By default, as Perl orders the items, it uses a string comparison. We can specify a new comparison using a sort block that we place between the sort keyword and the list of things to sort.[+] Within the sort block, $a and $b stand in for two of the items sort will compare. If we’re sorting numbers, then $a and $b will be two numbers from our list.
在缺省时， 当Perl对元素进行排序的时候， 它采用的是字符比较。 我们可以用一个放在sort关键字与要排序的元素列表中间的代码块来指定排序算法。［＋］ 在排序代码块中， $a和$b代表要比较的两个元素。 如果我们要对数字进行排序， 那么$a和$b会是来自于我们列表中的两个元素。
    [+] We can also used a name subroutine that sort invokes for each comparison.
    [+] 我们同样也可以用命名子程序来每个比较。
The sort block must return a coded value to indicate the sort order. If $a comes before $b in our desired sorting order, it should return -1; it should return +1 if $b comes before $a; if the order doesn’t matter, it should return 0. The order might not matter, for example, if it’s a case-insensitive sort comparing "FRED" to "Fred", or if it’s a numeric sort comparing 42 to 42.[*]
排序代码块必须返回一个代码值来指明排序的次序。 如果我们希望$a在$b前， 我们应该返回-1；反之，$b排在$a前，它应该返回+1；如果次序并不重要，则应该返回0。  所谓次序不重要的意思是，比如， 如果是大小写不敏感的排序， “FRED"和"Fred"， 或者如果数值比较的话，42和42。［＊］
    [*] Actually, we can use any negative or positive number in place of -1 and +1, respectively. Recent Perl versions include a default sorting engine that is stable, so zero returns from the sort block cause the relative ordering of $a and $b to reflect their order in the original list. Older versions of Perl didn’t guarantee such stability, and a future version might not use a stable sort, so don’t rely on it.
    ［＊］实际上， 我们可以用任一个负值或正值来代替-1和+1。 新近的Perl版本的缺省排序引引擎很稳定， 所以，如果返回0，则会使用$a和$b在原来列表里的相对次序。 旧版本的Perl不能保证如此的稳定， 而未来的版本可能不用这种稳定的排序，所以不能依赖于此。
For example, to sort those numbers in their proper order, we can use a sort block comparing $a and $b, like so:
my @numerically_sorted = sort {
  if ($a < $b)    { -1 }
  elsif ($a > $b) { +1 }
  else            {  0 }
} 1, 2, 4, 8, 16, 32;
举个例子， 以正常的次序对数字进行排序， 我们可以用个排序代码块比较$a和$b，像这样：
my @numerically_sorted = sort {
  if ($a < $b)    { -1 }
  elsif ($a > $b) { +1 }
  else            {  0 }
} 1, 2, 4, 8, 16, 32;
Now we have a proper numeric comparison, so we have a proper numeric sort. Of course, this is far too much typing, so we can use the spaceship operator instead:
my @numerically_sorted = sort { $a <=> $b } 1, 2, 4, 8, 16, 32;
目前，我们对数字进行了合适的比较方法，所以有了正常的数字排序。 当然，如此的排序方法还是繁琐， 所以我们可以用一个飞船操作符来代替：
my @numerically_sorted = sort { $a <=> $b } 1, 2, 4, 8, 16, 32;
The spaceship operator returns -1, 0, and +1, according to the rules we laid out. A descending sort is simple in Perl:[＋]
    [＋] As of version 5.8.6, Perl recognizes the reverse sort and does it without generating the temporary, intermediate list.
my @numerically_descending =
    reverse sort { $a <=> $b } 1, 2, 4, 8, 16, 32;
飞船操作符按我们前面的算法返回-1,0或+1。 如果是降序，在Perl中也很简单 ：［＋］
  ［＋］在5.8.6版本中， Perl 识别反向排序，而且并不产生临时，中间列表。
my @numerically_descending =
    reverse sort { $a <=> $b } 1, 2, 4, 8, 16, 32;
But there is more than one way to do it. The spaceship operator is nearsighted; and can’t see which one of its parameters comes from $a and which from $b; it sees only which value is to its left and which is to its right. If we reverse the position of $a and $b, the spaceship will sort everything in the opposite order:
my @numerically_descending =
    sort { $b <=> $a } 1, 2, 4, 8, 16, 32;
但是，所谓殊途同归。 飞船是近视的； 它不能看到参数中哪个来自$a，哪个来自$b；它只看哪个值在它的左边，哪个在右边。 如果$a和$b换了位置， 则飞船操作符则会将其反序排列：
my @numerically_descending =
    sort { $b <=> $a } 1, 2, 4, 8, 16, 32;
In every place the previous sort expression returned -1, this expression returns +1, and vice versa. Thus, the sort is in the opposite order, and so it doesn’t need a reverse. It’s also easy to remember because if $a is to the left of $b, we get out the lower items first, just like a and b would be in the resulting list.
在前例中，表达式原来返回－1的，现在返回＋1，相反也是一样。 所以，排序出来的结果是反向排序，所以也不要reverse关键字了。 这样也容易记得，因为如果$a是在$b左边，我们得到从小到大的排序， 就像a和b在结果列表中一样。
Which way is better? When should we use a reverse sort, and when should we switch $a and $b? Well, in most cases it shouldn’t matter much for efficiency, so it’s probably best to optimize for clarity and use reverse. For a more complex comparison, however, a single reverse may not be up to the task.
哪种方法更好？ 什么时间我们用reverse来反向排序，什么时候用交换 $a和$b位置来排序呢？ 好，大多数情况下，他们对性能上没有什么差异。 所以可能为了表达清楚，我们用reverse. 然而， 为了更复杂的的比较，单个reverse又可能不是最好。
Like the spaceship operator, we can indicate a string sort with cmp, although this is rarely used alone because it is the default comparison. The cmp operator is most often used in more complex comparisons, as we’ll show shortly.
类似于飞船操作符， 我们可以为字串排序用cmp，尽管其很少单独使用，因为它是排序方法。 我们以后马上就会讲到， cmp操作符在复杂比较中非常常用。


