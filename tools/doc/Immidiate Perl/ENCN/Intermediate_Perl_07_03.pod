7.3. Callbacks
7.3. 回调
A subroutine reference is often used for a callback. A callback defines what to do when a subroutine reaches a particular place in an algorithm.
一个对子程序的引用，经常被用来做回调。 一个回调定义了在一个算法中当子程序运行到了一个特定地点时，程序应该做什么。
For example, the File::Find module exports a find subroutine that can efficiently walk through a given filesystem hierarchy in a fairly portable way. In its simplest form, we give the find subroutine two parameters: a starting directory and "what to do" for each file or directory name found recursively below that starting directory. The "what to do" is specified as a subroutine reference:
use File::Find;
sub what_to_do {
  print "$File::Find::name found\n";
}
my @starting_directories = qw(.);
find(\&what_to_do, @starting_directories);
举个例子来说， File::Find模块导出一个find子程序，它被用来以非常可移植的方式高效地遍历给定文件系统的层次结构。 在这个简单的例子中， 我们传给find子程序两个参数：一个表示目录搜索开始点的字串，另一个是对子程序引用。 这子程序会对从给定的起始目录开始，通过递归搜索的方法，找到其下的每个文件或目录，并对它们“干些什么”：
use File::Find;
sub what_to_do {
  print "$File::Find::name found\n";
}
my @starting_directories = qw(.);
find(\&what_to_do, @starting_directories);
find starts at the current directory (.) and locates each file or directory. For each item, we call the subroutine what_to_do( ), passing it a few documented values through global variables. In particular, the value of $File::Find::name is the item’s full pathname (beginning with the starting directory).
在例子中，find程序开始于当前目录（.），并且向下找到所有的目录和文件。 对于找到的每个项目， 我们会调用那个子程序what_to_do()， 把一些全局变量传进去。 一般来说全局变量:$File::Find::name是项目的全路径名（以开始搜索的目录为起点）
In this case, we’re passing both data (the list of starting directories) and behavior as parameters to the find routine.
在此例中，我们传了两项数据（开始搜索的目录）和给find子程序的行为子程序作为参数。
It’s a bit silly to invent a subroutine name to use the name only once, so we can write the previous code using an anonymous subroutine, such as:
use File::Find;
my @starting_directories = qw(.);
find(
  sub {
    print "$File::Find::name found\n";
  },
  @starting_directories,
);
在这里，子程序只使用一次，为此而起个名字的做法好像有些蠢，所以我们还可以把子程序做成匿名子程序，如：
use File::Find;
my @starting_directories = qw(.);
find(
  sub {
    print "$File::Find::name found\n";
  },
  @starting_directories,
);


