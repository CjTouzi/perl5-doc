=head1 NAME
perl - The Perl 5 language interpreter
=head1 SYNOPSIS
B<perl>    S<[ B<-sTtuUWX> ]>
    S<[ B<-hv> ] [ B<-V>[:I<configvar>] ]>
    S<[ B<-cw> ] [ B<-d>[B<t>][:I<debugger>] ] [ B<-D>[I<number/list>] ]>
    S<[ B<-pna> ] [ B<-F>I<pattern> ] [ B<-l>[I<octal>] ] [ B<-0>[I<octal/hexadecimal>] ]>
    S<[ B<-I>I<dir> ] [ B<-m>[B<->]I<module> ] [ B<-M>[B<->]I<'module. . . '> ] [ B<-f> ]>
    S<[ B<-C [I<number/list>] >]>
    S<[ B<-S> ]>
    S<[ B<-x>[I<dir>] ]>
    S<[ B<-i>[I<extension>] ]>
    S<[ [B<-e>|B<-E>] I<'command'> ] [ B<--> ] [ I<programfile> ] [ I<argument> ]. . . >
=head1 GETTING HELP
The F<perldoc> program gives you access to all the documentation that comes with Perl. You can get more documentation, tutorials and community support online at L<http://www. perl. org/>.
If you're new to Perl, you should start by running C<perldoc perlintro>,  which is a general intro for beginners and provides some background to help you navigate the rest of Perl's extensive documentation. Run C<perldoc perldoc> to learn more things you can do with F<perldoc>.
For ease of access, the Perl manual has been split up into several sections.
=head2 Overview
    perl        Perl overview (this section)
    perlintro        Perl introduction for beginners
    perltoc        Perl documentation table of contents
=head2 Tutorials
    perlreftut        Perl references short introduction
    perldsc        Perl data structures intro
    perllol        Perl data structures: arrays of arrays
    perlrequick     Perl regular expressions quick start
    perlretut        Perl regular expressions tutorial
    perlboot        Perl OO tutorial for beginners
    perltoot        Perl OO tutorial, part 1
    perltooc        Perl OO tutorial, part 2
    perlbot        Perl OO tricks and examples
    perlperf        Perl Performance and Optimization Techniques
    perlstyle        Perl style guide
    perlcheat        Perl cheat sheet
    perltrap        Perl traps for the unwary
    perldebtut        Perl debugging tutorial
    perlfaq        Perl frequently asked questions
      perlfaq1        General Questions About Perl
      perlfaq2        Obtaining and Learning about Perl
      perlfaq3        Programming Tools
      perlfaq4        Data Manipulation
      perlfaq5        Files and Formats
      perlfaq6        Regexes
      perlfaq7        Perl Language Issues
      perlfaq8        System Interaction
      perlfaq9        Networking
=head2 Reference Manual
    perlsyn        Perl syntax
    perldata        Perl data structures
    perlop        Perl operators and precedence
    perlsub        Perl subroutines
    perlfunc        Perl built-in functions
      perlopentut    Perl open() tutorial
      perlpacktut    Perl pack() and unpack() tutorial
    perlpod        Perl plain old documentation
    perlpodspec     Perl plain old documentation format specification
    perlpodstyle    Perl POD style guide
    perlrun        Perl execution and options
    perldiag        Perl diagnostic messages
    perllexwarn     Perl warnings and their control
    perldebug        Perl debugging
    perlvar        Perl predefined variables
    perlre        Perl regular expressions, the rest of the story
    perlrebackslash    Perl regular expression backslash sequences
    perlrecharclass    Perl regular expression character classes
    perlreref        Perl regular expressions quick reference
    perlref        Perl references, the rest of the story
    perlform        Perl formats
    perlobj        Perl objects
    perltie        Perl objects hidden behind simple variables
      perldbmfilter    Perl DBM filters
    perlipc        Perl interprocess communication
    perlfork        Perl fork() information
    perlnumber        Perl number semantics
    perlthrtut        Perl threads tutorial
    perlport        Perl portability guide
    perllocale        Perl locale support
    perluniintro    Perl Unicode introduction
    perlunicode     Perl Unicode support
    perlunifaq        Perl Unicode FAQ
    perluniprops    Index of Unicode Version 6. 0. 0 properties in Perl
    perlunitut        Perl Unicode tutorial
    perlebcdic        Considerations for running Perl on EBCDIC platforms
    perlsec        Perl security
    perlmod        Perl modules: how they work
    perlmodlib        Perl modules: how to write and use
    perlmodstyle    Perl modules: how to write modules with style
    perlmodinstall    Perl modules: how to install from CPAN
    perlnewmod        Perl modules: preparing a new module for distribution
    perlpragma        Perl modules: writing a user pragma
    perlutil        utilities packaged with the Perl distribution
    perlcompile     Perl compiler suite intro
    perlfilter        Perl source filters
    perlglossary    Perl Glossary
=head2 Internals and C Language Interface
    perlembed        Perl ways to embed perl in your C or C++ application
    perldebguts     Perl debugging guts and tips
    perlxstut        Perl XS tutorial
    perlxs        Perl XS application programming interface
    perlclib        Internal replacements for standard C library functions
    perlguts        Perl internal functions for those doing extensions
    perlcall        Perl calling conventions from C
    perlmroapi        Perl method resolution plugin interface
    perlreapi        Perl regular expression plugin interface
    perlreguts        Perl regular expression engine internals
    perlapi        Perl API listing (autogenerated)
    perlintern        Perl internal functions (autogenerated)
    perliol        C API for Perl's implementation of IO in Layers
    perlapio        Perl internal IO abstraction interface
    perlhack        Perl hackers guide
    perlsource        Guide to the Perl source tree
    perlinterp        Overview of the Perl intepreter source and how it works
    perlhacktut     Walk through the creation of a simple C code patch
    perlhacktips    Tips for Perl core C code hacking
    perlpolicy        Perl development policies
    perlgit        Using git with the Perl repository
=head2 Miscellaneous
    perlbook        Perl book information
    perlcommunity    Perl community information
    perltodo        Perl things to do
    perldoc        Look up Perl documentation in Pod format
    perlhist        Perl history records
    perldelta        Perl changes since previous version
    perl51311delta    Perl changes in version 5. 13. 11
    perl51310delta    Perl changes in version 5. 13. 10
    perl5139delta    Perl changes in version 5. 13. 9
    perl5138delta    Perl changes in version 5. 13. 8
    perl5137delta    Perl changes in version 5. 13. 7
    perl5136delta    Perl changes in version 5. 13. 6
    perl5135delta    Perl changes in version 5. 13. 5
    perl5134delta    Perl changes in version 5. 13. 4
    perl5133delta    Perl changes in version 5. 13. 3
    perl5132delta    Perl changes in version 5. 13. 2
    perl5131delta    Perl changes in version 5. 13. 1
    perl5130delta    Perl changes in version 5. 13. 0
    perl5123delta    Perl changes in version 5. 12. 3
    perl5122delta    Perl changes in version 5. 12. 2
    perl5121delta    Perl changes in version 5. 12. 1
    perl5120delta    Perl changes in version 5. 12. 0
    perl5115delta    Perl changes in version 5. 11. 5
    perl5114delta    Perl changes in version 5. 11. 4
    perl5113delta    Perl changes in version 5. 11. 3
    perl5112delta    Perl changes in version 5. 11. 2
    perl5111delta    Perl changes in version 5. 11. 1
    perl5110delta    Perl changes in version 5. 11. 0
    perl5101delta    Perl changes in version 5. 10. 1
    perl5100delta    Perl changes in version 5. 10. 0
    perl595delta    Perl changes in version 5. 9. 5
    perl594delta    Perl changes in version 5. 9. 4
    perl593delta    Perl changes in version 5. 9. 3
    perl592delta    Perl changes in version 5. 9. 2
    perl591delta    Perl changes in version 5. 9. 1
    perl590delta    Perl changes in version 5. 9. 0
    perl589delta    Perl changes in version 5. 8. 9
    perl588delta    Perl changes in version 5. 8. 8
    perl587delta    Perl changes in version 5. 8. 7
    perl586delta    Perl changes in version 5. 8. 6
    perl585delta    Perl changes in version 5. 8. 5
    perl584delta    Perl changes in version 5. 8. 4
    perl583delta    Perl changes in version 5. 8. 3
    perl582delta    Perl changes in version 5. 8. 2
    perl581delta    Perl changes in version 5. 8. 1
    perl58delta     Perl changes in version 5. 8. 0
    perl573delta    Perl changes in version 5. 7. 3
    perl572delta    Perl changes in version 5. 7. 2
    perl571delta    Perl changes in version 5. 7. 1
    perl570delta    Perl changes in version 5. 7. 0
    perl561delta    Perl changes in version 5. 6. 1
    perl56delta     Perl changes in version 5. 6
    perl5005delta    Perl changes in version 5. 005
    perl5004delta    Perl changes in version 5. 004
    perlartistic    Perl Artistic License
    perlgpl        GNU General Public License
=head2 Language-Specific
    perlcn        Perl for Simplified Chinese (in EUC-CN)
    perljp        Perl for Japanese (in EUC-JP)
    perlko        Perl for Korean (in EUC-KR)
    perltw        Perl for Traditional Chinese (in Big5)
=head2 Platform-Specific
    perlaix        Perl notes for AIX
    perlamiga        Perl notes for AmigaOS
    perlbeos        Perl notes for BeOS
    perlbs2000        Perl notes for POSIX-BC BS2000
    perlce        Perl notes for WinCE
    perlcygwin        Perl notes for Cygwin
    perldgux        Perl notes for DG/UX
    perldos        Perl notes for DOS
    perlepoc        Perl notes for EPOC
    perlfreebsd     Perl notes for FreeBSD
    perlhaiku        Perl notes for Haiku
    perlhpux        Perl notes for HP-UX
    perlhurd        Perl notes for Hurd
    perlirix        Perl notes for Irix
    perllinux        Perl notes for Linux
    perlmacos        Perl notes for Mac OS (Classic)
    perlmacosx        Perl notes for Mac OS X
    perlmpeix        Perl notes for MPE/iX
    perlnetware     Perl notes for NetWare
    perlopenbsd     Perl notes for OpenBSD
    perlos2        Perl notes for OS/2
    perlos390        Perl notes for OS/390
    perlos400        Perl notes for OS/400
    perlplan9        Perl notes for Plan 9
    perlqnx        Perl notes for QNX
    perlriscos        Perl notes for RISC OS
    perlsolaris     Perl notes for Solaris
    perlsymbian     Perl notes for Symbian
    perltru64        Perl notes for Tru64
    perluts        Perl notes for UTS
    perlvmesa        Perl notes for VM/ESA
    perlvms        Perl notes for VMS
    perlvos        Perl notes for Stratus VOS
    perlwin32        Perl notes for Windows
On a Unix-like system, these documentation files will usually also be available as manpages for use with the F<man> program.
In general, if something strange has gone wrong with your program and you're not sure where you should look for help, try the B<-w> switch first. It will often point out exactly where the trouble is.
=head1 DESCRIPTION
Perl officially stands for Practical Extraction and Report Language,  except when it doesn't.
Perl was originally a language optimized for scanning arbitrary text files, extracting information from those text files, and printing reports based on that information. It quickly became a good language for many system management tasks. Over the years, Perl has grown into a general-purpose programming language. It's widely used for everything from quick "one-liners" to full-scale application development.
The language is intended to be practical (easy to use, efficient,  complete) rather than beautiful (tiny, elegant, minimal).
Perl combines (in the author's opinion, anyway) some of the best features of C, B<sed>, B<awk>, and B<sh>, so people familiar with those languages should have little difficulty with it. (Language historians will also note some vestiges of B<csh>, Pascal, and even BASIC-PLUS. )  Expression syntax corresponds closely to C expression syntax. Unlike most Unix utilities, Perl does not arbitrarily limit the size of your data--if you've got the memory,  Perl can slurp in your whole file as a single string. Recursion is of unlimited depth. And the tables used by hashes (sometimes called "associative arrays") grow as necessary to prevent degraded performance. Perl can use sophisticated pattern matching techniques to scan large amounts of data quickly. Although optimized for scanning text, Perl also has many excellent tools for slicing and dicing binary data.
But wait, there's more. . .
Begun in 1993 (see L<perlhist>), Perl version 5 is nearly a complete rewrite that provides the following additional benefits:
=over 4
=item *
modularity and reusability using innumerable modules
Described in L<perlmod>, L<perlmodlib>, and L<perlmodinstall>.
embeddable and extensible
Described in L<perlembed>, L<perlxstut>, L<perlxs>, L<perlcall>,  L<perlguts>, and L<xsubpp>.
roll-your-own magic variables (including multiple simultaneous DBM implementations)
Described in L<perltie> and L<AnyDBM_File>.
subroutines can now be overridden, autoloaded, and prototyped
Described in L<perlsub>.
arbitrarily nested data structures and anonymous functions
Described in L<perlreftut>, L<perlref>, L<perldsc>, and L<perllol>.
object-oriented programming
Described in L<perlobj>, L<perlboot>, L<perltoot>, L<perltooc>,  and L<perlbot>.
support for light-weight processes (threads)
Described in L<perlthrtut> and L<threads>.
support for Unicode, internationalization, and localization
Described in L<perluniintro>, L<perllocale> and L<Locale::Maketext>.
lexical scoping
regular expression enhancements
Described in L<perlre>, with additional examples in L<perlop>.
enhanced debugger and interactive Perl environment,  with integrated editor support
Described in L<perldebtut>, L<perldebug> and L<perldebguts>.
POSIX 1003. 1 compliant library
Described in L<POSIX>.
=back
Okay, that's I<definitely> enough hype.
=head1 AVAILABILITY
Perl is available for most operating systems, including virtually all Unix-like platforms. See L<perlport/"Supported Platforms"> for a listing.
=head1 ENVIRONMENT
See L<perlrun>.
=head1 AUTHOR
Larry Wall <larry@wall. org>, with the help of oodles of other folks.
If your Perl success stories and testimonials may be of help to others who wish to advocate the use of Perl in their applications,  or if you wish to simply express your gratitude to Larry and the Perl developers, please write to perl-thanks@perl. org.
=head1 FILES
 "@INC"            locations of perl libraries
=head1 SEE ALSO
 http://www. perl. org/       the Perl homepage
 http://www. perl. com/       Perl articles (O'Reilly)
 http://www. cpan. org/       the Comprehensive Perl Archive
 http://www. pm. org/         the Perl Mongers
=head1 DIAGNOSTICS
The C<use warnings> pragma (and the B<-w> switch) produces some lovely diagnostics.
See L<perldiag> for explanations of all Perl's diagnostics. The C<use diagnostics> pragma automatically turns Perl's normally terse warnings and errors into these longer forms.
Compilation errors will tell you the line number of the error, with an indication of the next token or token type that was to be examined.  (In a script passed to Perl via B<-e> switches, each B<-e> is counted as one line. )
Setuid scripts have additional constraints that can produce error messages such as "Insecure dependency". See L<perlsec>.
Did we mention that you should definitely consider using the B<-w> switch?
=head1 BUGS
The B<-w> switch is not mandatory.
Perl is at the mercy of your machine's definitions of various operations such as type casting, atof(), and floating-point output with sprintf().
If your stdio requires a seek or eof between reads and writes on a particular stream, so does Perl. (This doesn't apply to sysread() and syswrite(). )
While none of the built-in data types have any arbitrary size limits (apart from memory size), there are still a few arbitrary limits:  a given variable name may not be longer than 251 characters. Line numbers displayed by diagnostics are internally stored as short integers,  so they are limited to a maximum of 65535 (higher numbers usually being affected by wraparound).
You may mail your bug reports (be sure to include full configuration information as output by the myconfig program in the perl source tree, or by C<perl -V>) to perlbug@perl. org. If you've succeeded in compiling perl, the L<perlbug> script in the F<utils/> subdirectory can be used to help mail in a bug report.
Perl actually stands for Pathologically Eclectic Rubbish Lister, but don't tell anyone I said that.
=head1 NOTES
The Perl motto is "There's more than one way to do it. "  Divining how many more is left as an exercise to the reader.
The three principal virtues of a programmer are Laziness,  Impatience, and Hubris. See the Camel Book for why.
=head1 NAME
perlapio - perl's IO abstraction interface.
=head1 SYNOPSIS
    #define PERLIO_NOT_STDIO 0    /* For co-existence with stdio only */
    #include <perlio. h>           /* Usually via #include <perl. h> */
    PerlIO *PerlIO_stdin(void);
    PerlIO *PerlIO_stdout(void);
    PerlIO *PerlIO_stderr(void);
    PerlIO *PerlIO_open(const char *path, const char *mode);
    PerlIO *PerlIO_fdopen(int fd, const char *mode);
    PerlIO *PerlIO_reopen(const char *path, const char *mode, PerlIO *old);  /* deprecated */
    int     PerlIO_close(PerlIO *f);
    int     PerlIO_stdoutf(const char *fmt,. . . )
    int     PerlIO_puts(PerlIO *f, const char *string);
    int     PerlIO_putc(PerlIO *f, int ch);
    int     PerlIO_write(PerlIO *f, const void *buf, size_t numbytes);
    int     PerlIO_printf(PerlIO *f, const char *fmt,. . . );
    int     PerlIO_vprintf(PerlIO *f, const char *fmt, va_list args);
    int     PerlIO_flush(PerlIO *f);
    int     PerlIO_eof(PerlIO *f);
    int     PerlIO_error(PerlIO *f);
    void    PerlIO_clearerr(PerlIO *f);
    int     PerlIO_getc(PerlIO *d);
    int     PerlIO_ungetc(PerlIO *f, int ch);
    int     PerlIO_read(PerlIO *f, void *buf, size_t numbytes);
    int     PerlIO_fileno(PerlIO *f);
    void    PerlIO_setlinebuf(PerlIO *f);
    Off_t   PerlIO_tell(PerlIO *f);
    int     PerlIO_seek(PerlIO *f, Off_t offset, int whence);
    void    PerlIO_rewind(PerlIO *f);
    int     PerlIO_getpos(PerlIO *f, SV *save);        /* prototype changed */
    int     PerlIO_setpos(PerlIO *f, SV *saved);       /* prototype changed */
    int     PerlIO_fast_gets(PerlIO *f);
    int     PerlIO_has_cntptr(PerlIO *f);
    int     PerlIO_get_cnt(PerlIO *f);
    char   *PerlIO_get_ptr(PerlIO *f);
    void    PerlIO_set_ptrcnt(PerlIO *f, char *ptr, int count);
    int     PerlIO_canset_cnt(PerlIO *f);              /* deprecated */
    void    PerlIO_set_cnt(PerlIO *f, int count);      /* deprecated */
    int     PerlIO_has_base(PerlIO *f);
    char   *PerlIO_get_base(PerlIO *f);
    int     PerlIO_get_bufsiz(PerlIO *f);
    PerlIO *PerlIO_importFILE(FILE *stdio, const char *mode);
    FILE   *PerlIO_exportFILE(PerlIO *f, int flags);
    FILE   *PerlIO_findFILE(PerlIO *f);
    void    PerlIO_releaseFILE(PerlIO *f, FILE *stdio);
    int     PerlIO_apply_layers(PerlIO *f, const char *mode, const char *layers);
    int     PerlIO_binmode(PerlIO *f, int ptype, int imode, const char *layers);
    void    PerlIO_debug(const char *fmt,. . . )
=head1 DESCRIPTION
Perl's source code, and extensions that want maximum portability,  should use the above functions instead of those defined in ANSI C's I<stdio. h>. The perl headers (in particular "perlio. h") will C<#define> them to the I/O mechanism selected at Configure time.
The functions are modeled on those in I<stdio. h>, but parameter order has been "tidied up a little".
C<PerlIO *> takes the place of FILE *. Like FILE * it should be treated as opaque (it is probably safe to assume it is a pointer to something).
There are currently three implementations:
=over 4
=item 1. USE_STDIO
All above are #define'd to stdio functions or are trivial wrapper functions which call stdio. In this case I<only> PerlIO * is a FILE *.  This has been the default implementation since the abstraction was introduced in perl5. 003_02.
=item 2. USE_SFIO
A "legacy" implementation in terms of the "sfio" library. Used for some specialist applications on Unix machines ("sfio" is not widely ported away from Unix). Most of above are #define'd to the sfio functions. PerlIO * is in this case Sfio_t *.
=item 3. USE_PERLIO
Introduced just after perl5. 7. 0, this is a re-implementation of the above abstraction which allows perl more control over how IO is done as it decouples IO from the way the operating system and C library choose to do things. For USE_PERLIO PerlIO * has an extra layer of indirection - it is a pointer-to-a-pointer. This allows the PerlIO * to remain with a known value while swapping the implementation around underneath I<at run time>. In this case all the above are true (but very simple) functions which call the underlying implementation.
This is the only implementation for which C<PerlIO_apply_layers()> does anything "interesting".
The USE_PERLIO implementation is described in L<perliol>.
=back
Because "perlio. h" is a thin layer (for efficiency) the semantics of these functions are somewhat dependent on the underlying implementation.  Where these variations are understood they are noted below.
Unless otherwise noted, functions return 0 on success, or a negative value (usually C<EOF> which is usually -1) and set C<errno> on error.
=item B<PerlIO_stdin()>, B<PerlIO_stdout()>, B<PerlIO_stderr()>
Use these rather than C<stdin>, C<stdout>, C<stderr>. They are written to look like "function calls" rather than variables because this makes it easier to I<make them> function calls if platform cannot export data to loaded modules, or if (say) different "threads" might have different values.
=item B<PerlIO_open(path, mode)>, B<PerlIO_fdopen(fd, mode)>
These correspond to fopen()/fdopen() and the arguments are the same.  Return C<NULL> and set C<errno> if there is an error. There may be an implementation limit on the number of open handles, which may be lower than the limit on the number of open files - C<errno> may not be set when C<NULL> is returned if this limit is exceeded.
=item B<PerlIO_reopen(path, mode, f)>
While this currently exists in all three implementations perl itself does not use it. I<As perl does not use it, it is not well tested. >
Perl prefers to C<dup> the new low-level descriptor to the descriptor used by the existing PerlIO. This may become the behaviour of this function in the future.
=item B<PerlIO_printf(f, fmt,. . . )>, B<PerlIO_vprintf(f, fmt, a)>
These are fprintf()/vfprintf() equivalents.
=item B<PerlIO_stdoutf(fmt,. . . )>
This is printf() equivalent. printf is #defined to this function,  so it is (currently) legal to use C<printf(fmt,. . . )> in perl sources.
=item B<PerlIO_read(f, buf, count)>, B<PerlIO_write(f, buf, count)>
These correspond functionally to fread() and fwrite() but the arguments and return values are different. The PerlIO_read() and PerlIO_write() signatures have been modeled on the more sane low level read() and write() functions instead: The "file" argument is passed first, there is only one "count", and the return value can distinguish between error and C<EOF>.
Returns a byte count if successful (which may be zero or positive), returns negative value and sets C<errno> on error.  Depending on implementation C<errno> may be C<EINTR> if operation was interrupted by a signal.
=item B<PerlIO_close(f)>
Depending on implementation C<errno> may be C<EINTR> if operation was interrupted by a signal.
=item B<PerlIO_puts(f, s)>, B<PerlIO_putc(f, c)>
These correspond to fputs() and fputc().  Note that arguments have been revised to have "file" first.
=item B<PerlIO_ungetc(f, c)>
This corresponds to ungetc(). Note that arguments have been revised to have "file" first. Arranges that next read operation will return the byte B<c>. Despite the implied "character" in the name only values in the range 0. . 0xFF are defined. Returns the byte B<c> on success or -1 (C<EOF>) on error. The number of bytes that can be "pushed back" may vary, only 1 character is certain, and then only if it is the last character that was read from the handle.
=item B<PerlIO_getc(f)>
This corresponds to getc().  Despite the c in the name only byte range 0. . 0xFF is supported.  Returns the character read or -1 (C<EOF>) on error.
=item B<PerlIO_eof(f)>
This corresponds to feof(). Returns a true/false indication of whether the handle is at end of file. For terminal devices this may or may not be "sticky" depending on the implementation. The flag is cleared by PerlIO_seek(), or PerlIO_rewind().
=item B<PerlIO_error(f)>
This corresponds to ferror(). Returns a true/false indication of whether there has been an IO error on the handle.
=item B<PerlIO_fileno(f)>
This corresponds to fileno(), note that on some platforms, the meaning of "fileno" may not match Unix. Returns -1 if the handle has no open descriptor associated with it.
=item B<PerlIO_clearerr(f)>
This corresponds to clearerr(), i. e. , clears 'error' and (usually) 'eof' flags for the "stream". Does not return a value.
=item B<PerlIO_flush(f)>
This corresponds to fflush(). Sends any buffered write data to the underlying file. If called with C<NULL> this may flush all open streams (or core dump with some USE_STDIO implementations). Calling on a handle open for read only, or on which last operation was a read of some kind may lead to undefined behaviour on some USE_STDIO implementations. The USE_PERLIO (layers) implementation tries to behave better: it flushes all open streams when passed C<NULL>, and attempts to retain data on read streams either in the buffer or by seeking the handle to the current logical position.
=item B<PerlIO_seek(f, offset, whence)>
This corresponds to fseek(). Sends buffered write data to the underlying file, or discards any buffered read data, then positions the file descriptor as specified by B<offset> and B<whence> (sic).  This is the correct thing to do when switching between read and write on the same handle (see issues with PerlIO_flush() above). Offset is of type C<Off_t> which is a perl Configure value which may not be same as stdio's C<off_t>.
=item B<PerlIO_tell(f)>
This corresponds to ftell(). Returns the current file position, or (Off_t) -1 on error. May just return value system "knows" without making a system call or checking the underlying file descriptor (so use on shared file descriptors is not safe without a PerlIO_seek()). Return value is of type C<Off_t> which is a perl Configure value which may not be same as stdio's C<off_t>.
=item B<PerlIO_getpos(f, p)>, B<PerlIO_setpos(f, p)>
These correspond (loosely) to fgetpos() and fsetpos(). Rather than stdio's Fpos_t they expect a "Perl Scalar Value" to be passed. What is stored there should be considered opaque. The layout of the data may vary from handle to handle. When not using stdio or if platform does not have the stdio calls then they are implemented in terms of PerlIO_tell() and PerlIO_seek().
=item B<PerlIO_rewind(f)>
This corresponds to rewind(). It is usually defined as being
    PerlIO_seek(f, (Off_t)0L, SEEK_SET);
    PerlIO_clearerr(f);
=item B<PerlIO_tmpfile()>
This corresponds to tmpfile(), i. e. , returns an anonymous PerlIO or NULL on error. The system will attempt to automatically delete the file when closed. On Unix the file is usually C<unlink>-ed just after it is created so it does not matter how it gets closed. On other systems the file may only be deleted if closed via PerlIO_close() and/or the program exits via C<exit>. Depending on the implementation there may be "race conditions" which allow other processes access to the file, though in general it will be safer in this regard than ad. hoc. schemes.
=item B<PerlIO_setlinebuf(f)>
This corresponds to setlinebuf(). Does not return a value. What constitutes a "line" is implementation dependent but usually means that writing "\n" flushes the buffer. What happens with things like "this\nthat" is uncertain. (Perl core uses it I<only> when "dumping"; it has nothing to do with $| auto-flush. )
=head2 Co-existence with stdio
There is outline support for co-existence of PerlIO with stdio.  Obviously if PerlIO is implemented in terms of stdio there is no problem. However in other cases then mechanisms must exist to create a FILE * which can be passed to library code which is going to use stdio calls.
The first step is to add this line:
   #define PERLIO_NOT_STDIO 0
I<before> including any perl header files. (This will probably become the default at some point). That prevents "perlio. h" from attempting to #define stdio functions onto PerlIO functions.
XS code is probably better using "typemap" if it expects FILE * arguments. The standard typemap will be adjusted to comprehend any changes in this area.
=item B<PerlIO_importFILE(f, mode)>
Used to get a PerlIO * from a FILE *.
The mode argument should be a string as would be passed to fopen/PerlIO_open. If it is NULL then - for legacy support - the code will (depending upon the platform and the implementation) either attempt to empirically determine the mode in which I<f> is open, or use "r+" to indicate a read/write stream.
Once called the FILE * should I<ONLY> be closed by calling C<PerlIO_close()> on the returned PerlIO *.
The PerlIO is set to textmode. Use PerlIO_binmode if this is not the desired mode.
This is B<not> the reverse of PerlIO_exportFILE().
=item B<PerlIO_exportFILE(f, mode)>
Given a PerlIO * create a 'native' FILE * suitable for passing to code expecting to be compiled and linked with ANSI C I<stdio. h>. The mode argument should be a string as would be passed to fopen/PerlIO_open.  If it is NULL then - for legacy support - the FILE * is opened in same mode as the PerlIO *.
The fact that such a FILE * has been 'exported' is recorded, (normally by pushing a new :stdio "layer" onto the PerlIO *), which may affect future PerlIO operations on the original PerlIO *. You should not call C<fclose()> on the file unless you call C<PerlIO_releaseFILE()> to disassociate it from the PerlIO *. (Do not use PerlIO_importFILE() for doing the disassociation. )
Calling this function repeatedly will create a FILE * on each call (and will push an :stdio layer each time as well).
=item B<PerlIO_releaseFILE(p, f)>
Calling PerlIO_releaseFILE informs PerlIO that all use of FILE * is complete. It is removed from the list of 'exported' FILE *s, and the associated PerlIO * should revert to its original behaviour.
Use this to disassociate a file from a PerlIO * that was associated using PerlIO_exportFILE().
=item B<PerlIO_findFILE(f)>
Returns a native FILE * used by a stdio layer. If there is none, it will create one with PerlIO_exportFILE. In either case the FILE * should be considered as belonging to PerlIO subsystem and should only be closed by calling C<PerlIO_close()>.
=head2 "Fast gets" Functions
In addition to standard-like API defined so far above there is an "implementation" interface which allows perl to get at internals of PerlIO. The following calls correspond to the various FILE_xxx macros determined by Configure - or their equivalent in other implementations. This section is really of interest to only those concerned with detailed perl-core behaviour, implementing a PerlIO mapping or writing code which can make use of the "read ahead" that has been done by the IO system in the same way perl does. Note that any code that uses these interfaces must be prepared to do things the traditional way if a handle does not support them.
=item B<PerlIO_fast_gets(f)>
Returns true if implementation has all the interfaces required to allow perl's C<sv_gets> to "bypass" normal IO mechanism. This can vary from handle to handle.
  PerlIO_fast_gets(f) = PerlIO_has_cntptr(f) && \
                        PerlIO_canset_cnt(f) && \
                        `Can set pointer into buffer'
=item B<PerlIO_has_cntptr(f)>
Implementation can return pointer to current position in the "buffer" and a count of bytes available in the buffer. Do not use this - use PerlIO_fast_gets.
=item B<PerlIO_get_cnt(f)>
Return count of readable bytes in the buffer. Zero or negative return means no more bytes available.
=item B<PerlIO_get_ptr(f)>
Return pointer to next readable byte in buffer, accessing via the pointer (dereferencing) is only safe if PerlIO_get_cnt() has returned a positive value. Only positive offsets up to value returned by PerlIO_get_cnt() are allowed.
=item B<PerlIO_set_ptrcnt(f, p, c)>
Set pointer into buffer, and a count of bytes still in the buffer. Should be used only to set pointer to within range implied by previous calls to C<PerlIO_get_ptr> and C<PerlIO_get_cnt>. The two values I<must> be consistent with each other (implementation may only use one or the other or may require both).
=item B<PerlIO_canset_cnt(f)>
Implementation can adjust its idea of number of bytes in the buffer.  Do not use this - use PerlIO_fast_gets.
=item B<PerlIO_set_cnt(f, c)>
Obscure - set count of bytes in the buffer. Deprecated. Only usable if PerlIO_canset_cnt() returns true. Currently used in only doio. c to force count less than -1 to -1. Perhaps should be PerlIO_set_empty or similar. This call may actually do nothing if "count" is deduced from pointer and a "limit". Do not use this - use PerlIO_set_ptrcnt().
=item B<PerlIO_has_base(f)>
Returns true if implementation has a buffer, and can return pointer to whole buffer and its size. Used by perl for B<-T> / B<-B> tests.  Other uses would be very obscure. . .
=item B<PerlIO_get_base(f)>
Return I<start> of buffer. Access only positive offsets in the buffer up to the value returned by PerlIO_get_bufsiz().
=item B<PerlIO_get_bufsiz(f)>
Return the I<total number of bytes> in the buffer, this is neither the number that can be read, nor the amount of memory allocated to the buffer. Rather it is what the operating system and/or implementation happened to C<read()> (or whatever) last time IO was requested.
=head2 Other Functions
=item PerlIO_apply_layers(f, mode, layers)
The new interface to the USE_PERLIO implementation. The layers ":crlf" and ":raw" are only ones allowed for other implementations and those are silently ignored. (As of perl5. 8 ":raw" is deprecated. )  Use PerlIO_binmode() below for the portable case.
=item PerlIO_binmode(f, ptype, imode, layers)
The hook used by perl's C<binmode> operator.  B<ptype> is perl's character for the kind of IO:
=over 8
=item 'E<lt>' read
=item 'E<gt>' write
=item '+' read/write
B<imode> is C<O_BINARY> or C<O_TEXT>.
B<layers> is a string of layers to apply, only ":crlf" makes sense in the non USE_PERLIO case. (As of perl5. 8 ":raw" is deprecated in favour of passing NULL. )
Portable cases are:
    PerlIO_binmode(f, ptype, O_BINARY, NULL); and
    PerlIO_binmode(f, ptype, O_TEXT, ":crlf");
On Unix these calls probably have no effect whatsoever. Elsewhere they alter "\n" to CR, LF translation and possibly cause a special text "end of file" indicator to be written or honoured on read. The effect of making the call after doing any IO to the handle depends on the implementation. (It may be ignored, affect any data which is already buffered as well, or only apply to subsequent data. )
=item PerlIO_debug(fmt,. . . )
PerlIO_debug is a printf()-like function which can be used for debugging. No return value. Its main use is inside PerlIO where using real printf, warn() etc. would recursively call PerlIO and be a problem.
PerlIO_debug writes to the file named by $ENV{'PERLIO_DEBUG'} typical use might be
  Bourne shells (sh, ksh, bash, zsh, ash,. . . ):
   PERLIO_DEBUG=/dev/tty. /perl somescript some args
  Csh/Tcsh:
   setenv PERLIO_DEBUG /dev/tty . /perl somescript some args
  If you have the "env" utility:
   env PERLIO_DEBUG=/dev/tty. /perl somescript some args
  Win32:
   set PERLIO_DEBUG=CON
   perl somescript some args
If $ENV{'PERLIO_DEBUG'} is not set PerlIO_debug() is a no-op.
